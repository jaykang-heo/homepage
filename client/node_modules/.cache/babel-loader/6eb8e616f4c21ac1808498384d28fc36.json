{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst apollo_engine_reporting_protobuf_1 = require(\"apollo-engine-reporting-protobuf\");\n\nconst treeBuilder_1 = require(\"./treeBuilder\");\n\nclass EngineFederatedTracingExtension {\n  constructor(options) {\n    this.enabled = false;\n    this.done = false;\n    this.treeBuilder = new treeBuilder_1.EngineReportingTreeBuilder({\n      rewriteError: options.rewriteError\n    });\n  }\n\n  requestDidStart(o) {\n    const http = o.requestContext.request.http;\n\n    if (http && http.headers.get('apollo-federation-include-trace') === 'ftv1') {\n      this.enabled = true;\n    }\n\n    if (this.enabled) {\n      this.treeBuilder.startTiming();\n    }\n  }\n\n  willResolveField(_source, _args, _context, info) {\n    if (this.enabled) {\n      return this.treeBuilder.willResolveField(info);\n    }\n  }\n\n  didEncounterErrors(errors) {\n    if (this.enabled) {\n      this.treeBuilder.didEncounterErrors(errors);\n    }\n  }\n\n  format() {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.done) {\n      throw Error('format called twice?');\n    }\n\n    this.treeBuilder.stopTiming();\n    this.done = true;\n    const encodedUint8Array = apollo_engine_reporting_protobuf_1.Trace.encode(this.treeBuilder.trace).finish();\n    const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);\n    return ['ftv1', encodedBuffer.toString('base64')];\n  }\n\n}\n\nexports.EngineFederatedTracingExtension = EngineFederatedTracingExtension;","map":{"version":3,"sources":["../src/federatedExtension.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,kCAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AAGA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAa,+BAAb,CAA4C;AAM1C,EAAA,WAAA,CAAmB,OAAnB,EAEC;AANO,SAAA,OAAA,GAAU,KAAV;AACA,SAAA,IAAA,GAAO,KAAP;AAMN,SAAK,WAAL,GAAmB,IAAI,aAAA,CAAA,0BAAJ,CAA+B;AAChD,MAAA,YAAY,EAAE,OAAO,CAAC;AAD0B,KAA/B,CAAnB;AAGD;;AAEM,EAAA,eAAe,CAAC,CAAD,EAErB;AAEC,UAAM,IAAI,GAAG,CAAC,CAAC,cAAF,CAAiB,OAAjB,CAAyB,IAAtC;;AACA,QACE,IAAI,IACJ,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,iCAAjB,MAAwD,MAF1D,EAGE;AACA,WAAK,OAAL,GAAe,IAAf;AACD;;AAED,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,WAAL,CAAiB,WAAjB;AACD;AACF;;AAEM,EAAA,gBAAgB,CACrB,OADqB,EAErB,KAFqB,EAGrB,QAHqB,EAIrB,IAJqB,EAIG;AAExB,QAAI,KAAK,OAAT,EAAkB;AAChB,aAAO,KAAK,WAAL,CAAiB,gBAAjB,CAAkC,IAAlC,CAAP;AACD;AACF;;AAEM,EAAA,kBAAkB,CAAC,MAAD,EAAuB;AAC9C,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,WAAL,CAAiB,kBAAjB,CAAoC,MAApC;AACD;AACF;;AAUM,EAAA,MAAM,GAAA;AACX,QAAI,CAAC,KAAK,OAAV,EAAmB;AACjB;AACD;;AACD,QAAI,KAAK,IAAT,EAAe;AACb,YAAM,KAAK,CAAC,sBAAD,CAAX;AACD;;AAID,SAAK,WAAL,CAAiB,UAAjB;AACA,SAAK,IAAL,GAAY,IAAZ;AAEA,UAAM,iBAAiB,GAAG,kCAAA,CAAA,KAAA,CAAM,MAAN,CAAa,KAAK,WAAL,CAAiB,KAA9B,EAAqC,MAArC,EAA1B;AACA,UAAM,aAAa,GAAG,MAAM,CAAC,IAAP,CACpB,iBADoB,EAEpB,iBAAiB,CAAC,UAFE,EAGpB,iBAAiB,CAAC,UAHE,CAAtB;AAKA,WAAO,CAAC,MAAD,EAAS,aAAa,CAAC,QAAd,CAAuB,QAAvB,CAAT,CAAP;AACD;;AA5EyC;;AAA5C,OAAA,CAAA,+BAAA,GAAA,+BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst apollo_engine_reporting_protobuf_1 = require(\"apollo-engine-reporting-protobuf\");\nconst treeBuilder_1 = require(\"./treeBuilder\");\nclass EngineFederatedTracingExtension {\n    constructor(options) {\n        this.enabled = false;\n        this.done = false;\n        this.treeBuilder = new treeBuilder_1.EngineReportingTreeBuilder({\n            rewriteError: options.rewriteError,\n        });\n    }\n    requestDidStart(o) {\n        const http = o.requestContext.request.http;\n        if (http &&\n            http.headers.get('apollo-federation-include-trace') === 'ftv1') {\n            this.enabled = true;\n        }\n        if (this.enabled) {\n            this.treeBuilder.startTiming();\n        }\n    }\n    willResolveField(_source, _args, _context, info) {\n        if (this.enabled) {\n            return this.treeBuilder.willResolveField(info);\n        }\n    }\n    didEncounterErrors(errors) {\n        if (this.enabled) {\n            this.treeBuilder.didEncounterErrors(errors);\n        }\n    }\n    format() {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.done) {\n            throw Error('format called twice?');\n        }\n        this.treeBuilder.stopTiming();\n        this.done = true;\n        const encodedUint8Array = apollo_engine_reporting_protobuf_1.Trace.encode(this.treeBuilder.trace).finish();\n        const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);\n        return ['ftv1', encodedBuffer.toString('base64')];\n    }\n}\nexports.EngineFederatedTracingExtension = EngineFederatedTracingExtension;\n//# sourceMappingURL=federatedExtension.js.map"]},"metadata":{},"sourceType":"script"}