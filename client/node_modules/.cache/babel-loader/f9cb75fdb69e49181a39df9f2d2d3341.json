{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst graphql_1 = require(\"graphql\");\n\nclass TracingExtension {\n  constructor() {\n    this.resolverCalls = [];\n  }\n\n  requestDidStart() {\n    this.startWallTime = new Date();\n    this.startHrTime = process.hrtime();\n  }\n\n  executionDidStart() {\n    return () => {\n      this.duration = process.hrtime(this.startHrTime);\n      this.endWallTime = new Date();\n    };\n  }\n\n  willResolveField(_source, _args, _context, info) {\n    const resolverCall = {\n      path: info.path,\n      fieldName: info.fieldName,\n      parentType: info.parentType,\n      returnType: info.returnType,\n      startOffset: process.hrtime(this.startHrTime)\n    };\n    this.resolverCalls.push(resolverCall);\n    return () => {\n      resolverCall.endOffset = process.hrtime(this.startHrTime);\n    };\n  }\n\n  format() {\n    if (typeof this.startWallTime === 'undefined' || typeof this.endWallTime === 'undefined' || typeof this.duration === 'undefined') {\n      return;\n    }\n\n    return ['tracing', {\n      version: 1,\n      startTime: this.startWallTime.toISOString(),\n      endTime: this.endWallTime.toISOString(),\n      duration: durationHrTimeToNanos(this.duration),\n      execution: {\n        resolvers: this.resolverCalls.map(resolverCall => {\n          const startOffset = durationHrTimeToNanos(resolverCall.startOffset);\n          const duration = resolverCall.endOffset ? durationHrTimeToNanos(resolverCall.endOffset) - startOffset : 0;\n          return {\n            path: [...graphql_1.responsePathAsArray(resolverCall.path)],\n            parentType: resolverCall.parentType.toString(),\n            fieldName: resolverCall.fieldName,\n            returnType: resolverCall.returnType.toString(),\n            startOffset,\n            duration\n          };\n        })\n      }\n    }];\n  }\n\n}\n\nexports.TracingExtension = TracingExtension;\n\nfunction durationHrTimeToNanos(hrtime) {\n  return hrtime[0] * 1e9 + hrtime[1];\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAmCA,MAAa,gBAAb,CAA6B;AAA7B,EAAA,WAAA,GAAA;AAOU,SAAA,aAAA,GAAgC,EAAhC;AAgFT;;AA9EQ,EAAA,eAAe,GAAA;AACpB,SAAK,aAAL,GAAqB,IAAI,IAAJ,EAArB;AACA,SAAK,WAAL,GAAmB,OAAO,CAAC,MAAR,EAAnB;AACD;;AAEM,EAAA,iBAAiB,GAAA;AAOtB,WAAO,MAAK;AACV,WAAK,QAAL,GAAgB,OAAO,CAAC,MAAR,CAAe,KAAK,WAApB,CAAhB;AACA,WAAK,WAAL,GAAmB,IAAI,IAAJ,EAAnB;AACD,KAHD;AAID;;AAEM,EAAA,gBAAgB,CACrB,OADqB,EAErB,KAFqB,EAGrB,QAHqB,EAIrB,IAJqB,EAIG;AAExB,UAAM,YAAY,GAAiB;AACjC,MAAA,IAAI,EAAE,IAAI,CAAC,IADsB;AAEjC,MAAA,SAAS,EAAE,IAAI,CAAC,SAFiB;AAGjC,MAAA,UAAU,EAAE,IAAI,CAAC,UAHgB;AAIjC,MAAA,UAAU,EAAE,IAAI,CAAC,UAJgB;AAKjC,MAAA,WAAW,EAAE,OAAO,CAAC,MAAR,CAAe,KAAK,WAApB;AALoB,KAAnC;AAQA,SAAK,aAAL,CAAmB,IAAnB,CAAwB,YAAxB;AAEA,WAAO,MAAK;AACV,MAAA,YAAY,CAAC,SAAb,GAAyB,OAAO,CAAC,MAAR,CAAe,KAAK,WAApB,CAAzB;AACD,KAFD;AAGD;;AAEM,EAAA,MAAM,GAAA;AAKX,QACE,OAAO,KAAK,aAAZ,KAA8B,WAA9B,IACA,OAAO,KAAK,WAAZ,KAA4B,WAD5B,IAEA,OAAO,KAAK,QAAZ,KAAyB,WAH3B,EAIE;AACA;AACD;;AAED,WAAO,CACL,SADK,EAEL;AACE,MAAA,OAAO,EAAE,CADX;AAEE,MAAA,SAAS,EAAE,KAAK,aAAL,CAAmB,WAAnB,EAFb;AAGE,MAAA,OAAO,EAAE,KAAK,WAAL,CAAiB,WAAjB,EAHX;AAIE,MAAA,QAAQ,EAAE,qBAAqB,CAAC,KAAK,QAAN,CAJjC;AAKE,MAAA,SAAS,EAAE;AACT,QAAA,SAAS,EAAE,KAAK,aAAL,CAAmB,GAAnB,CAAuB,YAAY,IAAG;AAC/C,gBAAM,WAAW,GAAG,qBAAqB,CAAC,YAAY,CAAC,WAAd,CAAzC;AACA,gBAAM,QAAQ,GAAG,YAAY,CAAC,SAAb,GACb,qBAAqB,CAAC,YAAY,CAAC,SAAd,CAArB,GAAgD,WADnC,GAEb,CAFJ;AAGA,iBAAO;AACL,YAAA,IAAI,EAAE,CAAC,GAAG,SAAA,CAAA,mBAAA,CAAoB,YAAY,CAAC,IAAjC,CAAJ,CADD;AAEL,YAAA,UAAU,EAAE,YAAY,CAAC,UAAb,CAAwB,QAAxB,EAFP;AAGL,YAAA,SAAS,EAAE,YAAY,CAAC,SAHnB;AAIL,YAAA,UAAU,EAAE,YAAY,CAAC,UAAb,CAAwB,QAAxB,EAJP;AAKL,YAAA,WALK;AAML,YAAA;AANK,WAAP;AAQD,SAbU;AADF;AALb,KAFK,CAAP;AAyBD;;AAtF0B;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAsGA,SAAS,qBAAT,CAA+B,MAA/B,EAAyD;AACvD,SAAO,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ,GAAkB,MAAM,CAAC,CAAD,CAA/B;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nclass TracingExtension {\n    constructor() {\n        this.resolverCalls = [];\n    }\n    requestDidStart() {\n        this.startWallTime = new Date();\n        this.startHrTime = process.hrtime();\n    }\n    executionDidStart() {\n        return () => {\n            this.duration = process.hrtime(this.startHrTime);\n            this.endWallTime = new Date();\n        };\n    }\n    willResolveField(_source, _args, _context, info) {\n        const resolverCall = {\n            path: info.path,\n            fieldName: info.fieldName,\n            parentType: info.parentType,\n            returnType: info.returnType,\n            startOffset: process.hrtime(this.startHrTime),\n        };\n        this.resolverCalls.push(resolverCall);\n        return () => {\n            resolverCall.endOffset = process.hrtime(this.startHrTime);\n        };\n    }\n    format() {\n        if (typeof this.startWallTime === 'undefined' ||\n            typeof this.endWallTime === 'undefined' ||\n            typeof this.duration === 'undefined') {\n            return;\n        }\n        return [\n            'tracing',\n            {\n                version: 1,\n                startTime: this.startWallTime.toISOString(),\n                endTime: this.endWallTime.toISOString(),\n                duration: durationHrTimeToNanos(this.duration),\n                execution: {\n                    resolvers: this.resolverCalls.map(resolverCall => {\n                        const startOffset = durationHrTimeToNanos(resolverCall.startOffset);\n                        const duration = resolverCall.endOffset\n                            ? durationHrTimeToNanos(resolverCall.endOffset) - startOffset\n                            : 0;\n                        return {\n                            path: [...graphql_1.responsePathAsArray(resolverCall.path)],\n                            parentType: resolverCall.parentType.toString(),\n                            fieldName: resolverCall.fieldName,\n                            returnType: resolverCall.returnType.toString(),\n                            startOffset,\n                            duration,\n                        };\n                    }),\n                },\n            },\n        ];\n    }\n}\nexports.TracingExtension = TracingExtension;\nfunction durationHrTimeToNanos(hrtime) {\n    return hrtime[0] * 1e9 + hrtime[1];\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}