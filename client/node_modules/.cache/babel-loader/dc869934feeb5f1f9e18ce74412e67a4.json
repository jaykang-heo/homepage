{"ast":null,"code":"/* Parse a string function definition and return a function object. Does not use eval.\n * @param {string} str\n * @return {function}\n *\n * Example:\n *  var f = function (x, y) { return x * y; };\n *  var g = parseFunction(f.toString());\n *  g(33, 3); //=> 99\n */\nfunction parseFunction(str) {\n  var fn_body_idx = str.indexOf('{'),\n      fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),\n      fn_declare = str.substring(0, fn_body_idx),\n      fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),\n      args = fn_params.split(',');\n  args.push(fn_body);\n\n  function Fn() {\n    return Function.apply(this, args);\n  }\n\n  Fn.prototype = Function.prototype;\n  return new Fn();\n}","map":{"version":3,"sources":["/home/jay/Desktop/homepage/src/practiceCode/parseFunction.js"],"names":["parseFunction","str","fn_body_idx","indexOf","fn_body","substring","lastIndexOf","fn_declare","fn_params","args","split","push","Fn","Function","apply","prototype"],"mappings":"AAAA;;;;;;;;;AASA,SAASA,aAAT,CAAwBC,GAAxB,EAA6B;AACzB,MAAIC,WAAW,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAlB;AAAA,MACIC,OAAO,GAAGH,GAAG,CAACI,SAAJ,CAAcH,WAAW,GAAC,CAA1B,EAA6BD,GAAG,CAACK,WAAJ,CAAgB,GAAhB,CAA7B,CADd;AAAA,MAEIC,UAAU,GAAGN,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiBH,WAAjB,CAFjB;AAAA,MAGIM,SAAS,GAAGD,UAAU,CAACF,SAAX,CAAqBE,UAAU,CAACJ,OAAX,CAAmB,GAAnB,IAAwB,CAA7C,EAAgDI,UAAU,CAACD,WAAX,CAAuB,GAAvB,CAAhD,CAHhB;AAAA,MAIIG,IAAI,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAJX;AAMAD,EAAAA,IAAI,CAACE,IAAL,CAAUP,OAAV;;AAEA,WAASQ,EAAT,GAAe;AACb,WAAOC,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqBL,IAArB,CAAP;AACD;;AACDG,EAAAA,EAAE,CAACG,SAAH,GAAeF,QAAQ,CAACE,SAAxB;AAEA,SAAO,IAAIH,EAAJ,EAAP;AACD","sourcesContent":["/* Parse a string function definition and return a function object. Does not use eval.\n * @param {string} str\n * @return {function}\n *\n * Example:\n *  var f = function (x, y) { return x * y; };\n *  var g = parseFunction(f.toString());\n *  g(33, 3); //=> 99\n */\nfunction parseFunction (str) {\n    var fn_body_idx = str.indexOf('{'),\n        fn_body = str.substring(fn_body_idx+1, str.lastIndexOf('}')),\n        fn_declare = str.substring(0, fn_body_idx),\n        fn_params = fn_declare.substring(fn_declare.indexOf('(')+1, fn_declare.lastIndexOf(')')),\n        args = fn_params.split(',');\n  \n    args.push(fn_body);\n  \n    function Fn () {\n      return Function.apply(this, args);\n    }\n    Fn.prototype = Function.prototype;\n      \n    return new Fn();\n  }"]},"metadata":{},"sourceType":"module"}