{"ast":null,"code":"const Pool = require('pg').Pool;\n\nconst pool = new Pool({\n  user: 'me',\n  host: 'localhost',\n  database: 'api',\n  password: 'password',\n  port: 5432\n});\n\nconst getUsers = (request, response) => {\n  pool.query('SELECT * FROM users ORDER BY id ASC', (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).json(results.rows);\n  });\n};\n\nconst getUserById = (request, response) => {\n  const id = parseInt(request.params.id);\n  pool.query('SELECT * FROM users WHERE id = $1', [id], (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).json(results.rows);\n  });\n};\n\nconst createUser = (request, response) => {\n  const {\n    name,\n    email\n  } = request.body;\n  pool.query('INSERT INTO users (name, email) VALUES ($1, $2)', [name, email], (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(201).send(`User added with ID: ${result.insertId}`);\n  });\n};\n\nconst updateUser = (request, response) => {\n  const id = parseInt(request.params.id);\n  const {\n    name,\n    email\n  } = request.body;\n  pool.query('UPDATE users SET name = $1, email = $2 WHERE id = $3', [name, email, id], (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).send(`User modified with ID: ${id}`);\n  });\n};\n\nconst deleteUser = (request, response) => {\n  const id = parseInt(request.params.id);\n  pool.query('DELETE FROM users WHERE id = $1', [id], (error, results) => {\n    if (error) {\n      throw error;\n    }\n\n    response.status(200).send(`User deleted with ID: ${id}`);\n  });\n};\n\nmodule.exports = {\n  getUsers,\n  getUserById,\n  createUser,\n  updateUser,\n  deleteUser\n};","map":{"version":3,"sources":["/home/jay/Desktop/homepage/src/queries.js"],"names":["Pool","require","pool","user","host","database","password","port","getUsers","request","response","query","error","results","status","json","rows","getUserById","id","parseInt","params","createUser","name","email","body","send","result","insertId","updateUser","deleteUser","module","exports"],"mappings":"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","sourcesContent":["const Pool = require('pg').Pool\nconst pool = new Pool({\n  user: 'me',\n  host: 'localhost',\n  database: 'api',\n  password: 'password',\n  port: 5432,\n})\n\nconst getUsers = (request, response) => {\n    pool.query('SELECT * FROM users ORDER BY id ASC', (error, results) => {\n      if (error) {\n        throw error\n      }\n      response.status(200).json(results.rows)\n    })\n  }\n\nconst getUserById = (request, response) => {\nconst id = parseInt(request.params.id)\n\npool.query('SELECT * FROM users WHERE id = $1', [id], (error, results) => {\n    if (error) {\n    throw error\n    }\n    response.status(200).json(results.rows)\n})\n}\n\nconst createUser = (request, response) => {\n    const { name, email } = request.body\n  \n    pool.query('INSERT INTO users (name, email) VALUES ($1, $2)', [name, email], (error, results) => {\n      if (error) {\n        throw error\n      }\n      response.status(201).send(`User added with ID: ${result.insertId}`)\n    })\n  }\n\nconst updateUser = (request, response) => {\nconst id = parseInt(request.params.id)\nconst { name, email } = request.body\n\npool.query(\n    'UPDATE users SET name = $1, email = $2 WHERE id = $3',\n    [name, email, id],\n    (error, results) => {\n    if (error) {\n        throw error\n    }\n    response.status(200).send(`User modified with ID: ${id}`)\n    }\n)\n}\n\nconst deleteUser = (request, response) => {\n    const id = parseInt(request.params.id)\n  \n    pool.query('DELETE FROM users WHERE id = $1', [id], (error, results) => {\n      if (error) {\n        throw error\n      }\n      response.status(200).send(`User deleted with ID: ${id}`)\n    })\n  }\n\nmodule.exports = {\n    getUsers,\n    getUserById,\n    createUser,\n    updateUser,\n    deleteUser,\n  }"]},"metadata":{},"sourceType":"module"}