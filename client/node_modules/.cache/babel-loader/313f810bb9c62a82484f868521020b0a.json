{"ast":null,"code":"/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"@apollo/protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.Trace = function () {\n  /**\n   * Properties of a Trace.\n   * @exports ITrace\n   * @interface ITrace\n   * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n   * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n   * @property {number|null} [durationNs] Trace durationNs\n   * @property {Trace.INode|null} [root] Trace root\n   * @property {string|null} [signature] Trace signature\n   * @property {Trace.IDetails|null} [details] Trace details\n   * @property {string|null} [clientName] Trace clientName\n   * @property {string|null} [clientVersion] Trace clientVersion\n   * @property {string|null} [clientAddress] Trace clientAddress\n   * @property {string|null} [clientReferenceId] Trace clientReferenceId\n   * @property {Trace.IHTTP|null} [http] Trace http\n   * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n   * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n   * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n   * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n   * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n   * @property {boolean|null} [registeredOperation] Trace registeredOperation\n   * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n   * @property {google.protobuf.ITimestamp|null} [originReportedStartTime] Trace originReportedStartTime\n   * @property {google.protobuf.ITimestamp|null} [originReportedEndTime] Trace originReportedEndTime\n   * @property {number|null} [originReportedDurationNs] Trace originReportedDurationNs\n   * @property {string|null} [legacySignatureNeedsResigning] Trace legacySignatureNeedsResigning\n   */\n\n  /**\n   * Constructs a new Trace.\n   * @exports Trace\n   * @classdesc Represents a Trace.\n   * @implements ITrace\n   * @constructor\n   * @param {ITrace=} [properties] Properties to set\n   */\n  function Trace(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * Trace startTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} startTime\n   * @memberof Trace\n   * @instance\n   */\n\n\n  Trace.prototype.startTime = null;\n  /**\n   * Trace endTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} endTime\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.endTime = null;\n  /**\n   * Trace durationNs.\n   * @member {number} durationNs\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.durationNs = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Trace root.\n   * @member {Trace.INode|null|undefined} root\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.root = null;\n  /**\n   * Trace signature.\n   * @member {string} signature\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.signature = \"\";\n  /**\n   * Trace details.\n   * @member {Trace.IDetails|null|undefined} details\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.details = null;\n  /**\n   * Trace clientName.\n   * @member {string} clientName\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.clientName = \"\";\n  /**\n   * Trace clientVersion.\n   * @member {string} clientVersion\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.clientVersion = \"\";\n  /**\n   * Trace clientAddress.\n   * @member {string} clientAddress\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.clientAddress = \"\";\n  /**\n   * Trace clientReferenceId.\n   * @member {string} clientReferenceId\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.clientReferenceId = \"\";\n  /**\n   * Trace http.\n   * @member {Trace.IHTTP|null|undefined} http\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.http = null;\n  /**\n   * Trace cachePolicy.\n   * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.cachePolicy = null;\n  /**\n   * Trace queryPlan.\n   * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.queryPlan = null;\n  /**\n   * Trace fullQueryCacheHit.\n   * @member {boolean} fullQueryCacheHit\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.fullQueryCacheHit = false;\n  /**\n   * Trace persistedQueryHit.\n   * @member {boolean} persistedQueryHit\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.persistedQueryHit = false;\n  /**\n   * Trace persistedQueryRegister.\n   * @member {boolean} persistedQueryRegister\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.persistedQueryRegister = false;\n  /**\n   * Trace registeredOperation.\n   * @member {boolean} registeredOperation\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.registeredOperation = false;\n  /**\n   * Trace forbiddenOperation.\n   * @member {boolean} forbiddenOperation\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.forbiddenOperation = false;\n  /**\n   * Trace originReportedStartTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} originReportedStartTime\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.originReportedStartTime = null;\n  /**\n   * Trace originReportedEndTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} originReportedEndTime\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.originReportedEndTime = null;\n  /**\n   * Trace originReportedDurationNs.\n   * @member {number} originReportedDurationNs\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.originReportedDurationNs = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Trace legacySignatureNeedsResigning.\n   * @member {string} legacySignatureNeedsResigning\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.legacySignatureNeedsResigning = \"\";\n  /**\n   * Creates a new Trace instance using the specified properties.\n   * @function create\n   * @memberof Trace\n   * @static\n   * @param {ITrace=} [properties] Properties to set\n   * @returns {Trace} Trace instance\n   */\n\n  Trace.create = function create(properties) {\n    return new Trace(properties);\n  };\n  /**\n   * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n   * @function encode\n   * @memberof Trace\n   * @static\n   * @param {ITrace} message Trace message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Trace.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\")) $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).fork()).ldelim();\n    if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\")) $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(\n    /* id 4, wireType 2 =*/\n    34).fork()).ldelim();\n    if (message.legacySignatureNeedsResigning != null && Object.hasOwnProperty.call(message, \"legacySignatureNeedsResigning\")) writer.uint32(\n    /* id 5, wireType 2 =*/\n    42).string(message.legacySignatureNeedsResigning);\n    if (message.details != null && Object.hasOwnProperty.call(message, \"details\")) $root.Trace.Details.encode(message.details, writer.uint32(\n    /* id 6, wireType 2 =*/\n    50).fork()).ldelim();\n    if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\")) writer.uint32(\n    /* id 7, wireType 2 =*/\n    58).string(message.clientName);\n    if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\")) writer.uint32(\n    /* id 8, wireType 2 =*/\n    66).string(message.clientVersion);\n    if (message.clientAddress != null && Object.hasOwnProperty.call(message, \"clientAddress\")) writer.uint32(\n    /* id 9, wireType 2 =*/\n    74).string(message.clientAddress);\n    if (message.http != null && Object.hasOwnProperty.call(message, \"http\")) $root.Trace.HTTP.encode(message.http, writer.uint32(\n    /* id 10, wireType 2 =*/\n    82).fork()).ldelim();\n    if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\")) writer.uint32(\n    /* id 11, wireType 0 =*/\n    88).uint64(message.durationNs);\n    if (message.root != null && Object.hasOwnProperty.call(message, \"root\")) $root.Trace.Node.encode(message.root, writer.uint32(\n    /* id 14, wireType 2 =*/\n    114).fork()).ldelim();\n    if (message.originReportedStartTime != null && Object.hasOwnProperty.call(message, \"originReportedStartTime\")) $root.google.protobuf.Timestamp.encode(message.originReportedStartTime, writer.uint32(\n    /* id 15, wireType 2 =*/\n    122).fork()).ldelim();\n    if (message.originReportedEndTime != null && Object.hasOwnProperty.call(message, \"originReportedEndTime\")) $root.google.protobuf.Timestamp.encode(message.originReportedEndTime, writer.uint32(\n    /* id 16, wireType 2 =*/\n    130).fork()).ldelim();\n    if (message.originReportedDurationNs != null && Object.hasOwnProperty.call(message, \"originReportedDurationNs\")) writer.uint32(\n    /* id 17, wireType 0 =*/\n    136).uint64(message.originReportedDurationNs);\n    if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\")) $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(\n    /* id 18, wireType 2 =*/\n    146).fork()).ldelim();\n    if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\")) writer.uint32(\n    /* id 19, wireType 2 =*/\n    154).string(message.signature);\n    if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\")) writer.uint32(\n    /* id 20, wireType 0 =*/\n    160).bool(message.fullQueryCacheHit);\n    if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\")) writer.uint32(\n    /* id 21, wireType 0 =*/\n    168).bool(message.persistedQueryHit);\n    if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\")) writer.uint32(\n    /* id 22, wireType 0 =*/\n    176).bool(message.persistedQueryRegister);\n    if (message.clientReferenceId != null && Object.hasOwnProperty.call(message, \"clientReferenceId\")) writer.uint32(\n    /* id 23, wireType 2 =*/\n    186).string(message.clientReferenceId);\n    if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\")) writer.uint32(\n    /* id 24, wireType 0 =*/\n    192).bool(message.registeredOperation);\n    if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\")) writer.uint32(\n    /* id 25, wireType 0 =*/\n    200).bool(message.forbiddenOperation);\n    if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\")) $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(\n    /* id 26, wireType 2 =*/\n    210).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Trace\n   * @static\n   * @param {ITrace} message Trace message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Trace.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a Trace message from the specified reader or buffer.\n   * @function decode\n   * @memberof Trace\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Trace} Trace\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Trace.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Trace();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 4:\n          message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n\n        case 11:\n          message.durationNs = reader.uint64();\n          break;\n\n        case 14:\n          message.root = $root.Trace.Node.decode(reader, reader.uint32());\n          break;\n\n        case 19:\n          message.signature = reader.string();\n          break;\n\n        case 6:\n          message.details = $root.Trace.Details.decode(reader, reader.uint32());\n          break;\n\n        case 7:\n          message.clientName = reader.string();\n          break;\n\n        case 8:\n          message.clientVersion = reader.string();\n          break;\n\n        case 9:\n          message.clientAddress = reader.string();\n          break;\n\n        case 23:\n          message.clientReferenceId = reader.string();\n          break;\n\n        case 10:\n          message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n          break;\n\n        case 18:\n          message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n          break;\n\n        case 26:\n          message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n          break;\n\n        case 20:\n          message.fullQueryCacheHit = reader.bool();\n          break;\n\n        case 21:\n          message.persistedQueryHit = reader.bool();\n          break;\n\n        case 22:\n          message.persistedQueryRegister = reader.bool();\n          break;\n\n        case 24:\n          message.registeredOperation = reader.bool();\n          break;\n\n        case 25:\n          message.forbiddenOperation = reader.bool();\n          break;\n\n        case 15:\n          message.originReportedStartTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n\n        case 16:\n          message.originReportedEndTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n\n        case 17:\n          message.originReportedDurationNs = reader.uint64();\n          break;\n\n        case 5:\n          message.legacySignatureNeedsResigning = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a Trace message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Trace\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Trace} Trace\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Trace.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a Trace message.\n   * @function verify\n   * @memberof Trace\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  Trace.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n      if (error) return \"startTime.\" + error;\n    }\n\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n      if (error) return \"endTime.\" + error;\n    }\n\n    if (message.durationNs != null && message.hasOwnProperty(\"durationNs\")) if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high))) return \"durationNs: integer|Long expected\";\n\n    if (message.root != null && message.hasOwnProperty(\"root\")) {\n      var error = $root.Trace.Node.verify(message.root);\n      if (error) return \"root.\" + error;\n    }\n\n    if (message.signature != null && message.hasOwnProperty(\"signature\")) if (!$util.isString(message.signature)) return \"signature: string expected\";\n\n    if (message.details != null && message.hasOwnProperty(\"details\")) {\n      var error = $root.Trace.Details.verify(message.details);\n      if (error) return \"details.\" + error;\n    }\n\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) if (!$util.isString(message.clientName)) return \"clientName: string expected\";\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) if (!$util.isString(message.clientVersion)) return \"clientVersion: string expected\";\n    if (message.clientAddress != null && message.hasOwnProperty(\"clientAddress\")) if (!$util.isString(message.clientAddress)) return \"clientAddress: string expected\";\n    if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\")) if (!$util.isString(message.clientReferenceId)) return \"clientReferenceId: string expected\";\n\n    if (message.http != null && message.hasOwnProperty(\"http\")) {\n      var error = $root.Trace.HTTP.verify(message.http);\n      if (error) return \"http.\" + error;\n    }\n\n    if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n      var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n      if (error) return \"cachePolicy.\" + error;\n    }\n\n    if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n      var error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n      if (error) return \"queryPlan.\" + error;\n    }\n\n    if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\")) if (typeof message.fullQueryCacheHit !== \"boolean\") return \"fullQueryCacheHit: boolean expected\";\n    if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\")) if (typeof message.persistedQueryHit !== \"boolean\") return \"persistedQueryHit: boolean expected\";\n    if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\")) if (typeof message.persistedQueryRegister !== \"boolean\") return \"persistedQueryRegister: boolean expected\";\n    if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\")) if (typeof message.registeredOperation !== \"boolean\") return \"registeredOperation: boolean expected\";\n    if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\")) if (typeof message.forbiddenOperation !== \"boolean\") return \"forbiddenOperation: boolean expected\";\n\n    if (message.originReportedStartTime != null && message.hasOwnProperty(\"originReportedStartTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.originReportedStartTime);\n      if (error) return \"originReportedStartTime.\" + error;\n    }\n\n    if (message.originReportedEndTime != null && message.hasOwnProperty(\"originReportedEndTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.originReportedEndTime);\n      if (error) return \"originReportedEndTime.\" + error;\n    }\n\n    if (message.originReportedDurationNs != null && message.hasOwnProperty(\"originReportedDurationNs\")) if (!$util.isInteger(message.originReportedDurationNs) && !(message.originReportedDurationNs && $util.isInteger(message.originReportedDurationNs.low) && $util.isInteger(message.originReportedDurationNs.high))) return \"originReportedDurationNs: integer|Long expected\";\n    if (message.legacySignatureNeedsResigning != null && message.hasOwnProperty(\"legacySignatureNeedsResigning\")) if (!$util.isString(message.legacySignatureNeedsResigning)) return \"legacySignatureNeedsResigning: string expected\";\n    return null;\n  };\n  /**\n   * Creates a Trace message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Trace\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Trace} Trace\n   */\n\n\n  Trace.fromObject = function fromObject(object) {\n    if (object instanceof $root.Trace) return object;\n    var message = new $root.Trace();\n\n    if (object.startTime != null) {\n      if (typeof object.startTime !== \"object\") throw TypeError(\".Trace.startTime: object expected\");\n      message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);\n    }\n\n    if (object.endTime != null) {\n      if (typeof object.endTime !== \"object\") throw TypeError(\".Trace.endTime: object expected\");\n      message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);\n    }\n\n    if (object.durationNs != null) if ($util.Long) (message.durationNs = $util.Long.fromValue(object.durationNs)).unsigned = true;else if (typeof object.durationNs === \"string\") message.durationNs = parseInt(object.durationNs, 10);else if (typeof object.durationNs === \"number\") message.durationNs = object.durationNs;else if (typeof object.durationNs === \"object\") message.durationNs = new $util.LongBits(object.durationNs.low >>> 0, object.durationNs.high >>> 0).toNumber(true);\n\n    if (object.root != null) {\n      if (typeof object.root !== \"object\") throw TypeError(\".Trace.root: object expected\");\n      message.root = $root.Trace.Node.fromObject(object.root);\n    }\n\n    if (object.signature != null) message.signature = String(object.signature);\n\n    if (object.details != null) {\n      if (typeof object.details !== \"object\") throw TypeError(\".Trace.details: object expected\");\n      message.details = $root.Trace.Details.fromObject(object.details);\n    }\n\n    if (object.clientName != null) message.clientName = String(object.clientName);\n    if (object.clientVersion != null) message.clientVersion = String(object.clientVersion);\n    if (object.clientAddress != null) message.clientAddress = String(object.clientAddress);\n    if (object.clientReferenceId != null) message.clientReferenceId = String(object.clientReferenceId);\n\n    if (object.http != null) {\n      if (typeof object.http !== \"object\") throw TypeError(\".Trace.http: object expected\");\n      message.http = $root.Trace.HTTP.fromObject(object.http);\n    }\n\n    if (object.cachePolicy != null) {\n      if (typeof object.cachePolicy !== \"object\") throw TypeError(\".Trace.cachePolicy: object expected\");\n      message.cachePolicy = $root.Trace.CachePolicy.fromObject(object.cachePolicy);\n    }\n\n    if (object.queryPlan != null) {\n      if (typeof object.queryPlan !== \"object\") throw TypeError(\".Trace.queryPlan: object expected\");\n      message.queryPlan = $root.Trace.QueryPlanNode.fromObject(object.queryPlan);\n    }\n\n    if (object.fullQueryCacheHit != null) message.fullQueryCacheHit = Boolean(object.fullQueryCacheHit);\n    if (object.persistedQueryHit != null) message.persistedQueryHit = Boolean(object.persistedQueryHit);\n    if (object.persistedQueryRegister != null) message.persistedQueryRegister = Boolean(object.persistedQueryRegister);\n    if (object.registeredOperation != null) message.registeredOperation = Boolean(object.registeredOperation);\n    if (object.forbiddenOperation != null) message.forbiddenOperation = Boolean(object.forbiddenOperation);\n\n    if (object.originReportedStartTime != null) {\n      if (typeof object.originReportedStartTime !== \"object\") throw TypeError(\".Trace.originReportedStartTime: object expected\");\n      message.originReportedStartTime = $root.google.protobuf.Timestamp.fromObject(object.originReportedStartTime);\n    }\n\n    if (object.originReportedEndTime != null) {\n      if (typeof object.originReportedEndTime !== \"object\") throw TypeError(\".Trace.originReportedEndTime: object expected\");\n      message.originReportedEndTime = $root.google.protobuf.Timestamp.fromObject(object.originReportedEndTime);\n    }\n\n    if (object.originReportedDurationNs != null) if ($util.Long) (message.originReportedDurationNs = $util.Long.fromValue(object.originReportedDurationNs)).unsigned = true;else if (typeof object.originReportedDurationNs === \"string\") message.originReportedDurationNs = parseInt(object.originReportedDurationNs, 10);else if (typeof object.originReportedDurationNs === \"number\") message.originReportedDurationNs = object.originReportedDurationNs;else if (typeof object.originReportedDurationNs === \"object\") message.originReportedDurationNs = new $util.LongBits(object.originReportedDurationNs.low >>> 0, object.originReportedDurationNs.high >>> 0).toNumber(true);\n    if (object.legacySignatureNeedsResigning != null) message.legacySignatureNeedsResigning = String(object.legacySignatureNeedsResigning);\n    return message;\n  };\n  /**\n   * Creates a plain object from a Trace message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Trace\n   * @static\n   * @param {Trace} message Trace\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Trace.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.endTime = null;\n      object.startTime = null;\n      object.legacySignatureNeedsResigning = \"\";\n      object.details = null;\n      object.clientName = \"\";\n      object.clientVersion = \"\";\n      object.clientAddress = \"\";\n      object.http = null;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.durationNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.durationNs = options.longs === String ? \"0\" : 0;\n\n      object.root = null;\n      object.originReportedStartTime = null;\n      object.originReportedEndTime = null;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.originReportedDurationNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.originReportedDurationNs = options.longs === String ? \"0\" : 0;\n\n      object.cachePolicy = null;\n      object.signature = \"\";\n      object.fullQueryCacheHit = false;\n      object.persistedQueryHit = false;\n      object.persistedQueryRegister = false;\n      object.clientReferenceId = \"\";\n      object.registeredOperation = false;\n      object.forbiddenOperation = false;\n      object.queryPlan = null;\n    }\n\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n    if (message.startTime != null && message.hasOwnProperty(\"startTime\")) object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n    if (message.legacySignatureNeedsResigning != null && message.hasOwnProperty(\"legacySignatureNeedsResigning\")) object.legacySignatureNeedsResigning = message.legacySignatureNeedsResigning;\n    if (message.details != null && message.hasOwnProperty(\"details\")) object.details = $root.Trace.Details.toObject(message.details, options);\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) object.clientName = message.clientName;\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) object.clientVersion = message.clientVersion;\n    if (message.clientAddress != null && message.hasOwnProperty(\"clientAddress\")) object.clientAddress = message.clientAddress;\n    if (message.http != null && message.hasOwnProperty(\"http\")) object.http = $root.Trace.HTTP.toObject(message.http, options);\n    if (message.durationNs != null && message.hasOwnProperty(\"durationNs\")) if (typeof message.durationNs === \"number\") object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;else object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n    if (message.root != null && message.hasOwnProperty(\"root\")) object.root = $root.Trace.Node.toObject(message.root, options);\n    if (message.originReportedStartTime != null && message.hasOwnProperty(\"originReportedStartTime\")) object.originReportedStartTime = $root.google.protobuf.Timestamp.toObject(message.originReportedStartTime, options);\n    if (message.originReportedEndTime != null && message.hasOwnProperty(\"originReportedEndTime\")) object.originReportedEndTime = $root.google.protobuf.Timestamp.toObject(message.originReportedEndTime, options);\n    if (message.originReportedDurationNs != null && message.hasOwnProperty(\"originReportedDurationNs\")) if (typeof message.originReportedDurationNs === \"number\") object.originReportedDurationNs = options.longs === String ? String(message.originReportedDurationNs) : message.originReportedDurationNs;else object.originReportedDurationNs = options.longs === String ? $util.Long.prototype.toString.call(message.originReportedDurationNs) : options.longs === Number ? new $util.LongBits(message.originReportedDurationNs.low >>> 0, message.originReportedDurationNs.high >>> 0).toNumber(true) : message.originReportedDurationNs;\n    if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n    if (message.signature != null && message.hasOwnProperty(\"signature\")) object.signature = message.signature;\n    if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\")) object.fullQueryCacheHit = message.fullQueryCacheHit;\n    if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\")) object.persistedQueryHit = message.persistedQueryHit;\n    if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\")) object.persistedQueryRegister = message.persistedQueryRegister;\n    if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\")) object.clientReferenceId = message.clientReferenceId;\n    if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\")) object.registeredOperation = message.registeredOperation;\n    if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\")) object.forbiddenOperation = message.forbiddenOperation;\n    if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n    return object;\n  };\n  /**\n   * Converts this Trace to JSON.\n   * @function toJSON\n   * @memberof Trace\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Trace.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  Trace.CachePolicy = function () {\n    /**\n     * Properties of a CachePolicy.\n     * @memberof Trace\n     * @interface ICachePolicy\n     * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n     * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n     */\n\n    /**\n     * Constructs a new CachePolicy.\n     * @memberof Trace\n     * @classdesc Represents a CachePolicy.\n     * @implements ICachePolicy\n     * @constructor\n     * @param {Trace.ICachePolicy=} [properties] Properties to set\n     */\n    function CachePolicy(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * CachePolicy scope.\n     * @member {Trace.CachePolicy.Scope} scope\n     * @memberof Trace.CachePolicy\n     * @instance\n     */\n\n\n    CachePolicy.prototype.scope = 0;\n    /**\n     * CachePolicy maxAgeNs.\n     * @member {number} maxAgeNs\n     * @memberof Trace.CachePolicy\n     * @instance\n     */\n\n    CachePolicy.prototype.maxAgeNs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Creates a new CachePolicy instance using the specified properties.\n     * @function create\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.ICachePolicy=} [properties] Properties to set\n     * @returns {Trace.CachePolicy} CachePolicy instance\n     */\n\n    CachePolicy.create = function create(properties) {\n      return new CachePolicy(properties);\n    };\n    /**\n     * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CachePolicy.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\")) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).int32(message.scope);\n      if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\")) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).int64(message.maxAgeNs);\n      return writer;\n    };\n    /**\n     * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a CachePolicy message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.CachePolicy} CachePolicy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CachePolicy.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.CachePolicy();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.scope = reader.int32();\n            break;\n\n          case 2:\n            message.maxAgeNs = reader.int64();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.CachePolicy} CachePolicy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a CachePolicy message.\n     * @function verify\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    CachePolicy.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.scope != null && message.hasOwnProperty(\"scope\")) switch (message.scope) {\n        default:\n          return \"scope: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n          break;\n      }\n      if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\")) if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high))) return \"maxAgeNs: integer|Long expected\";\n      return null;\n    };\n    /**\n     * Creates a CachePolicy message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.CachePolicy} CachePolicy\n     */\n\n\n    CachePolicy.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.CachePolicy) return object;\n      var message = new $root.Trace.CachePolicy();\n\n      switch (object.scope) {\n        case \"UNKNOWN\":\n        case 0:\n          message.scope = 0;\n          break;\n\n        case \"PUBLIC\":\n        case 1:\n          message.scope = 1;\n          break;\n\n        case \"PRIVATE\":\n        case 2:\n          message.scope = 2;\n          break;\n      }\n\n      if (object.maxAgeNs != null) if ($util.Long) (message.maxAgeNs = $util.Long.fromValue(object.maxAgeNs)).unsigned = false;else if (typeof object.maxAgeNs === \"string\") message.maxAgeNs = parseInt(object.maxAgeNs, 10);else if (typeof object.maxAgeNs === \"number\") message.maxAgeNs = object.maxAgeNs;else if (typeof object.maxAgeNs === \"object\") message.maxAgeNs = new $util.LongBits(object.maxAgeNs.low >>> 0, object.maxAgeNs.high >>> 0).toNumber();\n      return message;\n    };\n    /**\n     * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.CachePolicy} message CachePolicy\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    CachePolicy.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.maxAgeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.maxAgeNs = options.longs === String ? \"0\" : 0;\n      }\n\n      if (message.scope != null && message.hasOwnProperty(\"scope\")) object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n      if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\")) if (typeof message.maxAgeNs === \"number\") object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;else object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n      return object;\n    };\n    /**\n     * Converts this CachePolicy to JSON.\n     * @function toJSON\n     * @memberof Trace.CachePolicy\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    CachePolicy.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    /**\n     * Scope enum.\n     * @name Trace.CachePolicy.Scope\n     * @enum {string}\n     * @property {number} UNKNOWN=0 UNKNOWN value\n     * @property {number} PUBLIC=1 PUBLIC value\n     * @property {number} PRIVATE=2 PRIVATE value\n     */\n\n\n    CachePolicy.Scope = function () {\n      var valuesById = {},\n          values = Object.create(valuesById);\n      values[valuesById[0] = \"UNKNOWN\"] = 0;\n      values[valuesById[1] = \"PUBLIC\"] = 1;\n      values[valuesById[2] = \"PRIVATE\"] = 2;\n      return values;\n    }();\n\n    return CachePolicy;\n  }();\n\n  Trace.Details = function () {\n    /**\n     * Properties of a Details.\n     * @memberof Trace\n     * @interface IDetails\n     * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n     * @property {Object.<string,Uint8Array>|null} [variables] Details variables\n     * @property {string|null} [rawQuery] Details rawQuery\n     * @property {string|null} [operationName] Details operationName\n     */\n\n    /**\n     * Constructs a new Details.\n     * @memberof Trace\n     * @classdesc Represents a Details.\n     * @implements IDetails\n     * @constructor\n     * @param {Trace.IDetails=} [properties] Properties to set\n     */\n    function Details(properties) {\n      this.variablesJson = {};\n      this.variables = {};\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Details variablesJson.\n     * @member {Object.<string,string>} variablesJson\n     * @memberof Trace.Details\n     * @instance\n     */\n\n\n    Details.prototype.variablesJson = $util.emptyObject;\n    /**\n     * Details variables.\n     * @member {Object.<string,Uint8Array>} variables\n     * @memberof Trace.Details\n     * @instance\n     */\n\n    Details.prototype.variables = $util.emptyObject;\n    /**\n     * Details rawQuery.\n     * @member {string} rawQuery\n     * @memberof Trace.Details\n     * @instance\n     */\n\n    Details.prototype.rawQuery = \"\";\n    /**\n     * Details operationName.\n     * @member {string} operationName\n     * @memberof Trace.Details\n     * @instance\n     */\n\n    Details.prototype.operationName = \"\";\n    /**\n     * Creates a new Details instance using the specified properties.\n     * @function create\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.IDetails=} [properties] Properties to set\n     * @returns {Trace.Details} Details instance\n     */\n\n    Details.create = function create(properties) {\n      return new Details(properties);\n    };\n    /**\n     * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.IDetails} message Details message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Details.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\")) for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]).uint32(\n      /* id 2, wireType 2 =*/\n      18).bytes(message.variables[keys[i]]).ldelim();\n      if (message.rawQuery != null && Object.hasOwnProperty.call(message, \"rawQuery\")) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.rawQuery);\n      if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\")) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.operationName);\n      if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\")) for (var keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i) writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]).uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.variablesJson[keys[i]]).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.IDetails} message Details message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Details.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Details message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Details\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Details} Details\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Details.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.Details(),\n          key;\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 4:\n            reader.skip().pos++;\n            if (message.variablesJson === $util.emptyObject) message.variablesJson = {};\n            key = reader.string();\n            reader.pos++;\n            message.variablesJson[key] = reader.string();\n            break;\n\n          case 1:\n            reader.skip().pos++;\n            if (message.variables === $util.emptyObject) message.variables = {};\n            key = reader.string();\n            reader.pos++;\n            message.variables[key] = reader.bytes();\n            break;\n\n          case 2:\n            message.rawQuery = reader.string();\n            break;\n\n          case 3:\n            message.operationName = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Details message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Details\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Details} Details\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Details.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Details message.\n     * @function verify\n     * @memberof Trace.Details\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Details.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n      if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n        if (!$util.isObject(message.variablesJson)) return \"variablesJson: object expected\";\n        var key = Object.keys(message.variablesJson);\n\n        for (var i = 0; i < key.length; ++i) if (!$util.isString(message.variablesJson[key[i]])) return \"variablesJson: string{k:string} expected\";\n      }\n\n      if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n        if (!$util.isObject(message.variables)) return \"variables: object expected\";\n        var key = Object.keys(message.variables);\n\n        for (var i = 0; i < key.length; ++i) if (!(message.variables[key[i]] && typeof message.variables[key[i]].length === \"number\" || $util.isString(message.variables[key[i]]))) return \"variables: buffer{k:string} expected\";\n      }\n\n      if (message.rawQuery != null && message.hasOwnProperty(\"rawQuery\")) if (!$util.isString(message.rawQuery)) return \"rawQuery: string expected\";\n      if (message.operationName != null && message.hasOwnProperty(\"operationName\")) if (!$util.isString(message.operationName)) return \"operationName: string expected\";\n      return null;\n    };\n    /**\n     * Creates a Details message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.Details\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.Details} Details\n     */\n\n\n    Details.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.Details) return object;\n      var message = new $root.Trace.Details();\n\n      if (object.variablesJson) {\n        if (typeof object.variablesJson !== \"object\") throw TypeError(\".Trace.Details.variablesJson: object expected\");\n        message.variablesJson = {};\n\n        for (var keys = Object.keys(object.variablesJson), i = 0; i < keys.length; ++i) message.variablesJson[keys[i]] = String(object.variablesJson[keys[i]]);\n      }\n\n      if (object.variables) {\n        if (typeof object.variables !== \"object\") throw TypeError(\".Trace.Details.variables: object expected\");\n        message.variables = {};\n\n        for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i) if (typeof object.variables[keys[i]] === \"string\") $util.base64.decode(object.variables[keys[i]], message.variables[keys[i]] = $util.newBuffer($util.base64.length(object.variables[keys[i]])), 0);else if (object.variables[keys[i]].length) message.variables[keys[i]] = object.variables[keys[i]];\n      }\n\n      if (object.rawQuery != null) message.rawQuery = String(object.rawQuery);\n      if (object.operationName != null) message.operationName = String(object.operationName);\n      return message;\n    };\n    /**\n     * Creates a plain object from a Details message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.Details} message Details\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Details.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.objects || options.defaults) {\n        object.variables = {};\n        object.variablesJson = {};\n      }\n\n      if (options.defaults) {\n        object.rawQuery = \"\";\n        object.operationName = \"\";\n      }\n\n      var keys2;\n\n      if (message.variables && (keys2 = Object.keys(message.variables)).length) {\n        object.variables = {};\n\n        for (var j = 0; j < keys2.length; ++j) object.variables[keys2[j]] = options.bytes === String ? $util.base64.encode(message.variables[keys2[j]], 0, message.variables[keys2[j]].length) : options.bytes === Array ? Array.prototype.slice.call(message.variables[keys2[j]]) : message.variables[keys2[j]];\n      }\n\n      if (message.rawQuery != null && message.hasOwnProperty(\"rawQuery\")) object.rawQuery = message.rawQuery;\n      if (message.operationName != null && message.hasOwnProperty(\"operationName\")) object.operationName = message.operationName;\n\n      if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n        object.variablesJson = {};\n\n        for (var j = 0; j < keys2.length; ++j) object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n      }\n\n      return object;\n    };\n    /**\n     * Converts this Details to JSON.\n     * @function toJSON\n     * @memberof Trace.Details\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Details.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Details;\n  }();\n\n  Trace.Error = function () {\n    /**\n     * Properties of an Error.\n     * @memberof Trace\n     * @interface IError\n     * @property {string|null} [message] Error message\n     * @property {Array.<Trace.ILocation>|null} [location] Error location\n     * @property {number|null} [timeNs] Error timeNs\n     * @property {string|null} [json] Error json\n     */\n\n    /**\n     * Constructs a new Error.\n     * @memberof Trace\n     * @classdesc Represents an Error.\n     * @implements IError\n     * @constructor\n     * @param {Trace.IError=} [properties] Properties to set\n     */\n    function Error(properties) {\n      this.location = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Error message.\n     * @member {string} message\n     * @memberof Trace.Error\n     * @instance\n     */\n\n\n    Error.prototype.message = \"\";\n    /**\n     * Error location.\n     * @member {Array.<Trace.ILocation>} location\n     * @memberof Trace.Error\n     * @instance\n     */\n\n    Error.prototype.location = $util.emptyArray;\n    /**\n     * Error timeNs.\n     * @member {number} timeNs\n     * @memberof Trace.Error\n     * @instance\n     */\n\n    Error.prototype.timeNs = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n    /**\n     * Error json.\n     * @member {string} json\n     * @memberof Trace.Error\n     * @instance\n     */\n\n    Error.prototype.json = \"\";\n    /**\n     * Creates a new Error instance using the specified properties.\n     * @function create\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.IError=} [properties] Properties to set\n     * @returns {Trace.Error} Error instance\n     */\n\n    Error.create = function create(properties) {\n      return new Error(properties);\n    };\n    /**\n     * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Error.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.message != null && Object.hasOwnProperty.call(message, \"message\")) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.message);\n      if (message.location != null && message.location.length) for (var i = 0; i < message.location.length; ++i) $root.Trace.Location.encode(message.location[i], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\")) writer.uint32(\n      /* id 3, wireType 0 =*/\n      24).uint64(message.timeNs);\n      if (message.json != null && Object.hasOwnProperty.call(message, \"json\")) writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).string(message.json);\n      return writer;\n    };\n    /**\n     * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Error.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes an Error message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Error.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.Error();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.message = reader.string();\n            break;\n\n          case 2:\n            if (!(message.location && message.location.length)) message.location = [];\n            message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n            break;\n\n          case 3:\n            message.timeNs = reader.uint64();\n            break;\n\n          case 4:\n            message.json = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes an Error message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Error.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies an Error message.\n     * @function verify\n     * @memberof Trace.Error\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Error.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.message != null && message.hasOwnProperty(\"message\")) if (!$util.isString(message.message)) return \"message: string expected\";\n\n      if (message.location != null && message.hasOwnProperty(\"location\")) {\n        if (!Array.isArray(message.location)) return \"location: array expected\";\n\n        for (var i = 0; i < message.location.length; ++i) {\n          var error = $root.Trace.Location.verify(message.location[i]);\n          if (error) return \"location.\" + error;\n        }\n      }\n\n      if (message.timeNs != null && message.hasOwnProperty(\"timeNs\")) if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high))) return \"timeNs: integer|Long expected\";\n      if (message.json != null && message.hasOwnProperty(\"json\")) if (!$util.isString(message.json)) return \"json: string expected\";\n      return null;\n    };\n    /**\n     * Creates an Error message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.Error\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.Error} Error\n     */\n\n\n    Error.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.Error) return object;\n      var message = new $root.Trace.Error();\n      if (object.message != null) message.message = String(object.message);\n\n      if (object.location) {\n        if (!Array.isArray(object.location)) throw TypeError(\".Trace.Error.location: array expected\");\n        message.location = [];\n\n        for (var i = 0; i < object.location.length; ++i) {\n          if (typeof object.location[i] !== \"object\") throw TypeError(\".Trace.Error.location: object expected\");\n          message.location[i] = $root.Trace.Location.fromObject(object.location[i]);\n        }\n      }\n\n      if (object.timeNs != null) if ($util.Long) (message.timeNs = $util.Long.fromValue(object.timeNs)).unsigned = true;else if (typeof object.timeNs === \"string\") message.timeNs = parseInt(object.timeNs, 10);else if (typeof object.timeNs === \"number\") message.timeNs = object.timeNs;else if (typeof object.timeNs === \"object\") message.timeNs = new $util.LongBits(object.timeNs.low >>> 0, object.timeNs.high >>> 0).toNumber(true);\n      if (object.json != null) message.json = String(object.json);\n      return message;\n    };\n    /**\n     * Creates a plain object from an Error message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.Error} message Error\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Error.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.location = [];\n\n      if (options.defaults) {\n        object.message = \"\";\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, true);\n          object.timeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.timeNs = options.longs === String ? \"0\" : 0;\n\n        object.json = \"\";\n      }\n\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n\n      if (message.location && message.location.length) {\n        object.location = [];\n\n        for (var j = 0; j < message.location.length; ++j) object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n      }\n\n      if (message.timeNs != null && message.hasOwnProperty(\"timeNs\")) if (typeof message.timeNs === \"number\") object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;else object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n      if (message.json != null && message.hasOwnProperty(\"json\")) object.json = message.json;\n      return object;\n    };\n    /**\n     * Converts this Error to JSON.\n     * @function toJSON\n     * @memberof Trace.Error\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Error.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Error;\n  }();\n\n  Trace.HTTP = function () {\n    /**\n     * Properties of a HTTP.\n     * @memberof Trace\n     * @interface IHTTP\n     * @property {Trace.HTTP.Method|null} [method] HTTP method\n     * @property {string|null} [host] HTTP host\n     * @property {string|null} [path] HTTP path\n     * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n     * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n     * @property {number|null} [statusCode] HTTP statusCode\n     * @property {boolean|null} [secure] HTTP secure\n     * @property {string|null} [protocol] HTTP protocol\n     */\n\n    /**\n     * Constructs a new HTTP.\n     * @memberof Trace\n     * @classdesc Represents a HTTP.\n     * @implements IHTTP\n     * @constructor\n     * @param {Trace.IHTTP=} [properties] Properties to set\n     */\n    function HTTP(properties) {\n      this.requestHeaders = {};\n      this.responseHeaders = {};\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * HTTP method.\n     * @member {Trace.HTTP.Method} method\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n\n    HTTP.prototype.method = 0;\n    /**\n     * HTTP host.\n     * @member {string} host\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.host = \"\";\n    /**\n     * HTTP path.\n     * @member {string} path\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.path = \"\";\n    /**\n     * HTTP requestHeaders.\n     * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.requestHeaders = $util.emptyObject;\n    /**\n     * HTTP responseHeaders.\n     * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.responseHeaders = $util.emptyObject;\n    /**\n     * HTTP statusCode.\n     * @member {number} statusCode\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.statusCode = 0;\n    /**\n     * HTTP secure.\n     * @member {boolean} secure\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.secure = false;\n    /**\n     * HTTP protocol.\n     * @member {string} protocol\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.protocol = \"\";\n    /**\n     * Creates a new HTTP instance using the specified properties.\n     * @function create\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.IHTTP=} [properties] Properties to set\n     * @returns {Trace.HTTP} HTTP instance\n     */\n\n    HTTP.create = function create(properties) {\n      return new HTTP(properties);\n    };\n    /**\n     * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.IHTTP} message HTTP message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    HTTP.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.method != null && Object.hasOwnProperty.call(message, \"method\")) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).int32(message.method);\n      if (message.host != null && Object.hasOwnProperty.call(message, \"host\")) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.host);\n      if (message.path != null && Object.hasOwnProperty.call(message, \"path\")) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.path);\n      if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\")) for (var keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n        writer.uint32(\n        /* id 4, wireType 2 =*/\n        34).fork().uint32(\n        /* id 1, wireType 2 =*/\n        10).string(keys[i]);\n        $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).fork()).ldelim().ldelim();\n      }\n      if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\")) for (var keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n        writer.uint32(\n        /* id 5, wireType 2 =*/\n        42).fork().uint32(\n        /* id 1, wireType 2 =*/\n        10).string(keys[i]);\n        $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).fork()).ldelim().ldelim();\n      }\n      if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\")) writer.uint32(\n      /* id 6, wireType 0 =*/\n      48).uint32(message.statusCode);\n      if (message.secure != null && Object.hasOwnProperty.call(message, \"secure\")) writer.uint32(\n      /* id 8, wireType 0 =*/\n      64).bool(message.secure);\n      if (message.protocol != null && Object.hasOwnProperty.call(message, \"protocol\")) writer.uint32(\n      /* id 9, wireType 2 =*/\n      74).string(message.protocol);\n      return writer;\n    };\n    /**\n     * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.IHTTP} message HTTP message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a HTTP message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.HTTP\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.HTTP} HTTP\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    HTTP.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.HTTP(),\n          key;\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.method = reader.int32();\n            break;\n\n          case 2:\n            message.host = reader.string();\n            break;\n\n          case 3:\n            message.path = reader.string();\n            break;\n\n          case 4:\n            reader.skip().pos++;\n            if (message.requestHeaders === $util.emptyObject) message.requestHeaders = {};\n            key = reader.string();\n            reader.pos++;\n            message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n            break;\n\n          case 5:\n            reader.skip().pos++;\n            if (message.responseHeaders === $util.emptyObject) message.responseHeaders = {};\n            key = reader.string();\n            reader.pos++;\n            message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n            break;\n\n          case 6:\n            message.statusCode = reader.uint32();\n            break;\n\n          case 8:\n            message.secure = reader.bool();\n            break;\n\n          case 9:\n            message.protocol = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a HTTP message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.HTTP\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.HTTP} HTTP\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    HTTP.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a HTTP message.\n     * @function verify\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    HTTP.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.method != null && message.hasOwnProperty(\"method\")) switch (message.method) {\n        default:\n          return \"method: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n          break;\n      }\n      if (message.host != null && message.hasOwnProperty(\"host\")) if (!$util.isString(message.host)) return \"host: string expected\";\n      if (message.path != null && message.hasOwnProperty(\"path\")) if (!$util.isString(message.path)) return \"path: string expected\";\n\n      if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n        if (!$util.isObject(message.requestHeaders)) return \"requestHeaders: object expected\";\n        var key = Object.keys(message.requestHeaders);\n\n        for (var i = 0; i < key.length; ++i) {\n          var error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n          if (error) return \"requestHeaders.\" + error;\n        }\n      }\n\n      if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n        if (!$util.isObject(message.responseHeaders)) return \"responseHeaders: object expected\";\n        var key = Object.keys(message.responseHeaders);\n\n        for (var i = 0; i < key.length; ++i) {\n          var error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n          if (error) return \"responseHeaders.\" + error;\n        }\n      }\n\n      if (message.statusCode != null && message.hasOwnProperty(\"statusCode\")) if (!$util.isInteger(message.statusCode)) return \"statusCode: integer expected\";\n      if (message.secure != null && message.hasOwnProperty(\"secure\")) if (typeof message.secure !== \"boolean\") return \"secure: boolean expected\";\n      if (message.protocol != null && message.hasOwnProperty(\"protocol\")) if (!$util.isString(message.protocol)) return \"protocol: string expected\";\n      return null;\n    };\n    /**\n     * Creates a HTTP message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.HTTP} HTTP\n     */\n\n\n    HTTP.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.HTTP) return object;\n      var message = new $root.Trace.HTTP();\n\n      switch (object.method) {\n        case \"UNKNOWN\":\n        case 0:\n          message.method = 0;\n          break;\n\n        case \"OPTIONS\":\n        case 1:\n          message.method = 1;\n          break;\n\n        case \"GET\":\n        case 2:\n          message.method = 2;\n          break;\n\n        case \"HEAD\":\n        case 3:\n          message.method = 3;\n          break;\n\n        case \"POST\":\n        case 4:\n          message.method = 4;\n          break;\n\n        case \"PUT\":\n        case 5:\n          message.method = 5;\n          break;\n\n        case \"DELETE\":\n        case 6:\n          message.method = 6;\n          break;\n\n        case \"TRACE\":\n        case 7:\n          message.method = 7;\n          break;\n\n        case \"CONNECT\":\n        case 8:\n          message.method = 8;\n          break;\n\n        case \"PATCH\":\n        case 9:\n          message.method = 9;\n          break;\n      }\n\n      if (object.host != null) message.host = String(object.host);\n      if (object.path != null) message.path = String(object.path);\n\n      if (object.requestHeaders) {\n        if (typeof object.requestHeaders !== \"object\") throw TypeError(\".Trace.HTTP.requestHeaders: object expected\");\n        message.requestHeaders = {};\n\n        for (var keys = Object.keys(object.requestHeaders), i = 0; i < keys.length; ++i) {\n          if (typeof object.requestHeaders[keys[i]] !== \"object\") throw TypeError(\".Trace.HTTP.requestHeaders: object expected\");\n          message.requestHeaders[keys[i]] = $root.Trace.HTTP.Values.fromObject(object.requestHeaders[keys[i]]);\n        }\n      }\n\n      if (object.responseHeaders) {\n        if (typeof object.responseHeaders !== \"object\") throw TypeError(\".Trace.HTTP.responseHeaders: object expected\");\n        message.responseHeaders = {};\n\n        for (var keys = Object.keys(object.responseHeaders), i = 0; i < keys.length; ++i) {\n          if (typeof object.responseHeaders[keys[i]] !== \"object\") throw TypeError(\".Trace.HTTP.responseHeaders: object expected\");\n          message.responseHeaders[keys[i]] = $root.Trace.HTTP.Values.fromObject(object.responseHeaders[keys[i]]);\n        }\n      }\n\n      if (object.statusCode != null) message.statusCode = object.statusCode >>> 0;\n      if (object.secure != null) message.secure = Boolean(object.secure);\n      if (object.protocol != null) message.protocol = String(object.protocol);\n      return message;\n    };\n    /**\n     * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.HTTP} message HTTP\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    HTTP.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.objects || options.defaults) {\n        object.requestHeaders = {};\n        object.responseHeaders = {};\n      }\n\n      if (options.defaults) {\n        object.method = options.enums === String ? \"UNKNOWN\" : 0;\n        object.host = \"\";\n        object.path = \"\";\n        object.statusCode = 0;\n        object.secure = false;\n        object.protocol = \"\";\n      }\n\n      if (message.method != null && message.hasOwnProperty(\"method\")) object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n      if (message.host != null && message.hasOwnProperty(\"host\")) object.host = message.host;\n      if (message.path != null && message.hasOwnProperty(\"path\")) object.path = message.path;\n      var keys2;\n\n      if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n        object.requestHeaders = {};\n\n        for (var j = 0; j < keys2.length; ++j) object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n      }\n\n      if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n        object.responseHeaders = {};\n\n        for (var j = 0; j < keys2.length; ++j) object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n      }\n\n      if (message.statusCode != null && message.hasOwnProperty(\"statusCode\")) object.statusCode = message.statusCode;\n      if (message.secure != null && message.hasOwnProperty(\"secure\")) object.secure = message.secure;\n      if (message.protocol != null && message.hasOwnProperty(\"protocol\")) object.protocol = message.protocol;\n      return object;\n    };\n    /**\n     * Converts this HTTP to JSON.\n     * @function toJSON\n     * @memberof Trace.HTTP\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    HTTP.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    HTTP.Values = function () {\n      /**\n       * Properties of a Values.\n       * @memberof Trace.HTTP\n       * @interface IValues\n       * @property {Array.<string>|null} [value] Values value\n       */\n\n      /**\n       * Constructs a new Values.\n       * @memberof Trace.HTTP\n       * @classdesc Represents a Values.\n       * @implements IValues\n       * @constructor\n       * @param {Trace.HTTP.IValues=} [properties] Properties to set\n       */\n      function Values(properties) {\n        this.value = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Values value.\n       * @member {Array.<string>} value\n       * @memberof Trace.HTTP.Values\n       * @instance\n       */\n\n\n      Values.prototype.value = $util.emptyArray;\n      /**\n       * Creates a new Values instance using the specified properties.\n       * @function create\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.IValues=} [properties] Properties to set\n       * @returns {Trace.HTTP.Values} Values instance\n       */\n\n      Values.create = function create(properties) {\n        return new Values(properties);\n      };\n      /**\n       * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Values.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.value != null && message.value.length) for (var i = 0; i < message.value.length; ++i) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).string(message.value[i]);\n        return writer;\n      };\n      /**\n       * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Values.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Values message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.HTTP.Values} Values\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Values.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.HTTP.Values();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.value && message.value.length)) message.value = [];\n              message.value.push(reader.string());\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Values message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.HTTP.Values} Values\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Values.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Values message.\n       * @function verify\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Values.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.value != null && message.hasOwnProperty(\"value\")) {\n          if (!Array.isArray(message.value)) return \"value: array expected\";\n\n          for (var i = 0; i < message.value.length; ++i) if (!$util.isString(message.value[i])) return \"value: string[] expected\";\n        }\n\n        return null;\n      };\n      /**\n       * Creates a Values message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.HTTP.Values} Values\n       */\n\n\n      Values.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.HTTP.Values) return object;\n        var message = new $root.Trace.HTTP.Values();\n\n        if (object.value) {\n          if (!Array.isArray(object.value)) throw TypeError(\".Trace.HTTP.Values.value: array expected\");\n          message.value = [];\n\n          for (var i = 0; i < object.value.length; ++i) message.value[i] = String(object.value[i]);\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a Values message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.Values} message Values\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Values.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.value = [];\n\n        if (message.value && message.value.length) {\n          object.value = [];\n\n          for (var j = 0; j < message.value.length; ++j) object.value[j] = message.value[j];\n        }\n\n        return object;\n      };\n      /**\n       * Converts this Values to JSON.\n       * @function toJSON\n       * @memberof Trace.HTTP.Values\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Values.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Values;\n    }();\n    /**\n     * Method enum.\n     * @name Trace.HTTP.Method\n     * @enum {string}\n     * @property {number} UNKNOWN=0 UNKNOWN value\n     * @property {number} OPTIONS=1 OPTIONS value\n     * @property {number} GET=2 GET value\n     * @property {number} HEAD=3 HEAD value\n     * @property {number} POST=4 POST value\n     * @property {number} PUT=5 PUT value\n     * @property {number} DELETE=6 DELETE value\n     * @property {number} TRACE=7 TRACE value\n     * @property {number} CONNECT=8 CONNECT value\n     * @property {number} PATCH=9 PATCH value\n     */\n\n\n    HTTP.Method = function () {\n      var valuesById = {},\n          values = Object.create(valuesById);\n      values[valuesById[0] = \"UNKNOWN\"] = 0;\n      values[valuesById[1] = \"OPTIONS\"] = 1;\n      values[valuesById[2] = \"GET\"] = 2;\n      values[valuesById[3] = \"HEAD\"] = 3;\n      values[valuesById[4] = \"POST\"] = 4;\n      values[valuesById[5] = \"PUT\"] = 5;\n      values[valuesById[6] = \"DELETE\"] = 6;\n      values[valuesById[7] = \"TRACE\"] = 7;\n      values[valuesById[8] = \"CONNECT\"] = 8;\n      values[valuesById[9] = \"PATCH\"] = 9;\n      return values;\n    }();\n\n    return HTTP;\n  }();\n\n  Trace.Location = function () {\n    /**\n     * Properties of a Location.\n     * @memberof Trace\n     * @interface ILocation\n     * @property {number|null} [line] Location line\n     * @property {number|null} [column] Location column\n     */\n\n    /**\n     * Constructs a new Location.\n     * @memberof Trace\n     * @classdesc Represents a Location.\n     * @implements ILocation\n     * @constructor\n     * @param {Trace.ILocation=} [properties] Properties to set\n     */\n    function Location(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Location line.\n     * @member {number} line\n     * @memberof Trace.Location\n     * @instance\n     */\n\n\n    Location.prototype.line = 0;\n    /**\n     * Location column.\n     * @member {number} column\n     * @memberof Trace.Location\n     * @instance\n     */\n\n    Location.prototype.column = 0;\n    /**\n     * Creates a new Location instance using the specified properties.\n     * @function create\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.ILocation=} [properties] Properties to set\n     * @returns {Trace.Location} Location instance\n     */\n\n    Location.create = function create(properties) {\n      return new Location(properties);\n    };\n    /**\n     * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.ILocation} message Location message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Location.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.line != null && Object.hasOwnProperty.call(message, \"line\")) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).uint32(message.line);\n      if (message.column != null && Object.hasOwnProperty.call(message, \"column\")) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).uint32(message.column);\n      return writer;\n    };\n    /**\n     * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.ILocation} message Location message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Location.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Location message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Location\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Location} Location\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Location.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.Location();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.line = reader.uint32();\n            break;\n\n          case 2:\n            message.column = reader.uint32();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Location message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Location\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Location} Location\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Location.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Location message.\n     * @function verify\n     * @memberof Trace.Location\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Location.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.line != null && message.hasOwnProperty(\"line\")) if (!$util.isInteger(message.line)) return \"line: integer expected\";\n      if (message.column != null && message.hasOwnProperty(\"column\")) if (!$util.isInteger(message.column)) return \"column: integer expected\";\n      return null;\n    };\n    /**\n     * Creates a Location message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.Location\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.Location} Location\n     */\n\n\n    Location.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.Location) return object;\n      var message = new $root.Trace.Location();\n      if (object.line != null) message.line = object.line >>> 0;\n      if (object.column != null) message.column = object.column >>> 0;\n      return message;\n    };\n    /**\n     * Creates a plain object from a Location message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.Location} message Location\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Location.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.line = 0;\n        object.column = 0;\n      }\n\n      if (message.line != null && message.hasOwnProperty(\"line\")) object.line = message.line;\n      if (message.column != null && message.hasOwnProperty(\"column\")) object.column = message.column;\n      return object;\n    };\n    /**\n     * Converts this Location to JSON.\n     * @function toJSON\n     * @memberof Trace.Location\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Location.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Location;\n  }();\n\n  Trace.Node = function () {\n    /**\n     * Properties of a Node.\n     * @memberof Trace\n     * @interface INode\n     * @property {string|null} [responseName] Node responseName\n     * @property {number|null} [index] Node index\n     * @property {string|null} [originalFieldName] Node originalFieldName\n     * @property {string|null} [type] Node type\n     * @property {string|null} [parentType] Node parentType\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n     * @property {number|null} [startTime] Node startTime\n     * @property {number|null} [endTime] Node endTime\n     * @property {Array.<Trace.IError>|null} [error] Node error\n     * @property {Array.<Trace.INode>|null} [child] Node child\n     */\n\n    /**\n     * Constructs a new Node.\n     * @memberof Trace\n     * @classdesc Represents a Node.\n     * @implements INode\n     * @constructor\n     * @param {Trace.INode=} [properties] Properties to set\n     */\n    function Node(properties) {\n      this.error = [];\n      this.child = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Node responseName.\n     * @member {string} responseName\n     * @memberof Trace.Node\n     * @instance\n     */\n\n\n    Node.prototype.responseName = \"\";\n    /**\n     * Node index.\n     * @member {number} index\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.index = 0;\n    /**\n     * Node originalFieldName.\n     * @member {string} originalFieldName\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.originalFieldName = \"\";\n    /**\n     * Node type.\n     * @member {string} type\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.type = \"\";\n    /**\n     * Node parentType.\n     * @member {string} parentType\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.parentType = \"\";\n    /**\n     * Node cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.cachePolicy = null;\n    /**\n     * Node startTime.\n     * @member {number} startTime\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n    /**\n     * Node endTime.\n     * @member {number} endTime\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.endTime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n    /**\n     * Node error.\n     * @member {Array.<Trace.IError>} error\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.error = $util.emptyArray;\n    /**\n     * Node child.\n     * @member {Array.<Trace.INode>} child\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.child = $util.emptyArray; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * Node id.\n     * @member {\"responseName\"|\"index\"|undefined} id\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Object.defineProperty(Node.prototype, \"id\", {\n      get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Creates a new Node instance using the specified properties.\n     * @function create\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.INode=} [properties] Properties to set\n     * @returns {Trace.Node} Node instance\n     */\n\n    Node.create = function create(properties) {\n      return new Node(properties);\n    };\n    /**\n     * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.INode} message Node message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Node.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\")) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.responseName);\n      if (message.index != null && Object.hasOwnProperty.call(message, \"index\")) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).uint32(message.index);\n      if (message.type != null && Object.hasOwnProperty.call(message, \"type\")) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.type);\n      if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\")) $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).fork()).ldelim();\n      if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\")) writer.uint32(\n      /* id 8, wireType 0 =*/\n      64).uint64(message.startTime);\n      if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\")) writer.uint32(\n      /* id 9, wireType 0 =*/\n      72).uint64(message.endTime);\n      if (message.error != null && message.error.length) for (var i = 0; i < message.error.length; ++i) $root.Trace.Error.encode(message.error[i], writer.uint32(\n      /* id 11, wireType 2 =*/\n      90).fork()).ldelim();\n      if (message.child != null && message.child.length) for (var i = 0; i < message.child.length; ++i) $root.Trace.Node.encode(message.child[i], writer.uint32(\n      /* id 12, wireType 2 =*/\n      98).fork()).ldelim();\n      if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\")) writer.uint32(\n      /* id 13, wireType 2 =*/\n      106).string(message.parentType);\n      if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\")) writer.uint32(\n      /* id 14, wireType 2 =*/\n      114).string(message.originalFieldName);\n      return writer;\n    };\n    /**\n     * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.INode} message Node message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Node.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Node message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Node\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Node} Node\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Node.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.Node();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.responseName = reader.string();\n            break;\n\n          case 2:\n            message.index = reader.uint32();\n            break;\n\n          case 14:\n            message.originalFieldName = reader.string();\n            break;\n\n          case 3:\n            message.type = reader.string();\n            break;\n\n          case 13:\n            message.parentType = reader.string();\n            break;\n\n          case 5:\n            message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n            break;\n\n          case 8:\n            message.startTime = reader.uint64();\n            break;\n\n          case 9:\n            message.endTime = reader.uint64();\n            break;\n\n          case 11:\n            if (!(message.error && message.error.length)) message.error = [];\n            message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n            break;\n\n          case 12:\n            if (!(message.child && message.child.length)) message.child = [];\n            message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Node message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Node\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Node} Node\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Node.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Node message.\n     * @function verify\n     * @memberof Trace.Node\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Node.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n\n      if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n        properties.id = 1;\n        if (!$util.isString(message.responseName)) return \"responseName: string expected\";\n      }\n\n      if (message.index != null && message.hasOwnProperty(\"index\")) {\n        if (properties.id === 1) return \"id: multiple values\";\n        properties.id = 1;\n        if (!$util.isInteger(message.index)) return \"index: integer expected\";\n      }\n\n      if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\")) if (!$util.isString(message.originalFieldName)) return \"originalFieldName: string expected\";\n      if (message.type != null && message.hasOwnProperty(\"type\")) if (!$util.isString(message.type)) return \"type: string expected\";\n      if (message.parentType != null && message.hasOwnProperty(\"parentType\")) if (!$util.isString(message.parentType)) return \"parentType: string expected\";\n\n      if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n        var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n        if (error) return \"cachePolicy.\" + error;\n      }\n\n      if (message.startTime != null && message.hasOwnProperty(\"startTime\")) if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high))) return \"startTime: integer|Long expected\";\n      if (message.endTime != null && message.hasOwnProperty(\"endTime\")) if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high))) return \"endTime: integer|Long expected\";\n\n      if (message.error != null && message.hasOwnProperty(\"error\")) {\n        if (!Array.isArray(message.error)) return \"error: array expected\";\n\n        for (var i = 0; i < message.error.length; ++i) {\n          var error = $root.Trace.Error.verify(message.error[i]);\n          if (error) return \"error.\" + error;\n        }\n      }\n\n      if (message.child != null && message.hasOwnProperty(\"child\")) {\n        if (!Array.isArray(message.child)) return \"child: array expected\";\n\n        for (var i = 0; i < message.child.length; ++i) {\n          var error = $root.Trace.Node.verify(message.child[i]);\n          if (error) return \"child.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a Node message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.Node\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.Node} Node\n     */\n\n\n    Node.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.Node) return object;\n      var message = new $root.Trace.Node();\n      if (object.responseName != null) message.responseName = String(object.responseName);\n      if (object.index != null) message.index = object.index >>> 0;\n      if (object.originalFieldName != null) message.originalFieldName = String(object.originalFieldName);\n      if (object.type != null) message.type = String(object.type);\n      if (object.parentType != null) message.parentType = String(object.parentType);\n\n      if (object.cachePolicy != null) {\n        if (typeof object.cachePolicy !== \"object\") throw TypeError(\".Trace.Node.cachePolicy: object expected\");\n        message.cachePolicy = $root.Trace.CachePolicy.fromObject(object.cachePolicy);\n      }\n\n      if (object.startTime != null) if ($util.Long) (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = true;else if (typeof object.startTime === \"string\") message.startTime = parseInt(object.startTime, 10);else if (typeof object.startTime === \"number\") message.startTime = object.startTime;else if (typeof object.startTime === \"object\") message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber(true);\n      if (object.endTime != null) if ($util.Long) (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = true;else if (typeof object.endTime === \"string\") message.endTime = parseInt(object.endTime, 10);else if (typeof object.endTime === \"number\") message.endTime = object.endTime;else if (typeof object.endTime === \"object\") message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber(true);\n\n      if (object.error) {\n        if (!Array.isArray(object.error)) throw TypeError(\".Trace.Node.error: array expected\");\n        message.error = [];\n\n        for (var i = 0; i < object.error.length; ++i) {\n          if (typeof object.error[i] !== \"object\") throw TypeError(\".Trace.Node.error: object expected\");\n          message.error[i] = $root.Trace.Error.fromObject(object.error[i]);\n        }\n      }\n\n      if (object.child) {\n        if (!Array.isArray(object.child)) throw TypeError(\".Trace.Node.child: array expected\");\n        message.child = [];\n\n        for (var i = 0; i < object.child.length; ++i) {\n          if (typeof object.child[i] !== \"object\") throw TypeError(\".Trace.Node.child: object expected\");\n          message.child[i] = $root.Trace.Node.fromObject(object.child[i]);\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a Node message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.Node} message Node\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Node.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.arrays || options.defaults) {\n        object.error = [];\n        object.child = [];\n      }\n\n      if (options.defaults) {\n        object.type = \"\";\n        object.cachePolicy = null;\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, true);\n          object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.startTime = options.longs === String ? \"0\" : 0;\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, true);\n          object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.endTime = options.longs === String ? \"0\" : 0;\n\n        object.parentType = \"\";\n        object.originalFieldName = \"\";\n      }\n\n      if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n        object.responseName = message.responseName;\n        if (options.oneofs) object.id = \"responseName\";\n      }\n\n      if (message.index != null && message.hasOwnProperty(\"index\")) {\n        object.index = message.index;\n        if (options.oneofs) object.id = \"index\";\n      }\n\n      if (message.type != null && message.hasOwnProperty(\"type\")) object.type = message.type;\n      if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n      if (message.startTime != null && message.hasOwnProperty(\"startTime\")) if (typeof message.startTime === \"number\") object.startTime = options.longs === String ? String(message.startTime) : message.startTime;else object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n      if (message.endTime != null && message.hasOwnProperty(\"endTime\")) if (typeof message.endTime === \"number\") object.endTime = options.longs === String ? String(message.endTime) : message.endTime;else object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n\n      if (message.error && message.error.length) {\n        object.error = [];\n\n        for (var j = 0; j < message.error.length; ++j) object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n      }\n\n      if (message.child && message.child.length) {\n        object.child = [];\n\n        for (var j = 0; j < message.child.length; ++j) object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n      }\n\n      if (message.parentType != null && message.hasOwnProperty(\"parentType\")) object.parentType = message.parentType;\n      if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\")) object.originalFieldName = message.originalFieldName;\n      return object;\n    };\n    /**\n     * Converts this Node to JSON.\n     * @function toJSON\n     * @memberof Trace.Node\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Node.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Node;\n  }();\n\n  Trace.QueryPlanNode = function () {\n    /**\n     * Properties of a QueryPlanNode.\n     * @memberof Trace\n     * @interface IQueryPlanNode\n     * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n     * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n     * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n     * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n     */\n\n    /**\n     * Constructs a new QueryPlanNode.\n     * @memberof Trace\n     * @classdesc Represents a QueryPlanNode.\n     * @implements IQueryPlanNode\n     * @constructor\n     * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n     */\n    function QueryPlanNode(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * QueryPlanNode sequence.\n     * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n\n    QueryPlanNode.prototype.sequence = null;\n    /**\n     * QueryPlanNode parallel.\n     * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n    QueryPlanNode.prototype.parallel = null;\n    /**\n     * QueryPlanNode fetch.\n     * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n    QueryPlanNode.prototype.fetch = null;\n    /**\n     * QueryPlanNode flatten.\n     * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n    QueryPlanNode.prototype.flatten = null; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * QueryPlanNode node.\n     * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|undefined} node\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n    Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n      get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Creates a new QueryPlanNode instance using the specified properties.\n     * @function create\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n     * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n     */\n\n    QueryPlanNode.create = function create(properties) {\n      return new QueryPlanNode(properties);\n    };\n    /**\n     * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    QueryPlanNode.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\")) $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork()).ldelim();\n      if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\")) $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\")) $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork()).ldelim();\n      if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\")) $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a QueryPlanNode message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.QueryPlanNode} QueryPlanNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    QueryPlanNode.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.QueryPlanNode();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n            break;\n\n          case 2:\n            message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n            break;\n\n          case 3:\n            message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n            break;\n\n          case 4:\n            message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.QueryPlanNode} QueryPlanNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a QueryPlanNode message.\n     * @function verify\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    QueryPlanNode.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n\n      if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n          if (error) return \"sequence.\" + error;\n        }\n      }\n\n      if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n        if (properties.node === 1) return \"node: multiple values\";\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n          if (error) return \"parallel.\" + error;\n        }\n      }\n\n      if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n        if (properties.node === 1) return \"node: multiple values\";\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n          if (error) return \"fetch.\" + error;\n        }\n      }\n\n      if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n        if (properties.node === 1) return \"node: multiple values\";\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n          if (error) return \"flatten.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a QueryPlanNode message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.QueryPlanNode} QueryPlanNode\n     */\n\n\n    QueryPlanNode.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.QueryPlanNode) return object;\n      var message = new $root.Trace.QueryPlanNode();\n\n      if (object.sequence != null) {\n        if (typeof object.sequence !== \"object\") throw TypeError(\".Trace.QueryPlanNode.sequence: object expected\");\n        message.sequence = $root.Trace.QueryPlanNode.SequenceNode.fromObject(object.sequence);\n      }\n\n      if (object.parallel != null) {\n        if (typeof object.parallel !== \"object\") throw TypeError(\".Trace.QueryPlanNode.parallel: object expected\");\n        message.parallel = $root.Trace.QueryPlanNode.ParallelNode.fromObject(object.parallel);\n      }\n\n      if (object.fetch != null) {\n        if (typeof object.fetch !== \"object\") throw TypeError(\".Trace.QueryPlanNode.fetch: object expected\");\n        message.fetch = $root.Trace.QueryPlanNode.FetchNode.fromObject(object.fetch);\n      }\n\n      if (object.flatten != null) {\n        if (typeof object.flatten !== \"object\") throw TypeError(\".Trace.QueryPlanNode.flatten: object expected\");\n        message.flatten = $root.Trace.QueryPlanNode.FlattenNode.fromObject(object.flatten);\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.QueryPlanNode} message QueryPlanNode\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    QueryPlanNode.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n        object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n        if (options.oneofs) object.node = \"sequence\";\n      }\n\n      if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n        object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n        if (options.oneofs) object.node = \"parallel\";\n      }\n\n      if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n        object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n        if (options.oneofs) object.node = \"fetch\";\n      }\n\n      if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n        object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n        if (options.oneofs) object.node = \"flatten\";\n      }\n\n      return object;\n    };\n    /**\n     * Converts this QueryPlanNode to JSON.\n     * @function toJSON\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    QueryPlanNode.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    QueryPlanNode.SequenceNode = function () {\n      /**\n       * Properties of a SequenceNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface ISequenceNode\n       * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n       */\n\n      /**\n       * Constructs a new SequenceNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a SequenceNode.\n       * @implements ISequenceNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n       */\n      function SequenceNode(properties) {\n        this.nodes = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * SequenceNode nodes.\n       * @member {Array.<Trace.IQueryPlanNode>} nodes\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @instance\n       */\n\n\n      SequenceNode.prototype.nodes = $util.emptyArray;\n      /**\n       * Creates a new SequenceNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n       */\n\n      SequenceNode.create = function create(properties) {\n        return new SequenceNode(properties);\n      };\n      /**\n       * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      SequenceNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.nodes != null && message.nodes.length) for (var i = 0; i < message.nodes.length; ++i) $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a SequenceNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      SequenceNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.SequenceNode();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.nodes && message.nodes.length)) message.nodes = [];\n              message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a SequenceNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      SequenceNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n          if (!Array.isArray(message.nodes)) return \"nodes: array expected\";\n\n          for (var i = 0; i < message.nodes.length; ++i) {\n            var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n            if (error) return \"nodes.\" + error;\n          }\n        }\n\n        return null;\n      };\n      /**\n       * Creates a SequenceNode message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n       */\n\n\n      SequenceNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.SequenceNode) return object;\n        var message = new $root.Trace.QueryPlanNode.SequenceNode();\n\n        if (object.nodes) {\n          if (!Array.isArray(object.nodes)) throw TypeError(\".Trace.QueryPlanNode.SequenceNode.nodes: array expected\");\n          message.nodes = [];\n\n          for (var i = 0; i < object.nodes.length; ++i) {\n            if (typeof object.nodes[i] !== \"object\") throw TypeError(\".Trace.QueryPlanNode.SequenceNode.nodes: object expected\");\n            message.nodes[i] = $root.Trace.QueryPlanNode.fromObject(object.nodes[i]);\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      SequenceNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.nodes = [];\n\n        if (message.nodes && message.nodes.length) {\n          object.nodes = [];\n\n          for (var j = 0; j < message.nodes.length; ++j) object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n        }\n\n        return object;\n      };\n      /**\n       * Converts this SequenceNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      SequenceNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return SequenceNode;\n    }();\n\n    QueryPlanNode.ParallelNode = function () {\n      /**\n       * Properties of a ParallelNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface IParallelNode\n       * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n       */\n\n      /**\n       * Constructs a new ParallelNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a ParallelNode.\n       * @implements IParallelNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n       */\n      function ParallelNode(properties) {\n        this.nodes = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * ParallelNode nodes.\n       * @member {Array.<Trace.IQueryPlanNode>} nodes\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @instance\n       */\n\n\n      ParallelNode.prototype.nodes = $util.emptyArray;\n      /**\n       * Creates a new ParallelNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n       */\n\n      ParallelNode.create = function create(properties) {\n        return new ParallelNode(properties);\n      };\n      /**\n       * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ParallelNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.nodes != null && message.nodes.length) for (var i = 0; i < message.nodes.length; ++i) $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a ParallelNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ParallelNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.ParallelNode();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.nodes && message.nodes.length)) message.nodes = [];\n              message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a ParallelNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      ParallelNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n          if (!Array.isArray(message.nodes)) return \"nodes: array expected\";\n\n          for (var i = 0; i < message.nodes.length; ++i) {\n            var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n            if (error) return \"nodes.\" + error;\n          }\n        }\n\n        return null;\n      };\n      /**\n       * Creates a ParallelNode message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n       */\n\n\n      ParallelNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.ParallelNode) return object;\n        var message = new $root.Trace.QueryPlanNode.ParallelNode();\n\n        if (object.nodes) {\n          if (!Array.isArray(object.nodes)) throw TypeError(\".Trace.QueryPlanNode.ParallelNode.nodes: array expected\");\n          message.nodes = [];\n\n          for (var i = 0; i < object.nodes.length; ++i) {\n            if (typeof object.nodes[i] !== \"object\") throw TypeError(\".Trace.QueryPlanNode.ParallelNode.nodes: object expected\");\n            message.nodes[i] = $root.Trace.QueryPlanNode.fromObject(object.nodes[i]);\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ParallelNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.nodes = [];\n\n        if (message.nodes && message.nodes.length) {\n          object.nodes = [];\n\n          for (var j = 0; j < message.nodes.length; ++j) object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n        }\n\n        return object;\n      };\n      /**\n       * Converts this ParallelNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ParallelNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ParallelNode;\n    }();\n\n    QueryPlanNode.FetchNode = function () {\n      /**\n       * Properties of a FetchNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface IFetchNode\n       * @property {string|null} [serviceName] FetchNode serviceName\n       * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n       * @property {ITrace|null} [trace] FetchNode trace\n       * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n       * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n       * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n       */\n\n      /**\n       * Constructs a new FetchNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a FetchNode.\n       * @implements IFetchNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n       */\n      function FetchNode(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * FetchNode serviceName.\n       * @member {string} serviceName\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n\n      FetchNode.prototype.serviceName = \"\";\n      /**\n       * FetchNode traceParsingFailed.\n       * @member {boolean} traceParsingFailed\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.traceParsingFailed = false;\n      /**\n       * FetchNode trace.\n       * @member {ITrace|null|undefined} trace\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.trace = null;\n      /**\n       * FetchNode sentTimeOffset.\n       * @member {number} sentTimeOffset\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.sentTimeOffset = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * FetchNode sentTime.\n       * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.sentTime = null;\n      /**\n       * FetchNode receivedTime.\n       * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.receivedTime = null;\n      /**\n       * Creates a new FetchNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n       */\n\n      FetchNode.create = function create(properties) {\n        return new FetchNode(properties);\n      };\n      /**\n       * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FetchNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\")) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).string(message.serviceName);\n        if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).bool(message.traceParsingFailed);\n        if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\")) $root.Trace.encode(message.trace, writer.uint32(\n        /* id 3, wireType 2 =*/\n        26).fork()).ldelim();\n        if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\")) writer.uint32(\n        /* id 4, wireType 0 =*/\n        32).uint64(message.sentTimeOffset);\n        if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\")) $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(\n        /* id 5, wireType 2 =*/\n        42).fork()).ldelim();\n        if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\")) $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(\n        /* id 6, wireType 2 =*/\n        50).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a FetchNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FetchNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.FetchNode();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.serviceName = reader.string();\n              break;\n\n            case 2:\n              message.traceParsingFailed = reader.bool();\n              break;\n\n            case 3:\n              message.trace = $root.Trace.decode(reader, reader.uint32());\n              break;\n\n            case 4:\n              message.sentTimeOffset = reader.uint64();\n              break;\n\n            case 5:\n              message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n              break;\n\n            case 6:\n              message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FetchNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a FetchNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      FetchNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.serviceName != null && message.hasOwnProperty(\"serviceName\")) if (!$util.isString(message.serviceName)) return \"serviceName: string expected\";\n        if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\")) if (typeof message.traceParsingFailed !== \"boolean\") return \"traceParsingFailed: boolean expected\";\n\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n          var error = $root.Trace.verify(message.trace);\n          if (error) return \"trace.\" + error;\n        }\n\n        if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\")) if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high))) return \"sentTimeOffset: integer|Long expected\";\n\n        if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n          var error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n          if (error) return \"sentTime.\" + error;\n        }\n\n        if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n          var error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n          if (error) return \"receivedTime.\" + error;\n        }\n\n        return null;\n      };\n      /**\n       * Creates a FetchNode message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n       */\n\n\n      FetchNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.FetchNode) return object;\n        var message = new $root.Trace.QueryPlanNode.FetchNode();\n        if (object.serviceName != null) message.serviceName = String(object.serviceName);\n        if (object.traceParsingFailed != null) message.traceParsingFailed = Boolean(object.traceParsingFailed);\n\n        if (object.trace != null) {\n          if (typeof object.trace !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FetchNode.trace: object expected\");\n          message.trace = $root.Trace.fromObject(object.trace);\n        }\n\n        if (object.sentTimeOffset != null) if ($util.Long) (message.sentTimeOffset = $util.Long.fromValue(object.sentTimeOffset)).unsigned = true;else if (typeof object.sentTimeOffset === \"string\") message.sentTimeOffset = parseInt(object.sentTimeOffset, 10);else if (typeof object.sentTimeOffset === \"number\") message.sentTimeOffset = object.sentTimeOffset;else if (typeof object.sentTimeOffset === \"object\") message.sentTimeOffset = new $util.LongBits(object.sentTimeOffset.low >>> 0, object.sentTimeOffset.high >>> 0).toNumber(true);\n\n        if (object.sentTime != null) {\n          if (typeof object.sentTime !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FetchNode.sentTime: object expected\");\n          message.sentTime = $root.google.protobuf.Timestamp.fromObject(object.sentTime);\n        }\n\n        if (object.receivedTime != null) {\n          if (typeof object.receivedTime !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FetchNode.receivedTime: object expected\");\n          message.receivedTime = $root.google.protobuf.Timestamp.fromObject(object.receivedTime);\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      FetchNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          object.serviceName = \"\";\n          object.traceParsingFailed = false;\n          object.trace = null;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.sentTimeOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.sentTimeOffset = options.longs === String ? \"0\" : 0;\n\n          object.sentTime = null;\n          object.receivedTime = null;\n        }\n\n        if (message.serviceName != null && message.hasOwnProperty(\"serviceName\")) object.serviceName = message.serviceName;\n        if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\")) object.traceParsingFailed = message.traceParsingFailed;\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) object.trace = $root.Trace.toObject(message.trace, options);\n        if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\")) if (typeof message.sentTimeOffset === \"number\") object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;else object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n        if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n        if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n        return object;\n      };\n      /**\n       * Converts this FetchNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      FetchNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return FetchNode;\n    }();\n\n    QueryPlanNode.FlattenNode = function () {\n      /**\n       * Properties of a FlattenNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface IFlattenNode\n       * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n       * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n       */\n\n      /**\n       * Constructs a new FlattenNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a FlattenNode.\n       * @implements IFlattenNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n       */\n      function FlattenNode(properties) {\n        this.responsePath = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * FlattenNode responsePath.\n       * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @instance\n       */\n\n\n      FlattenNode.prototype.responsePath = $util.emptyArray;\n      /**\n       * FlattenNode node.\n       * @member {Trace.IQueryPlanNode|null|undefined} node\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @instance\n       */\n\n      FlattenNode.prototype.node = null;\n      /**\n       * Creates a new FlattenNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n       */\n\n      FlattenNode.create = function create(properties) {\n        return new FlattenNode(properties);\n      };\n      /**\n       * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FlattenNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.responsePath != null && message.responsePath.length) for (var i = 0; i < message.responsePath.length; ++i) $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork()).ldelim();\n        if (message.node != null && Object.hasOwnProperty.call(message, \"node\")) $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a FlattenNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FlattenNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.FlattenNode();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.responsePath && message.responsePath.length)) message.responsePath = [];\n              message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n              break;\n\n            case 2:\n              message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a FlattenNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      FlattenNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n          if (!Array.isArray(message.responsePath)) return \"responsePath: array expected\";\n\n          for (var i = 0; i < message.responsePath.length; ++i) {\n            var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n            if (error) return \"responsePath.\" + error;\n          }\n        }\n\n        if (message.node != null && message.hasOwnProperty(\"node\")) {\n          var error = $root.Trace.QueryPlanNode.verify(message.node);\n          if (error) return \"node.\" + error;\n        }\n\n        return null;\n      };\n      /**\n       * Creates a FlattenNode message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n       */\n\n\n      FlattenNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.FlattenNode) return object;\n        var message = new $root.Trace.QueryPlanNode.FlattenNode();\n\n        if (object.responsePath) {\n          if (!Array.isArray(object.responsePath)) throw TypeError(\".Trace.QueryPlanNode.FlattenNode.responsePath: array expected\");\n          message.responsePath = [];\n\n          for (var i = 0; i < object.responsePath.length; ++i) {\n            if (typeof object.responsePath[i] !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FlattenNode.responsePath: object expected\");\n            message.responsePath[i] = $root.Trace.QueryPlanNode.ResponsePathElement.fromObject(object.responsePath[i]);\n          }\n        }\n\n        if (object.node != null) {\n          if (typeof object.node !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FlattenNode.node: object expected\");\n          message.node = $root.Trace.QueryPlanNode.fromObject(object.node);\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      FlattenNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.responsePath = [];\n        if (options.defaults) object.node = null;\n\n        if (message.responsePath && message.responsePath.length) {\n          object.responsePath = [];\n\n          for (var j = 0; j < message.responsePath.length; ++j) object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n        }\n\n        if (message.node != null && message.hasOwnProperty(\"node\")) object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n        return object;\n      };\n      /**\n       * Converts this FlattenNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      FlattenNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return FlattenNode;\n    }();\n\n    QueryPlanNode.ResponsePathElement = function () {\n      /**\n       * Properties of a ResponsePathElement.\n       * @memberof Trace.QueryPlanNode\n       * @interface IResponsePathElement\n       * @property {string|null} [fieldName] ResponsePathElement fieldName\n       * @property {number|null} [index] ResponsePathElement index\n       */\n\n      /**\n       * Constructs a new ResponsePathElement.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a ResponsePathElement.\n       * @implements IResponsePathElement\n       * @constructor\n       * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n       */\n      function ResponsePathElement(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * ResponsePathElement fieldName.\n       * @member {string} fieldName\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       */\n\n\n      ResponsePathElement.prototype.fieldName = \"\";\n      /**\n       * ResponsePathElement index.\n       * @member {number} index\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       */\n\n      ResponsePathElement.prototype.index = 0; // OneOf field names bound to virtual getters and setters\n\n      var $oneOfFields;\n      /**\n       * ResponsePathElement id.\n       * @member {\"fieldName\"|\"index\"|undefined} id\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       */\n\n      Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n        get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Creates a new ResponsePathElement instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n       */\n\n      ResponsePathElement.create = function create(properties) {\n        return new ResponsePathElement(properties);\n      };\n      /**\n       * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ResponsePathElement.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\")) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).string(message.fieldName);\n        if (message.index != null && Object.hasOwnProperty.call(message, \"index\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).uint32(message.index);\n        return writer;\n      };\n      /**\n       * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a ResponsePathElement message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ResponsePathElement.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.fieldName = reader.string();\n              break;\n\n            case 2:\n              message.index = reader.uint32();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a ResponsePathElement message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      ResponsePathElement.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        var properties = {};\n\n        if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n          properties.id = 1;\n          if (!$util.isString(message.fieldName)) return \"fieldName: string expected\";\n        }\n\n        if (message.index != null && message.hasOwnProperty(\"index\")) {\n          if (properties.id === 1) return \"id: multiple values\";\n          properties.id = 1;\n          if (!$util.isInteger(message.index)) return \"index: integer expected\";\n        }\n\n        return null;\n      };\n      /**\n       * Creates a ResponsePathElement message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n       */\n\n\n      ResponsePathElement.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.ResponsePathElement) return object;\n        var message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n        if (object.fieldName != null) message.fieldName = String(object.fieldName);\n        if (object.index != null) message.index = object.index >>> 0;\n        return message;\n      };\n      /**\n       * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ResponsePathElement.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n          object.fieldName = message.fieldName;\n          if (options.oneofs) object.id = \"fieldName\";\n        }\n\n        if (message.index != null && message.hasOwnProperty(\"index\")) {\n          object.index = message.index;\n          if (options.oneofs) object.id = \"index\";\n        }\n\n        return object;\n      };\n      /**\n       * Converts this ResponsePathElement to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ResponsePathElement.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ResponsePathElement;\n    }();\n\n    return QueryPlanNode;\n  }();\n\n  return Trace;\n}();\n\n$root.ReportHeader = function () {\n  /**\n   * Properties of a ReportHeader.\n   * @exports IReportHeader\n   * @interface IReportHeader\n   * @property {string|null} [service] ReportHeader service\n   * @property {string|null} [hostname] ReportHeader hostname\n   * @property {string|null} [agentVersion] ReportHeader agentVersion\n   * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n   * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n   * @property {string|null} [uname] ReportHeader uname\n   * @property {string|null} [schemaTag] ReportHeader schemaTag\n   * @property {string|null} [schemaHash] ReportHeader schemaHash\n   */\n\n  /**\n   * Constructs a new ReportHeader.\n   * @exports ReportHeader\n   * @classdesc Represents a ReportHeader.\n   * @implements IReportHeader\n   * @constructor\n   * @param {IReportHeader=} [properties] Properties to set\n   */\n  function ReportHeader(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * ReportHeader service.\n   * @member {string} service\n   * @memberof ReportHeader\n   * @instance\n   */\n\n\n  ReportHeader.prototype.service = \"\";\n  /**\n   * ReportHeader hostname.\n   * @member {string} hostname\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.hostname = \"\";\n  /**\n   * ReportHeader agentVersion.\n   * @member {string} agentVersion\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.agentVersion = \"\";\n  /**\n   * ReportHeader serviceVersion.\n   * @member {string} serviceVersion\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.serviceVersion = \"\";\n  /**\n   * ReportHeader runtimeVersion.\n   * @member {string} runtimeVersion\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.runtimeVersion = \"\";\n  /**\n   * ReportHeader uname.\n   * @member {string} uname\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.uname = \"\";\n  /**\n   * ReportHeader schemaTag.\n   * @member {string} schemaTag\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.schemaTag = \"\";\n  /**\n   * ReportHeader schemaHash.\n   * @member {string} schemaHash\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.schemaHash = \"\";\n  /**\n   * Creates a new ReportHeader instance using the specified properties.\n   * @function create\n   * @memberof ReportHeader\n   * @static\n   * @param {IReportHeader=} [properties] Properties to set\n   * @returns {ReportHeader} ReportHeader instance\n   */\n\n  ReportHeader.create = function create(properties) {\n    return new ReportHeader(properties);\n  };\n  /**\n   * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n   * @function encode\n   * @memberof ReportHeader\n   * @static\n   * @param {IReportHeader} message ReportHeader message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ReportHeader.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.service != null && Object.hasOwnProperty.call(message, \"service\")) writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).string(message.service);\n    if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\")) writer.uint32(\n    /* id 5, wireType 2 =*/\n    42).string(message.hostname);\n    if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\")) writer.uint32(\n    /* id 6, wireType 2 =*/\n    50).string(message.agentVersion);\n    if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\")) writer.uint32(\n    /* id 7, wireType 2 =*/\n    58).string(message.serviceVersion);\n    if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\")) writer.uint32(\n    /* id 8, wireType 2 =*/\n    66).string(message.runtimeVersion);\n    if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\")) writer.uint32(\n    /* id 9, wireType 2 =*/\n    74).string(message.uname);\n    if (message.schemaTag != null && Object.hasOwnProperty.call(message, \"schemaTag\")) writer.uint32(\n    /* id 10, wireType 2 =*/\n    82).string(message.schemaTag);\n    if (message.schemaHash != null && Object.hasOwnProperty.call(message, \"schemaHash\")) writer.uint32(\n    /* id 11, wireType 2 =*/\n    90).string(message.schemaHash);\n    return writer;\n  };\n  /**\n   * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ReportHeader\n   * @static\n   * @param {IReportHeader} message ReportHeader message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a ReportHeader message from the specified reader or buffer.\n   * @function decode\n   * @memberof ReportHeader\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ReportHeader} ReportHeader\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ReportHeader.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ReportHeader();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 3:\n          message.service = reader.string();\n          break;\n\n        case 5:\n          message.hostname = reader.string();\n          break;\n\n        case 6:\n          message.agentVersion = reader.string();\n          break;\n\n        case 7:\n          message.serviceVersion = reader.string();\n          break;\n\n        case 8:\n          message.runtimeVersion = reader.string();\n          break;\n\n        case 9:\n          message.uname = reader.string();\n          break;\n\n        case 10:\n          message.schemaTag = reader.string();\n          break;\n\n        case 11:\n          message.schemaHash = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ReportHeader\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ReportHeader} ReportHeader\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a ReportHeader message.\n   * @function verify\n   * @memberof ReportHeader\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  ReportHeader.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.service != null && message.hasOwnProperty(\"service\")) if (!$util.isString(message.service)) return \"service: string expected\";\n    if (message.hostname != null && message.hasOwnProperty(\"hostname\")) if (!$util.isString(message.hostname)) return \"hostname: string expected\";\n    if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\")) if (!$util.isString(message.agentVersion)) return \"agentVersion: string expected\";\n    if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\")) if (!$util.isString(message.serviceVersion)) return \"serviceVersion: string expected\";\n    if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\")) if (!$util.isString(message.runtimeVersion)) return \"runtimeVersion: string expected\";\n    if (message.uname != null && message.hasOwnProperty(\"uname\")) if (!$util.isString(message.uname)) return \"uname: string expected\";\n    if (message.schemaTag != null && message.hasOwnProperty(\"schemaTag\")) if (!$util.isString(message.schemaTag)) return \"schemaTag: string expected\";\n    if (message.schemaHash != null && message.hasOwnProperty(\"schemaHash\")) if (!$util.isString(message.schemaHash)) return \"schemaHash: string expected\";\n    return null;\n  };\n  /**\n   * Creates a ReportHeader message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof ReportHeader\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {ReportHeader} ReportHeader\n   */\n\n\n  ReportHeader.fromObject = function fromObject(object) {\n    if (object instanceof $root.ReportHeader) return object;\n    var message = new $root.ReportHeader();\n    if (object.service != null) message.service = String(object.service);\n    if (object.hostname != null) message.hostname = String(object.hostname);\n    if (object.agentVersion != null) message.agentVersion = String(object.agentVersion);\n    if (object.serviceVersion != null) message.serviceVersion = String(object.serviceVersion);\n    if (object.runtimeVersion != null) message.runtimeVersion = String(object.runtimeVersion);\n    if (object.uname != null) message.uname = String(object.uname);\n    if (object.schemaTag != null) message.schemaTag = String(object.schemaTag);\n    if (object.schemaHash != null) message.schemaHash = String(object.schemaHash);\n    return message;\n  };\n  /**\n   * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ReportHeader\n   * @static\n   * @param {ReportHeader} message ReportHeader\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  ReportHeader.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.service = \"\";\n      object.hostname = \"\";\n      object.agentVersion = \"\";\n      object.serviceVersion = \"\";\n      object.runtimeVersion = \"\";\n      object.uname = \"\";\n      object.schemaTag = \"\";\n      object.schemaHash = \"\";\n    }\n\n    if (message.service != null && message.hasOwnProperty(\"service\")) object.service = message.service;\n    if (message.hostname != null && message.hasOwnProperty(\"hostname\")) object.hostname = message.hostname;\n    if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\")) object.agentVersion = message.agentVersion;\n    if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\")) object.serviceVersion = message.serviceVersion;\n    if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\")) object.runtimeVersion = message.runtimeVersion;\n    if (message.uname != null && message.hasOwnProperty(\"uname\")) object.uname = message.uname;\n    if (message.schemaTag != null && message.hasOwnProperty(\"schemaTag\")) object.schemaTag = message.schemaTag;\n    if (message.schemaHash != null && message.hasOwnProperty(\"schemaHash\")) object.schemaHash = message.schemaHash;\n    return object;\n  };\n  /**\n   * Converts this ReportHeader to JSON.\n   * @function toJSON\n   * @memberof ReportHeader\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  ReportHeader.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return ReportHeader;\n}();\n\n$root.PathErrorStats = function () {\n  /**\n   * Properties of a PathErrorStats.\n   * @exports IPathErrorStats\n   * @interface IPathErrorStats\n   * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n   * @property {number|null} [errorsCount] PathErrorStats errorsCount\n   * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n   */\n\n  /**\n   * Constructs a new PathErrorStats.\n   * @exports PathErrorStats\n   * @classdesc Represents a PathErrorStats.\n   * @implements IPathErrorStats\n   * @constructor\n   * @param {IPathErrorStats=} [properties] Properties to set\n   */\n  function PathErrorStats(properties) {\n    this.children = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * PathErrorStats children.\n   * @member {Object.<string,IPathErrorStats>} children\n   * @memberof PathErrorStats\n   * @instance\n   */\n\n\n  PathErrorStats.prototype.children = $util.emptyObject;\n  /**\n   * PathErrorStats errorsCount.\n   * @member {number} errorsCount\n   * @memberof PathErrorStats\n   * @instance\n   */\n\n  PathErrorStats.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * PathErrorStats requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof PathErrorStats\n   * @instance\n   */\n\n  PathErrorStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Creates a new PathErrorStats instance using the specified properties.\n   * @function create\n   * @memberof PathErrorStats\n   * @static\n   * @param {IPathErrorStats=} [properties] Properties to set\n   * @returns {PathErrorStats} PathErrorStats instance\n   */\n\n  PathErrorStats.create = function create(properties) {\n    return new PathErrorStats(properties);\n  };\n  /**\n   * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n   * @function encode\n   * @memberof PathErrorStats\n   * @static\n   * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  PathErrorStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.children != null && Object.hasOwnProperty.call(message, \"children\")) for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\")) writer.uint32(\n    /* id 4, wireType 0 =*/\n    32).uint64(message.errorsCount);\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32(\n    /* id 5, wireType 0 =*/\n    40).uint64(message.requestsWithErrorsCount);\n    return writer;\n  };\n  /**\n   * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PathErrorStats\n   * @static\n   * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a PathErrorStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof PathErrorStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PathErrorStats} PathErrorStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  PathErrorStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.PathErrorStats(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          reader.skip().pos++;\n          if (message.children === $util.emptyObject) message.children = {};\n          key = reader.string();\n          reader.pos++;\n          message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.errorsCount = reader.uint64();\n          break;\n\n        case 5:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PathErrorStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PathErrorStats} PathErrorStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a PathErrorStats message.\n   * @function verify\n   * @memberof PathErrorStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  PathErrorStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.children != null && message.hasOwnProperty(\"children\")) {\n      if (!$util.isObject(message.children)) return \"children: object expected\";\n      var key = Object.keys(message.children);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.PathErrorStats.verify(message.children[key[i]]);\n        if (error) return \"children.\" + error;\n      }\n    }\n\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high))) return \"errorsCount: integer|Long expected\";\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n    return null;\n  };\n  /**\n   * Creates a PathErrorStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PathErrorStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {PathErrorStats} PathErrorStats\n   */\n\n\n  PathErrorStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.PathErrorStats) return object;\n    var message = new $root.PathErrorStats();\n\n    if (object.children) {\n      if (typeof object.children !== \"object\") throw TypeError(\".PathErrorStats.children: object expected\");\n      message.children = {};\n\n      for (var keys = Object.keys(object.children), i = 0; i < keys.length; ++i) {\n        if (typeof object.children[keys[i]] !== \"object\") throw TypeError(\".PathErrorStats.children: object expected\");\n        message.children[keys[i]] = $root.PathErrorStats.fromObject(object.children[keys[i]]);\n      }\n    }\n\n    if (object.errorsCount != null) if ($util.Long) (message.errorsCount = $util.Long.fromValue(object.errorsCount)).unsigned = true;else if (typeof object.errorsCount === \"string\") message.errorsCount = parseInt(object.errorsCount, 10);else if (typeof object.errorsCount === \"number\") message.errorsCount = object.errorsCount;else if (typeof object.errorsCount === \"object\") message.errorsCount = new $util.LongBits(object.errorsCount.low >>> 0, object.errorsCount.high >>> 0).toNumber(true);\n    if (object.requestsWithErrorsCount != null) if ($util.Long) (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;else if (typeof object.requestsWithErrorsCount === \"string\") message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);else if (typeof object.requestsWithErrorsCount === \"number\") message.requestsWithErrorsCount = object.requestsWithErrorsCount;else if (typeof object.requestsWithErrorsCount === \"object\") message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n    return message;\n  };\n  /**\n   * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PathErrorStats\n   * @static\n   * @param {PathErrorStats} message PathErrorStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  PathErrorStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.children = {};\n\n    if (options.defaults) {\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.errorsCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n    }\n\n    var keys2;\n\n    if (message.children && (keys2 = Object.keys(message.children)).length) {\n      object.children = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n    }\n\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (typeof message.errorsCount === \"number\") object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;else object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n    return object;\n  };\n  /**\n   * Converts this PathErrorStats to JSON.\n   * @function toJSON\n   * @memberof PathErrorStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  PathErrorStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return PathErrorStats;\n}();\n\n$root.ClientNameStats = function () {\n  /**\n   * Properties of a ClientNameStats.\n   * @exports IClientNameStats\n   * @interface IClientNameStats\n   * @property {Array.<number>|null} [latencyCount] ClientNameStats latencyCount\n   * @property {Object.<string,number>|null} [requestsCountPerVersion] ClientNameStats requestsCountPerVersion\n   * @property {Object.<string,number>|null} [cacheHitsPerVersion] ClientNameStats cacheHitsPerVersion\n   * @property {Object.<string,number>|null} [persistedQueryHitsPerVersion] ClientNameStats persistedQueryHitsPerVersion\n   * @property {Object.<string,number>|null} [persistedQueryMissesPerVersion] ClientNameStats persistedQueryMissesPerVersion\n   * @property {Object.<string,number>|null} [registeredOperationCountPerVersion] ClientNameStats registeredOperationCountPerVersion\n   * @property {Object.<string,number>|null} [forbiddenOperationCountPerVersion] ClientNameStats forbiddenOperationCountPerVersion\n   * @property {Array.<number>|null} [cacheLatencyCount] ClientNameStats cacheLatencyCount\n   * @property {IPathErrorStats|null} [rootErrorStats] ClientNameStats rootErrorStats\n   * @property {number|null} [requestsWithErrorsCount] ClientNameStats requestsWithErrorsCount\n   * @property {Array.<number>|null} [publicCacheTtlCount] ClientNameStats publicCacheTtlCount\n   * @property {Array.<number>|null} [privateCacheTtlCount] ClientNameStats privateCacheTtlCount\n   */\n\n  /**\n   * Constructs a new ClientNameStats.\n   * @exports ClientNameStats\n   * @classdesc Represents a ClientNameStats.\n   * @implements IClientNameStats\n   * @constructor\n   * @param {IClientNameStats=} [properties] Properties to set\n   */\n  function ClientNameStats(properties) {\n    this.latencyCount = [];\n    this.requestsCountPerVersion = {};\n    this.cacheHitsPerVersion = {};\n    this.persistedQueryHitsPerVersion = {};\n    this.persistedQueryMissesPerVersion = {};\n    this.registeredOperationCountPerVersion = {};\n    this.forbiddenOperationCountPerVersion = {};\n    this.cacheLatencyCount = [];\n    this.publicCacheTtlCount = [];\n    this.privateCacheTtlCount = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * ClientNameStats latencyCount.\n   * @member {Array.<number>} latencyCount\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n\n  ClientNameStats.prototype.latencyCount = $util.emptyArray;\n  /**\n   * ClientNameStats requestsCountPerVersion.\n   * @member {Object.<string,number>} requestsCountPerVersion\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.requestsCountPerVersion = $util.emptyObject;\n  /**\n   * ClientNameStats cacheHitsPerVersion.\n   * @member {Object.<string,number>} cacheHitsPerVersion\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.cacheHitsPerVersion = $util.emptyObject;\n  /**\n   * ClientNameStats persistedQueryHitsPerVersion.\n   * @member {Object.<string,number>} persistedQueryHitsPerVersion\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.persistedQueryHitsPerVersion = $util.emptyObject;\n  /**\n   * ClientNameStats persistedQueryMissesPerVersion.\n   * @member {Object.<string,number>} persistedQueryMissesPerVersion\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.persistedQueryMissesPerVersion = $util.emptyObject;\n  /**\n   * ClientNameStats registeredOperationCountPerVersion.\n   * @member {Object.<string,number>} registeredOperationCountPerVersion\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.registeredOperationCountPerVersion = $util.emptyObject;\n  /**\n   * ClientNameStats forbiddenOperationCountPerVersion.\n   * @member {Object.<string,number>} forbiddenOperationCountPerVersion\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.forbiddenOperationCountPerVersion = $util.emptyObject;\n  /**\n   * ClientNameStats cacheLatencyCount.\n   * @member {Array.<number>} cacheLatencyCount\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.cacheLatencyCount = $util.emptyArray;\n  /**\n   * ClientNameStats rootErrorStats.\n   * @member {IPathErrorStats|null|undefined} rootErrorStats\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.rootErrorStats = null;\n  /**\n   * ClientNameStats requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * ClientNameStats publicCacheTtlCount.\n   * @member {Array.<number>} publicCacheTtlCount\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.publicCacheTtlCount = $util.emptyArray;\n  /**\n   * ClientNameStats privateCacheTtlCount.\n   * @member {Array.<number>} privateCacheTtlCount\n   * @memberof ClientNameStats\n   * @instance\n   */\n\n  ClientNameStats.prototype.privateCacheTtlCount = $util.emptyArray;\n  /**\n   * Creates a new ClientNameStats instance using the specified properties.\n   * @function create\n   * @memberof ClientNameStats\n   * @static\n   * @param {IClientNameStats=} [properties] Properties to set\n   * @returns {ClientNameStats} ClientNameStats instance\n   */\n\n  ClientNameStats.create = function create(properties) {\n    return new ClientNameStats(properties);\n  };\n  /**\n   * Encodes the specified ClientNameStats message. Does not implicitly {@link ClientNameStats.verify|verify} messages.\n   * @function encode\n   * @memberof ClientNameStats\n   * @static\n   * @param {IClientNameStats} message ClientNameStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ClientNameStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n\n    if (message.latencyCount != null && message.latencyCount.length) {\n      writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork();\n\n      for (var i = 0; i < message.latencyCount.length; ++i) writer.int64(message.latencyCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.requestsCountPerVersion != null && Object.hasOwnProperty.call(message, \"requestsCountPerVersion\")) for (var keys = Object.keys(message.requestsCountPerVersion), i = 0; i < keys.length; ++i) writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).fork().uint32(\n    /* id 1, wireType 2 =*/\n    10).string(keys[i]).uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.requestsCountPerVersion[keys[i]]).ldelim();\n    if (message.cacheHitsPerVersion != null && Object.hasOwnProperty.call(message, \"cacheHitsPerVersion\")) for (var keys = Object.keys(message.cacheHitsPerVersion), i = 0; i < keys.length; ++i) writer.uint32(\n    /* id 4, wireType 2 =*/\n    34).fork().uint32(\n    /* id 1, wireType 2 =*/\n    10).string(keys[i]).uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.cacheHitsPerVersion[keys[i]]).ldelim();\n\n    if (message.cacheLatencyCount != null && message.cacheLatencyCount.length) {\n      writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).fork();\n\n      for (var i = 0; i < message.cacheLatencyCount.length; ++i) writer.int64(message.cacheLatencyCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\")) $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(\n    /* id 6, wireType 2 =*/\n    50).fork()).ldelim();\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32(\n    /* id 7, wireType 0 =*/\n    56).uint64(message.requestsWithErrorsCount);\n\n    if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.length) {\n      writer.uint32(\n      /* id 8, wireType 2 =*/\n      66).fork();\n\n      for (var i = 0; i < message.publicCacheTtlCount.length; ++i) writer.int64(message.publicCacheTtlCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.length) {\n      writer.uint32(\n      /* id 9, wireType 2 =*/\n      74).fork();\n\n      for (var i = 0; i < message.privateCacheTtlCount.length; ++i) writer.int64(message.privateCacheTtlCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.persistedQueryHitsPerVersion != null && Object.hasOwnProperty.call(message, \"persistedQueryHitsPerVersion\")) for (var keys = Object.keys(message.persistedQueryHitsPerVersion), i = 0; i < keys.length; ++i) writer.uint32(\n    /* id 10, wireType 2 =*/\n    82).fork().uint32(\n    /* id 1, wireType 2 =*/\n    10).string(keys[i]).uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.persistedQueryHitsPerVersion[keys[i]]).ldelim();\n    if (message.persistedQueryMissesPerVersion != null && Object.hasOwnProperty.call(message, \"persistedQueryMissesPerVersion\")) for (var keys = Object.keys(message.persistedQueryMissesPerVersion), i = 0; i < keys.length; ++i) writer.uint32(\n    /* id 11, wireType 2 =*/\n    90).fork().uint32(\n    /* id 1, wireType 2 =*/\n    10).string(keys[i]).uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.persistedQueryMissesPerVersion[keys[i]]).ldelim();\n    if (message.registeredOperationCountPerVersion != null && Object.hasOwnProperty.call(message, \"registeredOperationCountPerVersion\")) for (var keys = Object.keys(message.registeredOperationCountPerVersion), i = 0; i < keys.length; ++i) writer.uint32(\n    /* id 12, wireType 2 =*/\n    98).fork().uint32(\n    /* id 1, wireType 2 =*/\n    10).string(keys[i]).uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.registeredOperationCountPerVersion[keys[i]]).ldelim();\n    if (message.forbiddenOperationCountPerVersion != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCountPerVersion\")) for (var keys = Object.keys(message.forbiddenOperationCountPerVersion), i = 0; i < keys.length; ++i) writer.uint32(\n    /* id 13, wireType 2 =*/\n    106).fork().uint32(\n    /* id 1, wireType 2 =*/\n    10).string(keys[i]).uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.forbiddenOperationCountPerVersion[keys[i]]).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified ClientNameStats message, length delimited. Does not implicitly {@link ClientNameStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ClientNameStats\n   * @static\n   * @param {IClientNameStats} message ClientNameStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ClientNameStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a ClientNameStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof ClientNameStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ClientNameStats} ClientNameStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ClientNameStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ClientNameStats(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          if (!(message.latencyCount && message.latencyCount.length)) message.latencyCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.latencyCount.push(reader.int64());\n          } else message.latencyCount.push(reader.int64());\n\n          break;\n\n        case 3:\n          reader.skip().pos++;\n          if (message.requestsCountPerVersion === $util.emptyObject) message.requestsCountPerVersion = {};\n          key = reader.string();\n          reader.pos++;\n          message.requestsCountPerVersion[key] = reader.uint64();\n          break;\n\n        case 4:\n          reader.skip().pos++;\n          if (message.cacheHitsPerVersion === $util.emptyObject) message.cacheHitsPerVersion = {};\n          key = reader.string();\n          reader.pos++;\n          message.cacheHitsPerVersion[key] = reader.uint64();\n          break;\n\n        case 10:\n          reader.skip().pos++;\n          if (message.persistedQueryHitsPerVersion === $util.emptyObject) message.persistedQueryHitsPerVersion = {};\n          key = reader.string();\n          reader.pos++;\n          message.persistedQueryHitsPerVersion[key] = reader.uint64();\n          break;\n\n        case 11:\n          reader.skip().pos++;\n          if (message.persistedQueryMissesPerVersion === $util.emptyObject) message.persistedQueryMissesPerVersion = {};\n          key = reader.string();\n          reader.pos++;\n          message.persistedQueryMissesPerVersion[key] = reader.uint64();\n          break;\n\n        case 12:\n          reader.skip().pos++;\n          if (message.registeredOperationCountPerVersion === $util.emptyObject) message.registeredOperationCountPerVersion = {};\n          key = reader.string();\n          reader.pos++;\n          message.registeredOperationCountPerVersion[key] = reader.uint64();\n          break;\n\n        case 13:\n          reader.skip().pos++;\n          if (message.forbiddenOperationCountPerVersion === $util.emptyObject) message.forbiddenOperationCountPerVersion = {};\n          key = reader.string();\n          reader.pos++;\n          message.forbiddenOperationCountPerVersion[key] = reader.uint64();\n          break;\n\n        case 5:\n          if (!(message.cacheLatencyCount && message.cacheLatencyCount.length)) message.cacheLatencyCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.cacheLatencyCount.push(reader.int64());\n          } else message.cacheLatencyCount.push(reader.int64());\n\n          break;\n\n        case 6:\n          message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n          break;\n\n        case 7:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n\n        case 8:\n          if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length)) message.publicCacheTtlCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.publicCacheTtlCount.push(reader.int64());\n          } else message.publicCacheTtlCount.push(reader.int64());\n\n          break;\n\n        case 9:\n          if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length)) message.privateCacheTtlCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.privateCacheTtlCount.push(reader.int64());\n          } else message.privateCacheTtlCount.push(reader.int64());\n\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a ClientNameStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ClientNameStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ClientNameStats} ClientNameStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ClientNameStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a ClientNameStats message.\n   * @function verify\n   * @memberof ClientNameStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  ClientNameStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n      if (!Array.isArray(message.latencyCount)) return \"latencyCount: array expected\";\n\n      for (var i = 0; i < message.latencyCount.length; ++i) if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high))) return \"latencyCount: integer|Long[] expected\";\n    }\n\n    if (message.requestsCountPerVersion != null && message.hasOwnProperty(\"requestsCountPerVersion\")) {\n      if (!$util.isObject(message.requestsCountPerVersion)) return \"requestsCountPerVersion: object expected\";\n      var key = Object.keys(message.requestsCountPerVersion);\n\n      for (var i = 0; i < key.length; ++i) if (!$util.isInteger(message.requestsCountPerVersion[key[i]]) && !(message.requestsCountPerVersion[key[i]] && $util.isInteger(message.requestsCountPerVersion[key[i]].low) && $util.isInteger(message.requestsCountPerVersion[key[i]].high))) return \"requestsCountPerVersion: integer|Long{k:string} expected\";\n    }\n\n    if (message.cacheHitsPerVersion != null && message.hasOwnProperty(\"cacheHitsPerVersion\")) {\n      if (!$util.isObject(message.cacheHitsPerVersion)) return \"cacheHitsPerVersion: object expected\";\n      var key = Object.keys(message.cacheHitsPerVersion);\n\n      for (var i = 0; i < key.length; ++i) if (!$util.isInteger(message.cacheHitsPerVersion[key[i]]) && !(message.cacheHitsPerVersion[key[i]] && $util.isInteger(message.cacheHitsPerVersion[key[i]].low) && $util.isInteger(message.cacheHitsPerVersion[key[i]].high))) return \"cacheHitsPerVersion: integer|Long{k:string} expected\";\n    }\n\n    if (message.persistedQueryHitsPerVersion != null && message.hasOwnProperty(\"persistedQueryHitsPerVersion\")) {\n      if (!$util.isObject(message.persistedQueryHitsPerVersion)) return \"persistedQueryHitsPerVersion: object expected\";\n      var key = Object.keys(message.persistedQueryHitsPerVersion);\n\n      for (var i = 0; i < key.length; ++i) if (!$util.isInteger(message.persistedQueryHitsPerVersion[key[i]]) && !(message.persistedQueryHitsPerVersion[key[i]] && $util.isInteger(message.persistedQueryHitsPerVersion[key[i]].low) && $util.isInteger(message.persistedQueryHitsPerVersion[key[i]].high))) return \"persistedQueryHitsPerVersion: integer|Long{k:string} expected\";\n    }\n\n    if (message.persistedQueryMissesPerVersion != null && message.hasOwnProperty(\"persistedQueryMissesPerVersion\")) {\n      if (!$util.isObject(message.persistedQueryMissesPerVersion)) return \"persistedQueryMissesPerVersion: object expected\";\n      var key = Object.keys(message.persistedQueryMissesPerVersion);\n\n      for (var i = 0; i < key.length; ++i) if (!$util.isInteger(message.persistedQueryMissesPerVersion[key[i]]) && !(message.persistedQueryMissesPerVersion[key[i]] && $util.isInteger(message.persistedQueryMissesPerVersion[key[i]].low) && $util.isInteger(message.persistedQueryMissesPerVersion[key[i]].high))) return \"persistedQueryMissesPerVersion: integer|Long{k:string} expected\";\n    }\n\n    if (message.registeredOperationCountPerVersion != null && message.hasOwnProperty(\"registeredOperationCountPerVersion\")) {\n      if (!$util.isObject(message.registeredOperationCountPerVersion)) return \"registeredOperationCountPerVersion: object expected\";\n      var key = Object.keys(message.registeredOperationCountPerVersion);\n\n      for (var i = 0; i < key.length; ++i) if (!$util.isInteger(message.registeredOperationCountPerVersion[key[i]]) && !(message.registeredOperationCountPerVersion[key[i]] && $util.isInteger(message.registeredOperationCountPerVersion[key[i]].low) && $util.isInteger(message.registeredOperationCountPerVersion[key[i]].high))) return \"registeredOperationCountPerVersion: integer|Long{k:string} expected\";\n    }\n\n    if (message.forbiddenOperationCountPerVersion != null && message.hasOwnProperty(\"forbiddenOperationCountPerVersion\")) {\n      if (!$util.isObject(message.forbiddenOperationCountPerVersion)) return \"forbiddenOperationCountPerVersion: object expected\";\n      var key = Object.keys(message.forbiddenOperationCountPerVersion);\n\n      for (var i = 0; i < key.length; ++i) if (!$util.isInteger(message.forbiddenOperationCountPerVersion[key[i]]) && !(message.forbiddenOperationCountPerVersion[key[i]] && $util.isInteger(message.forbiddenOperationCountPerVersion[key[i]].low) && $util.isInteger(message.forbiddenOperationCountPerVersion[key[i]].high))) return \"forbiddenOperationCountPerVersion: integer|Long{k:string} expected\";\n    }\n\n    if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n      if (!Array.isArray(message.cacheLatencyCount)) return \"cacheLatencyCount: array expected\";\n\n      for (var i = 0; i < message.cacheLatencyCount.length; ++i) if (!$util.isInteger(message.cacheLatencyCount[i]) && !(message.cacheLatencyCount[i] && $util.isInteger(message.cacheLatencyCount[i].low) && $util.isInteger(message.cacheLatencyCount[i].high))) return \"cacheLatencyCount: integer|Long[] expected\";\n    }\n\n    if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n      var error = $root.PathErrorStats.verify(message.rootErrorStats);\n      if (error) return \"rootErrorStats.\" + error;\n    }\n\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n\n    if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n      if (!Array.isArray(message.publicCacheTtlCount)) return \"publicCacheTtlCount: array expected\";\n\n      for (var i = 0; i < message.publicCacheTtlCount.length; ++i) if (!$util.isInteger(message.publicCacheTtlCount[i]) && !(message.publicCacheTtlCount[i] && $util.isInteger(message.publicCacheTtlCount[i].low) && $util.isInteger(message.publicCacheTtlCount[i].high))) return \"publicCacheTtlCount: integer|Long[] expected\";\n    }\n\n    if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n      if (!Array.isArray(message.privateCacheTtlCount)) return \"privateCacheTtlCount: array expected\";\n\n      for (var i = 0; i < message.privateCacheTtlCount.length; ++i) if (!$util.isInteger(message.privateCacheTtlCount[i]) && !(message.privateCacheTtlCount[i] && $util.isInteger(message.privateCacheTtlCount[i].low) && $util.isInteger(message.privateCacheTtlCount[i].high))) return \"privateCacheTtlCount: integer|Long[] expected\";\n    }\n\n    return null;\n  };\n  /**\n   * Creates a ClientNameStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof ClientNameStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {ClientNameStats} ClientNameStats\n   */\n\n\n  ClientNameStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.ClientNameStats) return object;\n    var message = new $root.ClientNameStats();\n\n    if (object.latencyCount) {\n      if (!Array.isArray(object.latencyCount)) throw TypeError(\".ClientNameStats.latencyCount: array expected\");\n      message.latencyCount = [];\n\n      for (var i = 0; i < object.latencyCount.length; ++i) if ($util.Long) (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;else if (typeof object.latencyCount[i] === \"string\") message.latencyCount[i] = parseInt(object.latencyCount[i], 10);else if (typeof object.latencyCount[i] === \"number\") message.latencyCount[i] = object.latencyCount[i];else if (typeof object.latencyCount[i] === \"object\") message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.requestsCountPerVersion) {\n      if (typeof object.requestsCountPerVersion !== \"object\") throw TypeError(\".ClientNameStats.requestsCountPerVersion: object expected\");\n      message.requestsCountPerVersion = {};\n\n      for (var keys = Object.keys(object.requestsCountPerVersion), i = 0; i < keys.length; ++i) if ($util.Long) (message.requestsCountPerVersion[keys[i]] = $util.Long.fromValue(object.requestsCountPerVersion[keys[i]])).unsigned = true;else if (typeof object.requestsCountPerVersion[keys[i]] === \"string\") message.requestsCountPerVersion[keys[i]] = parseInt(object.requestsCountPerVersion[keys[i]], 10);else if (typeof object.requestsCountPerVersion[keys[i]] === \"number\") message.requestsCountPerVersion[keys[i]] = object.requestsCountPerVersion[keys[i]];else if (typeof object.requestsCountPerVersion[keys[i]] === \"object\") message.requestsCountPerVersion[keys[i]] = new $util.LongBits(object.requestsCountPerVersion[keys[i]].low >>> 0, object.requestsCountPerVersion[keys[i]].high >>> 0).toNumber(true);\n    }\n\n    if (object.cacheHitsPerVersion) {\n      if (typeof object.cacheHitsPerVersion !== \"object\") throw TypeError(\".ClientNameStats.cacheHitsPerVersion: object expected\");\n      message.cacheHitsPerVersion = {};\n\n      for (var keys = Object.keys(object.cacheHitsPerVersion), i = 0; i < keys.length; ++i) if ($util.Long) (message.cacheHitsPerVersion[keys[i]] = $util.Long.fromValue(object.cacheHitsPerVersion[keys[i]])).unsigned = true;else if (typeof object.cacheHitsPerVersion[keys[i]] === \"string\") message.cacheHitsPerVersion[keys[i]] = parseInt(object.cacheHitsPerVersion[keys[i]], 10);else if (typeof object.cacheHitsPerVersion[keys[i]] === \"number\") message.cacheHitsPerVersion[keys[i]] = object.cacheHitsPerVersion[keys[i]];else if (typeof object.cacheHitsPerVersion[keys[i]] === \"object\") message.cacheHitsPerVersion[keys[i]] = new $util.LongBits(object.cacheHitsPerVersion[keys[i]].low >>> 0, object.cacheHitsPerVersion[keys[i]].high >>> 0).toNumber(true);\n    }\n\n    if (object.persistedQueryHitsPerVersion) {\n      if (typeof object.persistedQueryHitsPerVersion !== \"object\") throw TypeError(\".ClientNameStats.persistedQueryHitsPerVersion: object expected\");\n      message.persistedQueryHitsPerVersion = {};\n\n      for (var keys = Object.keys(object.persistedQueryHitsPerVersion), i = 0; i < keys.length; ++i) if ($util.Long) (message.persistedQueryHitsPerVersion[keys[i]] = $util.Long.fromValue(object.persistedQueryHitsPerVersion[keys[i]])).unsigned = true;else if (typeof object.persistedQueryHitsPerVersion[keys[i]] === \"string\") message.persistedQueryHitsPerVersion[keys[i]] = parseInt(object.persistedQueryHitsPerVersion[keys[i]], 10);else if (typeof object.persistedQueryHitsPerVersion[keys[i]] === \"number\") message.persistedQueryHitsPerVersion[keys[i]] = object.persistedQueryHitsPerVersion[keys[i]];else if (typeof object.persistedQueryHitsPerVersion[keys[i]] === \"object\") message.persistedQueryHitsPerVersion[keys[i]] = new $util.LongBits(object.persistedQueryHitsPerVersion[keys[i]].low >>> 0, object.persistedQueryHitsPerVersion[keys[i]].high >>> 0).toNumber(true);\n    }\n\n    if (object.persistedQueryMissesPerVersion) {\n      if (typeof object.persistedQueryMissesPerVersion !== \"object\") throw TypeError(\".ClientNameStats.persistedQueryMissesPerVersion: object expected\");\n      message.persistedQueryMissesPerVersion = {};\n\n      for (var keys = Object.keys(object.persistedQueryMissesPerVersion), i = 0; i < keys.length; ++i) if ($util.Long) (message.persistedQueryMissesPerVersion[keys[i]] = $util.Long.fromValue(object.persistedQueryMissesPerVersion[keys[i]])).unsigned = true;else if (typeof object.persistedQueryMissesPerVersion[keys[i]] === \"string\") message.persistedQueryMissesPerVersion[keys[i]] = parseInt(object.persistedQueryMissesPerVersion[keys[i]], 10);else if (typeof object.persistedQueryMissesPerVersion[keys[i]] === \"number\") message.persistedQueryMissesPerVersion[keys[i]] = object.persistedQueryMissesPerVersion[keys[i]];else if (typeof object.persistedQueryMissesPerVersion[keys[i]] === \"object\") message.persistedQueryMissesPerVersion[keys[i]] = new $util.LongBits(object.persistedQueryMissesPerVersion[keys[i]].low >>> 0, object.persistedQueryMissesPerVersion[keys[i]].high >>> 0).toNumber(true);\n    }\n\n    if (object.registeredOperationCountPerVersion) {\n      if (typeof object.registeredOperationCountPerVersion !== \"object\") throw TypeError(\".ClientNameStats.registeredOperationCountPerVersion: object expected\");\n      message.registeredOperationCountPerVersion = {};\n\n      for (var keys = Object.keys(object.registeredOperationCountPerVersion), i = 0; i < keys.length; ++i) if ($util.Long) (message.registeredOperationCountPerVersion[keys[i]] = $util.Long.fromValue(object.registeredOperationCountPerVersion[keys[i]])).unsigned = true;else if (typeof object.registeredOperationCountPerVersion[keys[i]] === \"string\") message.registeredOperationCountPerVersion[keys[i]] = parseInt(object.registeredOperationCountPerVersion[keys[i]], 10);else if (typeof object.registeredOperationCountPerVersion[keys[i]] === \"number\") message.registeredOperationCountPerVersion[keys[i]] = object.registeredOperationCountPerVersion[keys[i]];else if (typeof object.registeredOperationCountPerVersion[keys[i]] === \"object\") message.registeredOperationCountPerVersion[keys[i]] = new $util.LongBits(object.registeredOperationCountPerVersion[keys[i]].low >>> 0, object.registeredOperationCountPerVersion[keys[i]].high >>> 0).toNumber(true);\n    }\n\n    if (object.forbiddenOperationCountPerVersion) {\n      if (typeof object.forbiddenOperationCountPerVersion !== \"object\") throw TypeError(\".ClientNameStats.forbiddenOperationCountPerVersion: object expected\");\n      message.forbiddenOperationCountPerVersion = {};\n\n      for (var keys = Object.keys(object.forbiddenOperationCountPerVersion), i = 0; i < keys.length; ++i) if ($util.Long) (message.forbiddenOperationCountPerVersion[keys[i]] = $util.Long.fromValue(object.forbiddenOperationCountPerVersion[keys[i]])).unsigned = true;else if (typeof object.forbiddenOperationCountPerVersion[keys[i]] === \"string\") message.forbiddenOperationCountPerVersion[keys[i]] = parseInt(object.forbiddenOperationCountPerVersion[keys[i]], 10);else if (typeof object.forbiddenOperationCountPerVersion[keys[i]] === \"number\") message.forbiddenOperationCountPerVersion[keys[i]] = object.forbiddenOperationCountPerVersion[keys[i]];else if (typeof object.forbiddenOperationCountPerVersion[keys[i]] === \"object\") message.forbiddenOperationCountPerVersion[keys[i]] = new $util.LongBits(object.forbiddenOperationCountPerVersion[keys[i]].low >>> 0, object.forbiddenOperationCountPerVersion[keys[i]].high >>> 0).toNumber(true);\n    }\n\n    if (object.cacheLatencyCount) {\n      if (!Array.isArray(object.cacheLatencyCount)) throw TypeError(\".ClientNameStats.cacheLatencyCount: array expected\");\n      message.cacheLatencyCount = [];\n\n      for (var i = 0; i < object.cacheLatencyCount.length; ++i) if ($util.Long) (message.cacheLatencyCount[i] = $util.Long.fromValue(object.cacheLatencyCount[i])).unsigned = false;else if (typeof object.cacheLatencyCount[i] === \"string\") message.cacheLatencyCount[i] = parseInt(object.cacheLatencyCount[i], 10);else if (typeof object.cacheLatencyCount[i] === \"number\") message.cacheLatencyCount[i] = object.cacheLatencyCount[i];else if (typeof object.cacheLatencyCount[i] === \"object\") message.cacheLatencyCount[i] = new $util.LongBits(object.cacheLatencyCount[i].low >>> 0, object.cacheLatencyCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.rootErrorStats != null) {\n      if (typeof object.rootErrorStats !== \"object\") throw TypeError(\".ClientNameStats.rootErrorStats: object expected\");\n      message.rootErrorStats = $root.PathErrorStats.fromObject(object.rootErrorStats);\n    }\n\n    if (object.requestsWithErrorsCount != null) if ($util.Long) (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;else if (typeof object.requestsWithErrorsCount === \"string\") message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);else if (typeof object.requestsWithErrorsCount === \"number\") message.requestsWithErrorsCount = object.requestsWithErrorsCount;else if (typeof object.requestsWithErrorsCount === \"object\") message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n\n    if (object.publicCacheTtlCount) {\n      if (!Array.isArray(object.publicCacheTtlCount)) throw TypeError(\".ClientNameStats.publicCacheTtlCount: array expected\");\n      message.publicCacheTtlCount = [];\n\n      for (var i = 0; i < object.publicCacheTtlCount.length; ++i) if ($util.Long) (message.publicCacheTtlCount[i] = $util.Long.fromValue(object.publicCacheTtlCount[i])).unsigned = false;else if (typeof object.publicCacheTtlCount[i] === \"string\") message.publicCacheTtlCount[i] = parseInt(object.publicCacheTtlCount[i], 10);else if (typeof object.publicCacheTtlCount[i] === \"number\") message.publicCacheTtlCount[i] = object.publicCacheTtlCount[i];else if (typeof object.publicCacheTtlCount[i] === \"object\") message.publicCacheTtlCount[i] = new $util.LongBits(object.publicCacheTtlCount[i].low >>> 0, object.publicCacheTtlCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.privateCacheTtlCount) {\n      if (!Array.isArray(object.privateCacheTtlCount)) throw TypeError(\".ClientNameStats.privateCacheTtlCount: array expected\");\n      message.privateCacheTtlCount = [];\n\n      for (var i = 0; i < object.privateCacheTtlCount.length; ++i) if ($util.Long) (message.privateCacheTtlCount[i] = $util.Long.fromValue(object.privateCacheTtlCount[i])).unsigned = false;else if (typeof object.privateCacheTtlCount[i] === \"string\") message.privateCacheTtlCount[i] = parseInt(object.privateCacheTtlCount[i], 10);else if (typeof object.privateCacheTtlCount[i] === \"number\") message.privateCacheTtlCount[i] = object.privateCacheTtlCount[i];else if (typeof object.privateCacheTtlCount[i] === \"object\") message.privateCacheTtlCount[i] = new $util.LongBits(object.privateCacheTtlCount[i].low >>> 0, object.privateCacheTtlCount[i].high >>> 0).toNumber();\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a ClientNameStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ClientNameStats\n   * @static\n   * @param {ClientNameStats} message ClientNameStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  ClientNameStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.arrays || options.defaults) {\n      object.latencyCount = [];\n      object.cacheLatencyCount = [];\n      object.publicCacheTtlCount = [];\n      object.privateCacheTtlCount = [];\n    }\n\n    if (options.objects || options.defaults) {\n      object.requestsCountPerVersion = {};\n      object.cacheHitsPerVersion = {};\n      object.persistedQueryHitsPerVersion = {};\n      object.persistedQueryMissesPerVersion = {};\n      object.registeredOperationCountPerVersion = {};\n      object.forbiddenOperationCountPerVersion = {};\n    }\n\n    if (options.defaults) {\n      object.rootErrorStats = null;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n    }\n\n    if (message.latencyCount && message.latencyCount.length) {\n      object.latencyCount = [];\n\n      for (var j = 0; j < message.latencyCount.length; ++j) if (typeof message.latencyCount[j] === \"number\") object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];else object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n    }\n\n    var keys2;\n\n    if (message.requestsCountPerVersion && (keys2 = Object.keys(message.requestsCountPerVersion)).length) {\n      object.requestsCountPerVersion = {};\n\n      for (var j = 0; j < keys2.length; ++j) if (typeof message.requestsCountPerVersion[keys2[j]] === \"number\") object.requestsCountPerVersion[keys2[j]] = options.longs === String ? String(message.requestsCountPerVersion[keys2[j]]) : message.requestsCountPerVersion[keys2[j]];else object.requestsCountPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.requestsCountPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.requestsCountPerVersion[keys2[j]].low >>> 0, message.requestsCountPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.requestsCountPerVersion[keys2[j]];\n    }\n\n    if (message.cacheHitsPerVersion && (keys2 = Object.keys(message.cacheHitsPerVersion)).length) {\n      object.cacheHitsPerVersion = {};\n\n      for (var j = 0; j < keys2.length; ++j) if (typeof message.cacheHitsPerVersion[keys2[j]] === \"number\") object.cacheHitsPerVersion[keys2[j]] = options.longs === String ? String(message.cacheHitsPerVersion[keys2[j]]) : message.cacheHitsPerVersion[keys2[j]];else object.cacheHitsPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHitsPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.cacheHitsPerVersion[keys2[j]].low >>> 0, message.cacheHitsPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.cacheHitsPerVersion[keys2[j]];\n    }\n\n    if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n      object.cacheLatencyCount = [];\n\n      for (var j = 0; j < message.cacheLatencyCount.length; ++j) if (typeof message.cacheLatencyCount[j] === \"number\") object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];else object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n    }\n\n    if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n\n    if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n      object.publicCacheTtlCount = [];\n\n      for (var j = 0; j < message.publicCacheTtlCount.length; ++j) if (typeof message.publicCacheTtlCount[j] === \"number\") object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];else object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n    }\n\n    if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n      object.privateCacheTtlCount = [];\n\n      for (var j = 0; j < message.privateCacheTtlCount.length; ++j) if (typeof message.privateCacheTtlCount[j] === \"number\") object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];else object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n    }\n\n    if (message.persistedQueryHitsPerVersion && (keys2 = Object.keys(message.persistedQueryHitsPerVersion)).length) {\n      object.persistedQueryHitsPerVersion = {};\n\n      for (var j = 0; j < keys2.length; ++j) if (typeof message.persistedQueryHitsPerVersion[keys2[j]] === \"number\") object.persistedQueryHitsPerVersion[keys2[j]] = options.longs === String ? String(message.persistedQueryHitsPerVersion[keys2[j]]) : message.persistedQueryHitsPerVersion[keys2[j]];else object.persistedQueryHitsPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHitsPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.persistedQueryHitsPerVersion[keys2[j]].low >>> 0, message.persistedQueryHitsPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.persistedQueryHitsPerVersion[keys2[j]];\n    }\n\n    if (message.persistedQueryMissesPerVersion && (keys2 = Object.keys(message.persistedQueryMissesPerVersion)).length) {\n      object.persistedQueryMissesPerVersion = {};\n\n      for (var j = 0; j < keys2.length; ++j) if (typeof message.persistedQueryMissesPerVersion[keys2[j]] === \"number\") object.persistedQueryMissesPerVersion[keys2[j]] = options.longs === String ? String(message.persistedQueryMissesPerVersion[keys2[j]]) : message.persistedQueryMissesPerVersion[keys2[j]];else object.persistedQueryMissesPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMissesPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.persistedQueryMissesPerVersion[keys2[j]].low >>> 0, message.persistedQueryMissesPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.persistedQueryMissesPerVersion[keys2[j]];\n    }\n\n    if (message.registeredOperationCountPerVersion && (keys2 = Object.keys(message.registeredOperationCountPerVersion)).length) {\n      object.registeredOperationCountPerVersion = {};\n\n      for (var j = 0; j < keys2.length; ++j) if (typeof message.registeredOperationCountPerVersion[keys2[j]] === \"number\") object.registeredOperationCountPerVersion[keys2[j]] = options.longs === String ? String(message.registeredOperationCountPerVersion[keys2[j]]) : message.registeredOperationCountPerVersion[keys2[j]];else object.registeredOperationCountPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCountPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.registeredOperationCountPerVersion[keys2[j]].low >>> 0, message.registeredOperationCountPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.registeredOperationCountPerVersion[keys2[j]];\n    }\n\n    if (message.forbiddenOperationCountPerVersion && (keys2 = Object.keys(message.forbiddenOperationCountPerVersion)).length) {\n      object.forbiddenOperationCountPerVersion = {};\n\n      for (var j = 0; j < keys2.length; ++j) if (typeof message.forbiddenOperationCountPerVersion[keys2[j]] === \"number\") object.forbiddenOperationCountPerVersion[keys2[j]] = options.longs === String ? String(message.forbiddenOperationCountPerVersion[keys2[j]]) : message.forbiddenOperationCountPerVersion[keys2[j]];else object.forbiddenOperationCountPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCountPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCountPerVersion[keys2[j]].low >>> 0, message.forbiddenOperationCountPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.forbiddenOperationCountPerVersion[keys2[j]];\n    }\n\n    return object;\n  };\n  /**\n   * Converts this ClientNameStats to JSON.\n   * @function toJSON\n   * @memberof ClientNameStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  ClientNameStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return ClientNameStats;\n}();\n\n$root.QueryLatencyStats = function () {\n  /**\n   * Properties of a QueryLatencyStats.\n   * @exports IQueryLatencyStats\n   * @interface IQueryLatencyStats\n   * @property {Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n   * @property {number|null} [requestCount] QueryLatencyStats requestCount\n   * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n   * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n   * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n   * @property {Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n   * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n   * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n   * @property {Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n   * @property {Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n   * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n   * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n   */\n\n  /**\n   * Constructs a new QueryLatencyStats.\n   * @exports QueryLatencyStats\n   * @classdesc Represents a QueryLatencyStats.\n   * @implements IQueryLatencyStats\n   * @constructor\n   * @param {IQueryLatencyStats=} [properties] Properties to set\n   */\n  function QueryLatencyStats(properties) {\n    this.latencyCount = [];\n    this.cacheLatencyCount = [];\n    this.publicCacheTtlCount = [];\n    this.privateCacheTtlCount = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * QueryLatencyStats latencyCount.\n   * @member {Array.<number>} latencyCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n\n  QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n  /**\n   * QueryLatencyStats requestCount.\n   * @member {number} requestCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.requestCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats cacheHits.\n   * @member {number} cacheHits\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.cacheHits = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats persistedQueryHits.\n   * @member {number} persistedQueryHits\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.persistedQueryHits = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats persistedQueryMisses.\n   * @member {number} persistedQueryMisses\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.persistedQueryMisses = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats cacheLatencyCount.\n   * @member {Array.<number>} cacheLatencyCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n  /**\n   * QueryLatencyStats rootErrorStats.\n   * @member {IPathErrorStats|null|undefined} rootErrorStats\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.rootErrorStats = null;\n  /**\n   * QueryLatencyStats requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats publicCacheTtlCount.\n   * @member {Array.<number>} publicCacheTtlCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n  /**\n   * QueryLatencyStats privateCacheTtlCount.\n   * @member {Array.<number>} privateCacheTtlCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n  /**\n   * QueryLatencyStats registeredOperationCount.\n   * @member {number} registeredOperationCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.registeredOperationCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats forbiddenOperationCount.\n   * @member {number} forbiddenOperationCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.forbiddenOperationCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Creates a new QueryLatencyStats instance using the specified properties.\n   * @function create\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {IQueryLatencyStats=} [properties] Properties to set\n   * @returns {QueryLatencyStats} QueryLatencyStats instance\n   */\n\n  QueryLatencyStats.create = function create(properties) {\n    return new QueryLatencyStats(properties);\n  };\n  /**\n   * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n   * @function encode\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  QueryLatencyStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n\n    if (message.latencyCount != null && message.latencyCount.length) {\n      writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork();\n\n      for (var i = 0; i < message.latencyCount.length; ++i) writer.int64(message.latencyCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\")) writer.uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.requestCount);\n    if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\")) writer.uint32(\n    /* id 3, wireType 0 =*/\n    24).uint64(message.cacheHits);\n    if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\")) writer.uint32(\n    /* id 4, wireType 0 =*/\n    32).uint64(message.persistedQueryHits);\n    if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\")) writer.uint32(\n    /* id 5, wireType 0 =*/\n    40).uint64(message.persistedQueryMisses);\n\n    if (message.cacheLatencyCount != null && message.cacheLatencyCount.length) {\n      writer.uint32(\n      /* id 6, wireType 2 =*/\n      50).fork();\n\n      for (var i = 0; i < message.cacheLatencyCount.length; ++i) writer.int64(message.cacheLatencyCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\")) $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(\n    /* id 7, wireType 2 =*/\n    58).fork()).ldelim();\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32(\n    /* id 8, wireType 0 =*/\n    64).uint64(message.requestsWithErrorsCount);\n\n    if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.length) {\n      writer.uint32(\n      /* id 9, wireType 2 =*/\n      74).fork();\n\n      for (var i = 0; i < message.publicCacheTtlCount.length; ++i) writer.int64(message.publicCacheTtlCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.length) {\n      writer.uint32(\n      /* id 10, wireType 2 =*/\n      82).fork();\n\n      for (var i = 0; i < message.privateCacheTtlCount.length; ++i) writer.int64(message.privateCacheTtlCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\")) writer.uint32(\n    /* id 11, wireType 0 =*/\n    88).uint64(message.registeredOperationCount);\n    if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\")) writer.uint32(\n    /* id 12, wireType 0 =*/\n    96).uint64(message.forbiddenOperationCount);\n    return writer;\n  };\n  /**\n   * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a QueryLatencyStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {QueryLatencyStats} QueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  QueryLatencyStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.QueryLatencyStats();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          if (!(message.latencyCount && message.latencyCount.length)) message.latencyCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.latencyCount.push(reader.int64());\n          } else message.latencyCount.push(reader.int64());\n\n          break;\n\n        case 2:\n          message.requestCount = reader.uint64();\n          break;\n\n        case 3:\n          message.cacheHits = reader.uint64();\n          break;\n\n        case 4:\n          message.persistedQueryHits = reader.uint64();\n          break;\n\n        case 5:\n          message.persistedQueryMisses = reader.uint64();\n          break;\n\n        case 6:\n          if (!(message.cacheLatencyCount && message.cacheLatencyCount.length)) message.cacheLatencyCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.cacheLatencyCount.push(reader.int64());\n          } else message.cacheLatencyCount.push(reader.int64());\n\n          break;\n\n        case 7:\n          message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n          break;\n\n        case 8:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n\n        case 9:\n          if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length)) message.publicCacheTtlCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.publicCacheTtlCount.push(reader.int64());\n          } else message.publicCacheTtlCount.push(reader.int64());\n\n          break;\n\n        case 10:\n          if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length)) message.privateCacheTtlCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.privateCacheTtlCount.push(reader.int64());\n          } else message.privateCacheTtlCount.push(reader.int64());\n\n          break;\n\n        case 11:\n          message.registeredOperationCount = reader.uint64();\n          break;\n\n        case 12:\n          message.forbiddenOperationCount = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {QueryLatencyStats} QueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a QueryLatencyStats message.\n   * @function verify\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  QueryLatencyStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n      if (!Array.isArray(message.latencyCount)) return \"latencyCount: array expected\";\n\n      for (var i = 0; i < message.latencyCount.length; ++i) if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high))) return \"latencyCount: integer|Long[] expected\";\n    }\n\n    if (message.requestCount != null && message.hasOwnProperty(\"requestCount\")) if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high))) return \"requestCount: integer|Long expected\";\n    if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\")) if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high))) return \"cacheHits: integer|Long expected\";\n    if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\")) if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high))) return \"persistedQueryHits: integer|Long expected\";\n    if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\")) if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high))) return \"persistedQueryMisses: integer|Long expected\";\n\n    if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n      if (!Array.isArray(message.cacheLatencyCount)) return \"cacheLatencyCount: array expected\";\n\n      for (var i = 0; i < message.cacheLatencyCount.length; ++i) if (!$util.isInteger(message.cacheLatencyCount[i]) && !(message.cacheLatencyCount[i] && $util.isInteger(message.cacheLatencyCount[i].low) && $util.isInteger(message.cacheLatencyCount[i].high))) return \"cacheLatencyCount: integer|Long[] expected\";\n    }\n\n    if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n      var error = $root.PathErrorStats.verify(message.rootErrorStats);\n      if (error) return \"rootErrorStats.\" + error;\n    }\n\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n\n    if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n      if (!Array.isArray(message.publicCacheTtlCount)) return \"publicCacheTtlCount: array expected\";\n\n      for (var i = 0; i < message.publicCacheTtlCount.length; ++i) if (!$util.isInteger(message.publicCacheTtlCount[i]) && !(message.publicCacheTtlCount[i] && $util.isInteger(message.publicCacheTtlCount[i].low) && $util.isInteger(message.publicCacheTtlCount[i].high))) return \"publicCacheTtlCount: integer|Long[] expected\";\n    }\n\n    if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n      if (!Array.isArray(message.privateCacheTtlCount)) return \"privateCacheTtlCount: array expected\";\n\n      for (var i = 0; i < message.privateCacheTtlCount.length; ++i) if (!$util.isInteger(message.privateCacheTtlCount[i]) && !(message.privateCacheTtlCount[i] && $util.isInteger(message.privateCacheTtlCount[i].low) && $util.isInteger(message.privateCacheTtlCount[i].high))) return \"privateCacheTtlCount: integer|Long[] expected\";\n    }\n\n    if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\")) if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high))) return \"registeredOperationCount: integer|Long expected\";\n    if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\")) if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high))) return \"forbiddenOperationCount: integer|Long expected\";\n    return null;\n  };\n  /**\n   * Creates a QueryLatencyStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {QueryLatencyStats} QueryLatencyStats\n   */\n\n\n  QueryLatencyStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.QueryLatencyStats) return object;\n    var message = new $root.QueryLatencyStats();\n\n    if (object.latencyCount) {\n      if (!Array.isArray(object.latencyCount)) throw TypeError(\".QueryLatencyStats.latencyCount: array expected\");\n      message.latencyCount = [];\n\n      for (var i = 0; i < object.latencyCount.length; ++i) if ($util.Long) (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;else if (typeof object.latencyCount[i] === \"string\") message.latencyCount[i] = parseInt(object.latencyCount[i], 10);else if (typeof object.latencyCount[i] === \"number\") message.latencyCount[i] = object.latencyCount[i];else if (typeof object.latencyCount[i] === \"object\") message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.requestCount != null) if ($util.Long) (message.requestCount = $util.Long.fromValue(object.requestCount)).unsigned = true;else if (typeof object.requestCount === \"string\") message.requestCount = parseInt(object.requestCount, 10);else if (typeof object.requestCount === \"number\") message.requestCount = object.requestCount;else if (typeof object.requestCount === \"object\") message.requestCount = new $util.LongBits(object.requestCount.low >>> 0, object.requestCount.high >>> 0).toNumber(true);\n    if (object.cacheHits != null) if ($util.Long) (message.cacheHits = $util.Long.fromValue(object.cacheHits)).unsigned = true;else if (typeof object.cacheHits === \"string\") message.cacheHits = parseInt(object.cacheHits, 10);else if (typeof object.cacheHits === \"number\") message.cacheHits = object.cacheHits;else if (typeof object.cacheHits === \"object\") message.cacheHits = new $util.LongBits(object.cacheHits.low >>> 0, object.cacheHits.high >>> 0).toNumber(true);\n    if (object.persistedQueryHits != null) if ($util.Long) (message.persistedQueryHits = $util.Long.fromValue(object.persistedQueryHits)).unsigned = true;else if (typeof object.persistedQueryHits === \"string\") message.persistedQueryHits = parseInt(object.persistedQueryHits, 10);else if (typeof object.persistedQueryHits === \"number\") message.persistedQueryHits = object.persistedQueryHits;else if (typeof object.persistedQueryHits === \"object\") message.persistedQueryHits = new $util.LongBits(object.persistedQueryHits.low >>> 0, object.persistedQueryHits.high >>> 0).toNumber(true);\n    if (object.persistedQueryMisses != null) if ($util.Long) (message.persistedQueryMisses = $util.Long.fromValue(object.persistedQueryMisses)).unsigned = true;else if (typeof object.persistedQueryMisses === \"string\") message.persistedQueryMisses = parseInt(object.persistedQueryMisses, 10);else if (typeof object.persistedQueryMisses === \"number\") message.persistedQueryMisses = object.persistedQueryMisses;else if (typeof object.persistedQueryMisses === \"object\") message.persistedQueryMisses = new $util.LongBits(object.persistedQueryMisses.low >>> 0, object.persistedQueryMisses.high >>> 0).toNumber(true);\n\n    if (object.cacheLatencyCount) {\n      if (!Array.isArray(object.cacheLatencyCount)) throw TypeError(\".QueryLatencyStats.cacheLatencyCount: array expected\");\n      message.cacheLatencyCount = [];\n\n      for (var i = 0; i < object.cacheLatencyCount.length; ++i) if ($util.Long) (message.cacheLatencyCount[i] = $util.Long.fromValue(object.cacheLatencyCount[i])).unsigned = false;else if (typeof object.cacheLatencyCount[i] === \"string\") message.cacheLatencyCount[i] = parseInt(object.cacheLatencyCount[i], 10);else if (typeof object.cacheLatencyCount[i] === \"number\") message.cacheLatencyCount[i] = object.cacheLatencyCount[i];else if (typeof object.cacheLatencyCount[i] === \"object\") message.cacheLatencyCount[i] = new $util.LongBits(object.cacheLatencyCount[i].low >>> 0, object.cacheLatencyCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.rootErrorStats != null) {\n      if (typeof object.rootErrorStats !== \"object\") throw TypeError(\".QueryLatencyStats.rootErrorStats: object expected\");\n      message.rootErrorStats = $root.PathErrorStats.fromObject(object.rootErrorStats);\n    }\n\n    if (object.requestsWithErrorsCount != null) if ($util.Long) (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;else if (typeof object.requestsWithErrorsCount === \"string\") message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);else if (typeof object.requestsWithErrorsCount === \"number\") message.requestsWithErrorsCount = object.requestsWithErrorsCount;else if (typeof object.requestsWithErrorsCount === \"object\") message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n\n    if (object.publicCacheTtlCount) {\n      if (!Array.isArray(object.publicCacheTtlCount)) throw TypeError(\".QueryLatencyStats.publicCacheTtlCount: array expected\");\n      message.publicCacheTtlCount = [];\n\n      for (var i = 0; i < object.publicCacheTtlCount.length; ++i) if ($util.Long) (message.publicCacheTtlCount[i] = $util.Long.fromValue(object.publicCacheTtlCount[i])).unsigned = false;else if (typeof object.publicCacheTtlCount[i] === \"string\") message.publicCacheTtlCount[i] = parseInt(object.publicCacheTtlCount[i], 10);else if (typeof object.publicCacheTtlCount[i] === \"number\") message.publicCacheTtlCount[i] = object.publicCacheTtlCount[i];else if (typeof object.publicCacheTtlCount[i] === \"object\") message.publicCacheTtlCount[i] = new $util.LongBits(object.publicCacheTtlCount[i].low >>> 0, object.publicCacheTtlCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.privateCacheTtlCount) {\n      if (!Array.isArray(object.privateCacheTtlCount)) throw TypeError(\".QueryLatencyStats.privateCacheTtlCount: array expected\");\n      message.privateCacheTtlCount = [];\n\n      for (var i = 0; i < object.privateCacheTtlCount.length; ++i) if ($util.Long) (message.privateCacheTtlCount[i] = $util.Long.fromValue(object.privateCacheTtlCount[i])).unsigned = false;else if (typeof object.privateCacheTtlCount[i] === \"string\") message.privateCacheTtlCount[i] = parseInt(object.privateCacheTtlCount[i], 10);else if (typeof object.privateCacheTtlCount[i] === \"number\") message.privateCacheTtlCount[i] = object.privateCacheTtlCount[i];else if (typeof object.privateCacheTtlCount[i] === \"object\") message.privateCacheTtlCount[i] = new $util.LongBits(object.privateCacheTtlCount[i].low >>> 0, object.privateCacheTtlCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.registeredOperationCount != null) if ($util.Long) (message.registeredOperationCount = $util.Long.fromValue(object.registeredOperationCount)).unsigned = true;else if (typeof object.registeredOperationCount === \"string\") message.registeredOperationCount = parseInt(object.registeredOperationCount, 10);else if (typeof object.registeredOperationCount === \"number\") message.registeredOperationCount = object.registeredOperationCount;else if (typeof object.registeredOperationCount === \"object\") message.registeredOperationCount = new $util.LongBits(object.registeredOperationCount.low >>> 0, object.registeredOperationCount.high >>> 0).toNumber(true);\n    if (object.forbiddenOperationCount != null) if ($util.Long) (message.forbiddenOperationCount = $util.Long.fromValue(object.forbiddenOperationCount)).unsigned = true;else if (typeof object.forbiddenOperationCount === \"string\") message.forbiddenOperationCount = parseInt(object.forbiddenOperationCount, 10);else if (typeof object.forbiddenOperationCount === \"number\") message.forbiddenOperationCount = object.forbiddenOperationCount;else if (typeof object.forbiddenOperationCount === \"object\") message.forbiddenOperationCount = new $util.LongBits(object.forbiddenOperationCount.low >>> 0, object.forbiddenOperationCount.high >>> 0).toNumber(true);\n    return message;\n  };\n  /**\n   * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {QueryLatencyStats} message QueryLatencyStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  QueryLatencyStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.arrays || options.defaults) {\n      object.latencyCount = [];\n      object.cacheLatencyCount = [];\n      object.publicCacheTtlCount = [];\n      object.privateCacheTtlCount = [];\n    }\n\n    if (options.defaults) {\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.cacheHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.cacheHits = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.persistedQueryHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.persistedQueryHits = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.persistedQueryMisses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.persistedQueryMisses = options.longs === String ? \"0\" : 0;\n\n      object.rootErrorStats = null;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.registeredOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.registeredOperationCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.forbiddenOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.forbiddenOperationCount = options.longs === String ? \"0\" : 0;\n    }\n\n    if (message.latencyCount && message.latencyCount.length) {\n      object.latencyCount = [];\n\n      for (var j = 0; j < message.latencyCount.length; ++j) if (typeof message.latencyCount[j] === \"number\") object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];else object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n    }\n\n    if (message.requestCount != null && message.hasOwnProperty(\"requestCount\")) if (typeof message.requestCount === \"number\") object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;else object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n    if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\")) if (typeof message.cacheHits === \"number\") object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;else object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n    if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\")) if (typeof message.persistedQueryHits === \"number\") object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;else object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n    if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\")) if (typeof message.persistedQueryMisses === \"number\") object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;else object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n\n    if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n      object.cacheLatencyCount = [];\n\n      for (var j = 0; j < message.cacheLatencyCount.length; ++j) if (typeof message.cacheLatencyCount[j] === \"number\") object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];else object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n    }\n\n    if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n\n    if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n      object.publicCacheTtlCount = [];\n\n      for (var j = 0; j < message.publicCacheTtlCount.length; ++j) if (typeof message.publicCacheTtlCount[j] === \"number\") object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];else object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n    }\n\n    if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n      object.privateCacheTtlCount = [];\n\n      for (var j = 0; j < message.privateCacheTtlCount.length; ++j) if (typeof message.privateCacheTtlCount[j] === \"number\") object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];else object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n    }\n\n    if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\")) if (typeof message.registeredOperationCount === \"number\") object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;else object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n    if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\")) if (typeof message.forbiddenOperationCount === \"number\") object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;else object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n    return object;\n  };\n  /**\n   * Converts this QueryLatencyStats to JSON.\n   * @function toJSON\n   * @memberof QueryLatencyStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  QueryLatencyStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return QueryLatencyStats;\n}();\n\n$root.StatsContext = function () {\n  /**\n   * Properties of a StatsContext.\n   * @exports IStatsContext\n   * @interface IStatsContext\n   * @property {string|null} [clientReferenceId] StatsContext clientReferenceId\n   * @property {string|null} [clientName] StatsContext clientName\n   * @property {string|null} [clientVersion] StatsContext clientVersion\n   */\n\n  /**\n   * Constructs a new StatsContext.\n   * @exports StatsContext\n   * @classdesc Represents a StatsContext.\n   * @implements IStatsContext\n   * @constructor\n   * @param {IStatsContext=} [properties] Properties to set\n   */\n  function StatsContext(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * StatsContext clientReferenceId.\n   * @member {string} clientReferenceId\n   * @memberof StatsContext\n   * @instance\n   */\n\n\n  StatsContext.prototype.clientReferenceId = \"\";\n  /**\n   * StatsContext clientName.\n   * @member {string} clientName\n   * @memberof StatsContext\n   * @instance\n   */\n\n  StatsContext.prototype.clientName = \"\";\n  /**\n   * StatsContext clientVersion.\n   * @member {string} clientVersion\n   * @memberof StatsContext\n   * @instance\n   */\n\n  StatsContext.prototype.clientVersion = \"\";\n  /**\n   * Creates a new StatsContext instance using the specified properties.\n   * @function create\n   * @memberof StatsContext\n   * @static\n   * @param {IStatsContext=} [properties] Properties to set\n   * @returns {StatsContext} StatsContext instance\n   */\n\n  StatsContext.create = function create(properties) {\n    return new StatsContext(properties);\n  };\n  /**\n   * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n   * @function encode\n   * @memberof StatsContext\n   * @static\n   * @param {IStatsContext} message StatsContext message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  StatsContext.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.clientReferenceId != null && Object.hasOwnProperty.call(message, \"clientReferenceId\")) writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).string(message.clientReferenceId);\n    if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\")) writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).string(message.clientName);\n    if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\")) writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).string(message.clientVersion);\n    return writer;\n  };\n  /**\n   * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof StatsContext\n   * @static\n   * @param {IStatsContext} message StatsContext message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a StatsContext message from the specified reader or buffer.\n   * @function decode\n   * @memberof StatsContext\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {StatsContext} StatsContext\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  StatsContext.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.StatsContext();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.clientReferenceId = reader.string();\n          break;\n\n        case 2:\n          message.clientName = reader.string();\n          break;\n\n        case 3:\n          message.clientVersion = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof StatsContext\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {StatsContext} StatsContext\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  StatsContext.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a StatsContext message.\n   * @function verify\n   * @memberof StatsContext\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  StatsContext.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\")) if (!$util.isString(message.clientReferenceId)) return \"clientReferenceId: string expected\";\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) if (!$util.isString(message.clientName)) return \"clientName: string expected\";\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) if (!$util.isString(message.clientVersion)) return \"clientVersion: string expected\";\n    return null;\n  };\n  /**\n   * Creates a StatsContext message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof StatsContext\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {StatsContext} StatsContext\n   */\n\n\n  StatsContext.fromObject = function fromObject(object) {\n    if (object instanceof $root.StatsContext) return object;\n    var message = new $root.StatsContext();\n    if (object.clientReferenceId != null) message.clientReferenceId = String(object.clientReferenceId);\n    if (object.clientName != null) message.clientName = String(object.clientName);\n    if (object.clientVersion != null) message.clientVersion = String(object.clientVersion);\n    return message;\n  };\n  /**\n   * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof StatsContext\n   * @static\n   * @param {StatsContext} message StatsContext\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  StatsContext.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.clientReferenceId = \"\";\n      object.clientName = \"\";\n      object.clientVersion = \"\";\n    }\n\n    if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\")) object.clientReferenceId = message.clientReferenceId;\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) object.clientName = message.clientName;\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) object.clientVersion = message.clientVersion;\n    return object;\n  };\n  /**\n   * Converts this StatsContext to JSON.\n   * @function toJSON\n   * @memberof StatsContext\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  StatsContext.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return StatsContext;\n}();\n\n$root.ContextualizedQueryLatencyStats = function () {\n  /**\n   * Properties of a ContextualizedQueryLatencyStats.\n   * @exports IContextualizedQueryLatencyStats\n   * @interface IContextualizedQueryLatencyStats\n   * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n   * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n   */\n\n  /**\n   * Constructs a new ContextualizedQueryLatencyStats.\n   * @exports ContextualizedQueryLatencyStats\n   * @classdesc Represents a ContextualizedQueryLatencyStats.\n   * @implements IContextualizedQueryLatencyStats\n   * @constructor\n   * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n   */\n  function ContextualizedQueryLatencyStats(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * ContextualizedQueryLatencyStats queryLatencyStats.\n   * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n   * @memberof ContextualizedQueryLatencyStats\n   * @instance\n   */\n\n\n  ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n  /**\n   * ContextualizedQueryLatencyStats context.\n   * @member {IStatsContext|null|undefined} context\n   * @memberof ContextualizedQueryLatencyStats\n   * @instance\n   */\n\n  ContextualizedQueryLatencyStats.prototype.context = null;\n  /**\n   * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n   * @function create\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n   */\n\n  ContextualizedQueryLatencyStats.create = function create(properties) {\n    return new ContextualizedQueryLatencyStats(properties);\n  };\n  /**\n   * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n   * @function encode\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\")) $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.context != null && Object.hasOwnProperty.call(message, \"context\")) $root.StatsContext.encode(message.context, writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ContextualizedQueryLatencyStats();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.context = $root.StatsContext.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a ContextualizedQueryLatencyStats message.\n   * @function verify\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  ContextualizedQueryLatencyStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n      var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n      if (error) return \"queryLatencyStats.\" + error;\n    }\n\n    if (message.context != null && message.hasOwnProperty(\"context\")) {\n      var error = $root.StatsContext.verify(message.context);\n      if (error) return \"context.\" + error;\n    }\n\n    return null;\n  };\n  /**\n   * Creates a ContextualizedQueryLatencyStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n   */\n\n\n  ContextualizedQueryLatencyStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.ContextualizedQueryLatencyStats) return object;\n    var message = new $root.ContextualizedQueryLatencyStats();\n\n    if (object.queryLatencyStats != null) {\n      if (typeof object.queryLatencyStats !== \"object\") throw TypeError(\".ContextualizedQueryLatencyStats.queryLatencyStats: object expected\");\n      message.queryLatencyStats = $root.QueryLatencyStats.fromObject(object.queryLatencyStats);\n    }\n\n    if (object.context != null) {\n      if (typeof object.context !== \"object\") throw TypeError(\".ContextualizedQueryLatencyStats.context: object expected\");\n      message.context = $root.StatsContext.fromObject(object.context);\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.queryLatencyStats = null;\n      object.context = null;\n    }\n\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n    if (message.context != null && message.hasOwnProperty(\"context\")) object.context = $root.StatsContext.toObject(message.context, options);\n    return object;\n  };\n  /**\n   * Converts this ContextualizedQueryLatencyStats to JSON.\n   * @function toJSON\n   * @memberof ContextualizedQueryLatencyStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return ContextualizedQueryLatencyStats;\n}();\n\n$root.ContextualizedTypeStats = function () {\n  /**\n   * Properties of a ContextualizedTypeStats.\n   * @exports IContextualizedTypeStats\n   * @interface IContextualizedTypeStats\n   * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n   * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n   */\n\n  /**\n   * Constructs a new ContextualizedTypeStats.\n   * @exports ContextualizedTypeStats\n   * @classdesc Represents a ContextualizedTypeStats.\n   * @implements IContextualizedTypeStats\n   * @constructor\n   * @param {IContextualizedTypeStats=} [properties] Properties to set\n   */\n  function ContextualizedTypeStats(properties) {\n    this.perTypeStat = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * ContextualizedTypeStats context.\n   * @member {IStatsContext|null|undefined} context\n   * @memberof ContextualizedTypeStats\n   * @instance\n   */\n\n\n  ContextualizedTypeStats.prototype.context = null;\n  /**\n   * ContextualizedTypeStats perTypeStat.\n   * @member {Object.<string,ITypeStat>} perTypeStat\n   * @memberof ContextualizedTypeStats\n   * @instance\n   */\n\n  ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n  /**\n   * Creates a new ContextualizedTypeStats instance using the specified properties.\n   * @function create\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {IContextualizedTypeStats=} [properties] Properties to set\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n   */\n\n  ContextualizedTypeStats.create = function create(properties) {\n    return new ContextualizedTypeStats(properties);\n  };\n  /**\n   * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n   * @function encode\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedTypeStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.context != null && Object.hasOwnProperty.call(message, \"context\")) $root.StatsContext.encode(message.context, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\")) for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n  /**\n   * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedTypeStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ContextualizedTypeStats(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.context = $root.StatsContext.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          reader.skip().pos++;\n          if (message.perTypeStat === $util.emptyObject) message.perTypeStat = {};\n          key = reader.string();\n          reader.pos++;\n          message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a ContextualizedTypeStats message.\n   * @function verify\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  ContextualizedTypeStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.context != null && message.hasOwnProperty(\"context\")) {\n      var error = $root.StatsContext.verify(message.context);\n      if (error) return \"context.\" + error;\n    }\n\n    if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n      if (!$util.isObject(message.perTypeStat)) return \"perTypeStat: object expected\";\n      var key = Object.keys(message.perTypeStat);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n        if (error) return \"perTypeStat.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a ContextualizedTypeStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n   */\n\n\n  ContextualizedTypeStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.ContextualizedTypeStats) return object;\n    var message = new $root.ContextualizedTypeStats();\n\n    if (object.context != null) {\n      if (typeof object.context !== \"object\") throw TypeError(\".ContextualizedTypeStats.context: object expected\");\n      message.context = $root.StatsContext.fromObject(object.context);\n    }\n\n    if (object.perTypeStat) {\n      if (typeof object.perTypeStat !== \"object\") throw TypeError(\".ContextualizedTypeStats.perTypeStat: object expected\");\n      message.perTypeStat = {};\n\n      for (var keys = Object.keys(object.perTypeStat), i = 0; i < keys.length; ++i) {\n        if (typeof object.perTypeStat[keys[i]] !== \"object\") throw TypeError(\".ContextualizedTypeStats.perTypeStat: object expected\");\n        message.perTypeStat[keys[i]] = $root.TypeStat.fromObject(object.perTypeStat[keys[i]]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  ContextualizedTypeStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.perTypeStat = {};\n    if (options.defaults) object.context = null;\n    if (message.context != null && message.hasOwnProperty(\"context\")) object.context = $root.StatsContext.toObject(message.context, options);\n    var keys2;\n\n    if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n      object.perTypeStat = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this ContextualizedTypeStats to JSON.\n   * @function toJSON\n   * @memberof ContextualizedTypeStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return ContextualizedTypeStats;\n}();\n\n$root.FieldStat = function () {\n  /**\n   * Properties of a FieldStat.\n   * @exports IFieldStat\n   * @interface IFieldStat\n   * @property {string|null} [name] FieldStat name\n   * @property {string|null} [returnType] FieldStat returnType\n   * @property {number|null} [errorsCount] FieldStat errorsCount\n   * @property {number|null} [count] FieldStat count\n   * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n   * @property {Array.<number>|null} [latencyCount] FieldStat latencyCount\n   */\n\n  /**\n   * Constructs a new FieldStat.\n   * @exports FieldStat\n   * @classdesc Represents a FieldStat.\n   * @implements IFieldStat\n   * @constructor\n   * @param {IFieldStat=} [properties] Properties to set\n   */\n  function FieldStat(properties) {\n    this.latencyCount = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * FieldStat name.\n   * @member {string} name\n   * @memberof FieldStat\n   * @instance\n   */\n\n\n  FieldStat.prototype.name = \"\";\n  /**\n   * FieldStat returnType.\n   * @member {string} returnType\n   * @memberof FieldStat\n   * @instance\n   */\n\n  FieldStat.prototype.returnType = \"\";\n  /**\n   * FieldStat errorsCount.\n   * @member {number} errorsCount\n   * @memberof FieldStat\n   * @instance\n   */\n\n  FieldStat.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * FieldStat count.\n   * @member {number} count\n   * @memberof FieldStat\n   * @instance\n   */\n\n  FieldStat.prototype.count = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * FieldStat requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof FieldStat\n   * @instance\n   */\n\n  FieldStat.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * FieldStat latencyCount.\n   * @member {Array.<number>} latencyCount\n   * @memberof FieldStat\n   * @instance\n   */\n\n  FieldStat.prototype.latencyCount = $util.emptyArray;\n  /**\n   * Creates a new FieldStat instance using the specified properties.\n   * @function create\n   * @memberof FieldStat\n   * @static\n   * @param {IFieldStat=} [properties] Properties to set\n   * @returns {FieldStat} FieldStat instance\n   */\n\n  FieldStat.create = function create(properties) {\n    return new FieldStat(properties);\n  };\n  /**\n   * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n   * @function encode\n   * @memberof FieldStat\n   * @static\n   * @param {IFieldStat} message FieldStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  FieldStat.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).string(message.name);\n    if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\")) writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).string(message.returnType);\n    if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\")) writer.uint32(\n    /* id 4, wireType 0 =*/\n    32).uint64(message.errorsCount);\n    if (message.count != null && Object.hasOwnProperty.call(message, \"count\")) writer.uint32(\n    /* id 5, wireType 0 =*/\n    40).uint64(message.count);\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32(\n    /* id 6, wireType 0 =*/\n    48).uint64(message.requestsWithErrorsCount);\n\n    if (message.latencyCount != null && message.latencyCount.length) {\n      writer.uint32(\n      /* id 8, wireType 2 =*/\n      66).fork();\n\n      for (var i = 0; i < message.latencyCount.length; ++i) writer.int64(message.latencyCount[i]);\n\n      writer.ldelim();\n    }\n\n    return writer;\n  };\n  /**\n   * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof FieldStat\n   * @static\n   * @param {IFieldStat} message FieldStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a FieldStat message from the specified reader or buffer.\n   * @function decode\n   * @memberof FieldStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {FieldStat} FieldStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  FieldStat.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.FieldStat();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 2:\n          message.name = reader.string();\n          break;\n\n        case 3:\n          message.returnType = reader.string();\n          break;\n\n        case 4:\n          message.errorsCount = reader.uint64();\n          break;\n\n        case 5:\n          message.count = reader.uint64();\n          break;\n\n        case 6:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n\n        case 8:\n          if (!(message.latencyCount && message.latencyCount.length)) message.latencyCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.latencyCount.push(reader.int64());\n          } else message.latencyCount.push(reader.int64());\n\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof FieldStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {FieldStat} FieldStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  FieldStat.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a FieldStat message.\n   * @function verify\n   * @memberof FieldStat\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  FieldStat.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) if (!$util.isString(message.returnType)) return \"returnType: string expected\";\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high))) return \"errorsCount: integer|Long expected\";\n    if (message.count != null && message.hasOwnProperty(\"count\")) if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high))) return \"count: integer|Long expected\";\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n\n    if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n      if (!Array.isArray(message.latencyCount)) return \"latencyCount: array expected\";\n\n      for (var i = 0; i < message.latencyCount.length; ++i) if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high))) return \"latencyCount: integer|Long[] expected\";\n    }\n\n    return null;\n  };\n  /**\n   * Creates a FieldStat message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof FieldStat\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {FieldStat} FieldStat\n   */\n\n\n  FieldStat.fromObject = function fromObject(object) {\n    if (object instanceof $root.FieldStat) return object;\n    var message = new $root.FieldStat();\n    if (object.name != null) message.name = String(object.name);\n    if (object.returnType != null) message.returnType = String(object.returnType);\n    if (object.errorsCount != null) if ($util.Long) (message.errorsCount = $util.Long.fromValue(object.errorsCount)).unsigned = true;else if (typeof object.errorsCount === \"string\") message.errorsCount = parseInt(object.errorsCount, 10);else if (typeof object.errorsCount === \"number\") message.errorsCount = object.errorsCount;else if (typeof object.errorsCount === \"object\") message.errorsCount = new $util.LongBits(object.errorsCount.low >>> 0, object.errorsCount.high >>> 0).toNumber(true);\n    if (object.count != null) if ($util.Long) (message.count = $util.Long.fromValue(object.count)).unsigned = true;else if (typeof object.count === \"string\") message.count = parseInt(object.count, 10);else if (typeof object.count === \"number\") message.count = object.count;else if (typeof object.count === \"object\") message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber(true);\n    if (object.requestsWithErrorsCount != null) if ($util.Long) (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;else if (typeof object.requestsWithErrorsCount === \"string\") message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);else if (typeof object.requestsWithErrorsCount === \"number\") message.requestsWithErrorsCount = object.requestsWithErrorsCount;else if (typeof object.requestsWithErrorsCount === \"object\") message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n\n    if (object.latencyCount) {\n      if (!Array.isArray(object.latencyCount)) throw TypeError(\".FieldStat.latencyCount: array expected\");\n      message.latencyCount = [];\n\n      for (var i = 0; i < object.latencyCount.length; ++i) if ($util.Long) (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;else if (typeof object.latencyCount[i] === \"string\") message.latencyCount[i] = parseInt(object.latencyCount[i], 10);else if (typeof object.latencyCount[i] === \"number\") message.latencyCount[i] = object.latencyCount[i];else if (typeof object.latencyCount[i] === \"object\") message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof FieldStat\n   * @static\n   * @param {FieldStat} message FieldStat\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  FieldStat.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.latencyCount = [];\n\n    if (options.defaults) {\n      object.name = \"\";\n      object.returnType = \"\";\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.errorsCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.count = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n    }\n\n    if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) object.returnType = message.returnType;\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (typeof message.errorsCount === \"number\") object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;else object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n    if (message.count != null && message.hasOwnProperty(\"count\")) if (typeof message.count === \"number\") object.count = options.longs === String ? String(message.count) : message.count;else object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber(true) : message.count;\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n\n    if (message.latencyCount && message.latencyCount.length) {\n      object.latencyCount = [];\n\n      for (var j = 0; j < message.latencyCount.length; ++j) if (typeof message.latencyCount[j] === \"number\") object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];else object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n    }\n\n    return object;\n  };\n  /**\n   * Converts this FieldStat to JSON.\n   * @function toJSON\n   * @memberof FieldStat\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  FieldStat.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return FieldStat;\n}();\n\n$root.TypeStat = function () {\n  /**\n   * Properties of a TypeStat.\n   * @exports ITypeStat\n   * @interface ITypeStat\n   * @property {string|null} [name] TypeStat name\n   * @property {Array.<IFieldStat>|null} [field] TypeStat field\n   * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n   */\n\n  /**\n   * Constructs a new TypeStat.\n   * @exports TypeStat\n   * @classdesc Represents a TypeStat.\n   * @implements ITypeStat\n   * @constructor\n   * @param {ITypeStat=} [properties] Properties to set\n   */\n  function TypeStat(properties) {\n    this.field = [];\n    this.perFieldStat = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * TypeStat name.\n   * @member {string} name\n   * @memberof TypeStat\n   * @instance\n   */\n\n\n  TypeStat.prototype.name = \"\";\n  /**\n   * TypeStat field.\n   * @member {Array.<IFieldStat>} field\n   * @memberof TypeStat\n   * @instance\n   */\n\n  TypeStat.prototype.field = $util.emptyArray;\n  /**\n   * TypeStat perFieldStat.\n   * @member {Object.<string,IFieldStat>} perFieldStat\n   * @memberof TypeStat\n   * @instance\n   */\n\n  TypeStat.prototype.perFieldStat = $util.emptyObject;\n  /**\n   * Creates a new TypeStat instance using the specified properties.\n   * @function create\n   * @memberof TypeStat\n   * @static\n   * @param {ITypeStat=} [properties] Properties to set\n   * @returns {TypeStat} TypeStat instance\n   */\n\n  TypeStat.create = function create(properties) {\n    return new TypeStat(properties);\n  };\n  /**\n   * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n   * @function encode\n   * @memberof TypeStat\n   * @static\n   * @param {ITypeStat} message TypeStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TypeStat.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).string(message.name);\n    if (message.field != null && message.field.length) for (var i = 0; i < message.field.length; ++i) $root.FieldStat.encode(message.field[i], writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\")) for (var keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n  /**\n   * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof TypeStat\n   * @static\n   * @param {ITypeStat} message TypeStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a TypeStat message from the specified reader or buffer.\n   * @function decode\n   * @memberof TypeStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {TypeStat} TypeStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TypeStat.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.TypeStat(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.name = reader.string();\n          break;\n\n        case 2:\n          if (!(message.field && message.field.length)) message.field = [];\n          message.field.push($root.FieldStat.decode(reader, reader.uint32()));\n          break;\n\n        case 3:\n          reader.skip().pos++;\n          if (message.perFieldStat === $util.emptyObject) message.perFieldStat = {};\n          key = reader.string();\n          reader.pos++;\n          message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof TypeStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {TypeStat} TypeStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TypeStat.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a TypeStat message.\n   * @function verify\n   * @memberof TypeStat\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  TypeStat.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n\n    if (message.field != null && message.hasOwnProperty(\"field\")) {\n      if (!Array.isArray(message.field)) return \"field: array expected\";\n\n      for (var i = 0; i < message.field.length; ++i) {\n        var error = $root.FieldStat.verify(message.field[i]);\n        if (error) return \"field.\" + error;\n      }\n    }\n\n    if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n      if (!$util.isObject(message.perFieldStat)) return \"perFieldStat: object expected\";\n      var key = Object.keys(message.perFieldStat);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n        if (error) return \"perFieldStat.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a TypeStat message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof TypeStat\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {TypeStat} TypeStat\n   */\n\n\n  TypeStat.fromObject = function fromObject(object) {\n    if (object instanceof $root.TypeStat) return object;\n    var message = new $root.TypeStat();\n    if (object.name != null) message.name = String(object.name);\n\n    if (object.field) {\n      if (!Array.isArray(object.field)) throw TypeError(\".TypeStat.field: array expected\");\n      message.field = [];\n\n      for (var i = 0; i < object.field.length; ++i) {\n        if (typeof object.field[i] !== \"object\") throw TypeError(\".TypeStat.field: object expected\");\n        message.field[i] = $root.FieldStat.fromObject(object.field[i]);\n      }\n    }\n\n    if (object.perFieldStat) {\n      if (typeof object.perFieldStat !== \"object\") throw TypeError(\".TypeStat.perFieldStat: object expected\");\n      message.perFieldStat = {};\n\n      for (var keys = Object.keys(object.perFieldStat), i = 0; i < keys.length; ++i) {\n        if (typeof object.perFieldStat[keys[i]] !== \"object\") throw TypeError(\".TypeStat.perFieldStat: object expected\");\n        message.perFieldStat[keys[i]] = $root.FieldStat.fromObject(object.perFieldStat[keys[i]]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof TypeStat\n   * @static\n   * @param {TypeStat} message TypeStat\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  TypeStat.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.field = [];\n    if (options.objects || options.defaults) object.perFieldStat = {};\n    if (options.defaults) object.name = \"\";\n    if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n\n    if (message.field && message.field.length) {\n      object.field = [];\n\n      for (var j = 0; j < message.field.length; ++j) object.field[j] = $root.FieldStat.toObject(message.field[j], options);\n    }\n\n    var keys2;\n\n    if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n      object.perFieldStat = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this TypeStat to JSON.\n   * @function toJSON\n   * @memberof TypeStat\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  TypeStat.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return TypeStat;\n}();\n\n$root.QueryStats = function () {\n  /**\n   * Properties of a QueryStats.\n   * @exports IQueryStats\n   * @interface IQueryStats\n   * @property {Object.<string,IClientNameStats>|null} [perClientName] QueryStats perClientName\n   * @property {Array.<IContextualizedQueryLatencyStats>|null} [queryStatsWithContext] QueryStats queryStatsWithContext\n   * @property {Array.<ITypeStat>|null} [perType] QueryStats perType\n   * @property {Object.<string,ITypeStat>|null} [perTypeStat] QueryStats perTypeStat\n   * @property {Array.<IContextualizedTypeStats>|null} [typeStatsWithContext] QueryStats typeStatsWithContext\n   */\n\n  /**\n   * Constructs a new QueryStats.\n   * @exports QueryStats\n   * @classdesc Represents a QueryStats.\n   * @implements IQueryStats\n   * @constructor\n   * @param {IQueryStats=} [properties] Properties to set\n   */\n  function QueryStats(properties) {\n    this.perClientName = {};\n    this.queryStatsWithContext = [];\n    this.perType = [];\n    this.perTypeStat = {};\n    this.typeStatsWithContext = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * QueryStats perClientName.\n   * @member {Object.<string,IClientNameStats>} perClientName\n   * @memberof QueryStats\n   * @instance\n   */\n\n\n  QueryStats.prototype.perClientName = $util.emptyObject;\n  /**\n   * QueryStats queryStatsWithContext.\n   * @member {Array.<IContextualizedQueryLatencyStats>} queryStatsWithContext\n   * @memberof QueryStats\n   * @instance\n   */\n\n  QueryStats.prototype.queryStatsWithContext = $util.emptyArray;\n  /**\n   * QueryStats perType.\n   * @member {Array.<ITypeStat>} perType\n   * @memberof QueryStats\n   * @instance\n   */\n\n  QueryStats.prototype.perType = $util.emptyArray;\n  /**\n   * QueryStats perTypeStat.\n   * @member {Object.<string,ITypeStat>} perTypeStat\n   * @memberof QueryStats\n   * @instance\n   */\n\n  QueryStats.prototype.perTypeStat = $util.emptyObject;\n  /**\n   * QueryStats typeStatsWithContext.\n   * @member {Array.<IContextualizedTypeStats>} typeStatsWithContext\n   * @memberof QueryStats\n   * @instance\n   */\n\n  QueryStats.prototype.typeStatsWithContext = $util.emptyArray;\n  /**\n   * Creates a new QueryStats instance using the specified properties.\n   * @function create\n   * @memberof QueryStats\n   * @static\n   * @param {IQueryStats=} [properties] Properties to set\n   * @returns {QueryStats} QueryStats instance\n   */\n\n  QueryStats.create = function create(properties) {\n    return new QueryStats(properties);\n  };\n  /**\n   * Encodes the specified QueryStats message. Does not implicitly {@link QueryStats.verify|verify} messages.\n   * @function encode\n   * @memberof QueryStats\n   * @static\n   * @param {IQueryStats} message QueryStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  QueryStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.perClientName != null && Object.hasOwnProperty.call(message, \"perClientName\")) for (var keys = Object.keys(message.perClientName), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.ClientNameStats.encode(message.perClientName[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    if (message.perType != null && message.perType.length) for (var i = 0; i < message.perType.length; ++i) $root.TypeStat.encode(message.perType[i], writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\")) for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    if (message.queryStatsWithContext != null && message.queryStatsWithContext.length) for (var i = 0; i < message.queryStatsWithContext.length; ++i) $root.ContextualizedQueryLatencyStats.encode(message.queryStatsWithContext[i], writer.uint32(\n    /* id 4, wireType 2 =*/\n    34).fork()).ldelim();\n    if (message.typeStatsWithContext != null && message.typeStatsWithContext.length) for (var i = 0; i < message.typeStatsWithContext.length; ++i) $root.ContextualizedTypeStats.encode(message.typeStatsWithContext[i], writer.uint32(\n    /* id 5, wireType 2 =*/\n    42).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified QueryStats message, length delimited. Does not implicitly {@link QueryStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof QueryStats\n   * @static\n   * @param {IQueryStats} message QueryStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  QueryStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a QueryStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof QueryStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {QueryStats} QueryStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  QueryStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.QueryStats(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          reader.skip().pos++;\n          if (message.perClientName === $util.emptyObject) message.perClientName = {};\n          key = reader.string();\n          reader.pos++;\n          message.perClientName[key] = $root.ClientNameStats.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          if (!(message.queryStatsWithContext && message.queryStatsWithContext.length)) message.queryStatsWithContext = [];\n          message.queryStatsWithContext.push($root.ContextualizedQueryLatencyStats.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          if (!(message.perType && message.perType.length)) message.perType = [];\n          message.perType.push($root.TypeStat.decode(reader, reader.uint32()));\n          break;\n\n        case 3:\n          reader.skip().pos++;\n          if (message.perTypeStat === $util.emptyObject) message.perTypeStat = {};\n          key = reader.string();\n          reader.pos++;\n          message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n          break;\n\n        case 5:\n          if (!(message.typeStatsWithContext && message.typeStatsWithContext.length)) message.typeStatsWithContext = [];\n          message.typeStatsWithContext.push($root.ContextualizedTypeStats.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a QueryStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof QueryStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {QueryStats} QueryStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  QueryStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a QueryStats message.\n   * @function verify\n   * @memberof QueryStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  QueryStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.perClientName != null && message.hasOwnProperty(\"perClientName\")) {\n      if (!$util.isObject(message.perClientName)) return \"perClientName: object expected\";\n      var key = Object.keys(message.perClientName);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.ClientNameStats.verify(message.perClientName[key[i]]);\n        if (error) return \"perClientName.\" + error;\n      }\n    }\n\n    if (message.queryStatsWithContext != null && message.hasOwnProperty(\"queryStatsWithContext\")) {\n      if (!Array.isArray(message.queryStatsWithContext)) return \"queryStatsWithContext: array expected\";\n\n      for (var i = 0; i < message.queryStatsWithContext.length; ++i) {\n        var error = $root.ContextualizedQueryLatencyStats.verify(message.queryStatsWithContext[i]);\n        if (error) return \"queryStatsWithContext.\" + error;\n      }\n    }\n\n    if (message.perType != null && message.hasOwnProperty(\"perType\")) {\n      if (!Array.isArray(message.perType)) return \"perType: array expected\";\n\n      for (var i = 0; i < message.perType.length; ++i) {\n        var error = $root.TypeStat.verify(message.perType[i]);\n        if (error) return \"perType.\" + error;\n      }\n    }\n\n    if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n      if (!$util.isObject(message.perTypeStat)) return \"perTypeStat: object expected\";\n      var key = Object.keys(message.perTypeStat);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n        if (error) return \"perTypeStat.\" + error;\n      }\n    }\n\n    if (message.typeStatsWithContext != null && message.hasOwnProperty(\"typeStatsWithContext\")) {\n      if (!Array.isArray(message.typeStatsWithContext)) return \"typeStatsWithContext: array expected\";\n\n      for (var i = 0; i < message.typeStatsWithContext.length; ++i) {\n        var error = $root.ContextualizedTypeStats.verify(message.typeStatsWithContext[i]);\n        if (error) return \"typeStatsWithContext.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a QueryStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof QueryStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {QueryStats} QueryStats\n   */\n\n\n  QueryStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.QueryStats) return object;\n    var message = new $root.QueryStats();\n\n    if (object.perClientName) {\n      if (typeof object.perClientName !== \"object\") throw TypeError(\".QueryStats.perClientName: object expected\");\n      message.perClientName = {};\n\n      for (var keys = Object.keys(object.perClientName), i = 0; i < keys.length; ++i) {\n        if (typeof object.perClientName[keys[i]] !== \"object\") throw TypeError(\".QueryStats.perClientName: object expected\");\n        message.perClientName[keys[i]] = $root.ClientNameStats.fromObject(object.perClientName[keys[i]]);\n      }\n    }\n\n    if (object.queryStatsWithContext) {\n      if (!Array.isArray(object.queryStatsWithContext)) throw TypeError(\".QueryStats.queryStatsWithContext: array expected\");\n      message.queryStatsWithContext = [];\n\n      for (var i = 0; i < object.queryStatsWithContext.length; ++i) {\n        if (typeof object.queryStatsWithContext[i] !== \"object\") throw TypeError(\".QueryStats.queryStatsWithContext: object expected\");\n        message.queryStatsWithContext[i] = $root.ContextualizedQueryLatencyStats.fromObject(object.queryStatsWithContext[i]);\n      }\n    }\n\n    if (object.perType) {\n      if (!Array.isArray(object.perType)) throw TypeError(\".QueryStats.perType: array expected\");\n      message.perType = [];\n\n      for (var i = 0; i < object.perType.length; ++i) {\n        if (typeof object.perType[i] !== \"object\") throw TypeError(\".QueryStats.perType: object expected\");\n        message.perType[i] = $root.TypeStat.fromObject(object.perType[i]);\n      }\n    }\n\n    if (object.perTypeStat) {\n      if (typeof object.perTypeStat !== \"object\") throw TypeError(\".QueryStats.perTypeStat: object expected\");\n      message.perTypeStat = {};\n\n      for (var keys = Object.keys(object.perTypeStat), i = 0; i < keys.length; ++i) {\n        if (typeof object.perTypeStat[keys[i]] !== \"object\") throw TypeError(\".QueryStats.perTypeStat: object expected\");\n        message.perTypeStat[keys[i]] = $root.TypeStat.fromObject(object.perTypeStat[keys[i]]);\n      }\n    }\n\n    if (object.typeStatsWithContext) {\n      if (!Array.isArray(object.typeStatsWithContext)) throw TypeError(\".QueryStats.typeStatsWithContext: array expected\");\n      message.typeStatsWithContext = [];\n\n      for (var i = 0; i < object.typeStatsWithContext.length; ++i) {\n        if (typeof object.typeStatsWithContext[i] !== \"object\") throw TypeError(\".QueryStats.typeStatsWithContext: object expected\");\n        message.typeStatsWithContext[i] = $root.ContextualizedTypeStats.fromObject(object.typeStatsWithContext[i]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a QueryStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof QueryStats\n   * @static\n   * @param {QueryStats} message QueryStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  QueryStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.arrays || options.defaults) {\n      object.perType = [];\n      object.queryStatsWithContext = [];\n      object.typeStatsWithContext = [];\n    }\n\n    if (options.objects || options.defaults) {\n      object.perClientName = {};\n      object.perTypeStat = {};\n    }\n\n    var keys2;\n\n    if (message.perClientName && (keys2 = Object.keys(message.perClientName)).length) {\n      object.perClientName = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.perClientName[keys2[j]] = $root.ClientNameStats.toObject(message.perClientName[keys2[j]], options);\n    }\n\n    if (message.perType && message.perType.length) {\n      object.perType = [];\n\n      for (var j = 0; j < message.perType.length; ++j) object.perType[j] = $root.TypeStat.toObject(message.perType[j], options);\n    }\n\n    if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n      object.perTypeStat = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n    }\n\n    if (message.queryStatsWithContext && message.queryStatsWithContext.length) {\n      object.queryStatsWithContext = [];\n\n      for (var j = 0; j < message.queryStatsWithContext.length; ++j) object.queryStatsWithContext[j] = $root.ContextualizedQueryLatencyStats.toObject(message.queryStatsWithContext[j], options);\n    }\n\n    if (message.typeStatsWithContext && message.typeStatsWithContext.length) {\n      object.typeStatsWithContext = [];\n\n      for (var j = 0; j < message.typeStatsWithContext.length; ++j) object.typeStatsWithContext[j] = $root.ContextualizedTypeStats.toObject(message.typeStatsWithContext[j], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this QueryStats to JSON.\n   * @function toJSON\n   * @memberof QueryStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  QueryStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return QueryStats;\n}();\n\n$root.TracesReport = function () {\n  /**\n   * Properties of a TracesReport.\n   * @exports ITracesReport\n   * @interface ITracesReport\n   * @property {IReportHeader|null} [header] TracesReport header\n   * @property {Array.<ITrace>|null} [trace] TracesReport trace\n   */\n\n  /**\n   * Constructs a new TracesReport.\n   * @exports TracesReport\n   * @classdesc Represents a TracesReport.\n   * @implements ITracesReport\n   * @constructor\n   * @param {ITracesReport=} [properties] Properties to set\n   */\n  function TracesReport(properties) {\n    this.trace = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * TracesReport header.\n   * @member {IReportHeader|null|undefined} header\n   * @memberof TracesReport\n   * @instance\n   */\n\n\n  TracesReport.prototype.header = null;\n  /**\n   * TracesReport trace.\n   * @member {Array.<ITrace>} trace\n   * @memberof TracesReport\n   * @instance\n   */\n\n  TracesReport.prototype.trace = $util.emptyArray;\n  /**\n   * Creates a new TracesReport instance using the specified properties.\n   * @function create\n   * @memberof TracesReport\n   * @static\n   * @param {ITracesReport=} [properties] Properties to set\n   * @returns {TracesReport} TracesReport instance\n   */\n\n  TracesReport.create = function create(properties) {\n    return new TracesReport(properties);\n  };\n  /**\n   * Encodes the specified TracesReport message. Does not implicitly {@link TracesReport.verify|verify} messages.\n   * @function encode\n   * @memberof TracesReport\n   * @static\n   * @param {ITracesReport} message TracesReport message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TracesReport.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.header != null && Object.hasOwnProperty.call(message, \"header\")) $root.ReportHeader.encode(message.header, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.trace != null && message.trace.length) for (var i = 0; i < message.trace.length; ++i) $root.Trace.encode(message.trace[i], writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified TracesReport message, length delimited. Does not implicitly {@link TracesReport.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof TracesReport\n   * @static\n   * @param {ITracesReport} message TracesReport message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TracesReport.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a TracesReport message from the specified reader or buffer.\n   * @function decode\n   * @memberof TracesReport\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {TracesReport} TracesReport\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TracesReport.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.TracesReport();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.header = $root.ReportHeader.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          if (!(message.trace && message.trace.length)) message.trace = [];\n          message.trace.push($root.Trace.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a TracesReport message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof TracesReport\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {TracesReport} TracesReport\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TracesReport.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a TracesReport message.\n   * @function verify\n   * @memberof TracesReport\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  TracesReport.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.header != null && message.hasOwnProperty(\"header\")) {\n      var error = $root.ReportHeader.verify(message.header);\n      if (error) return \"header.\" + error;\n    }\n\n    if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n      if (!Array.isArray(message.trace)) return \"trace: array expected\";\n\n      for (var i = 0; i < message.trace.length; ++i) {\n        var error = $root.Trace.verify(message.trace[i]);\n        if (error) return \"trace.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a TracesReport message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof TracesReport\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {TracesReport} TracesReport\n   */\n\n\n  TracesReport.fromObject = function fromObject(object) {\n    if (object instanceof $root.TracesReport) return object;\n    var message = new $root.TracesReport();\n\n    if (object.header != null) {\n      if (typeof object.header !== \"object\") throw TypeError(\".TracesReport.header: object expected\");\n      message.header = $root.ReportHeader.fromObject(object.header);\n    }\n\n    if (object.trace) {\n      if (!Array.isArray(object.trace)) throw TypeError(\".TracesReport.trace: array expected\");\n      message.trace = [];\n\n      for (var i = 0; i < object.trace.length; ++i) {\n        if (typeof object.trace[i] !== \"object\") throw TypeError(\".TracesReport.trace: object expected\");\n        message.trace[i] = $root.Trace.fromObject(object.trace[i]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a TracesReport message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof TracesReport\n   * @static\n   * @param {TracesReport} message TracesReport\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  TracesReport.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.trace = [];\n    if (options.defaults) object.header = null;\n    if (message.header != null && message.hasOwnProperty(\"header\")) object.header = $root.ReportHeader.toObject(message.header, options);\n\n    if (message.trace && message.trace.length) {\n      object.trace = [];\n\n      for (var j = 0; j < message.trace.length; ++j) object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this TracesReport to JSON.\n   * @function toJSON\n   * @memberof TracesReport\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  TracesReport.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return TracesReport;\n}();\n\n$root.Field = function () {\n  /**\n   * Properties of a Field.\n   * @exports IField\n   * @interface IField\n   * @property {string|null} [name] Field name\n   * @property {string|null} [returnType] Field returnType\n   */\n\n  /**\n   * Constructs a new Field.\n   * @exports Field\n   * @classdesc Represents a Field.\n   * @implements IField\n   * @constructor\n   * @param {IField=} [properties] Properties to set\n   */\n  function Field(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * Field name.\n   * @member {string} name\n   * @memberof Field\n   * @instance\n   */\n\n\n  Field.prototype.name = \"\";\n  /**\n   * Field returnType.\n   * @member {string} returnType\n   * @memberof Field\n   * @instance\n   */\n\n  Field.prototype.returnType = \"\";\n  /**\n   * Creates a new Field instance using the specified properties.\n   * @function create\n   * @memberof Field\n   * @static\n   * @param {IField=} [properties] Properties to set\n   * @returns {Field} Field instance\n   */\n\n  Field.create = function create(properties) {\n    return new Field(properties);\n  };\n  /**\n   * Encodes the specified Field message. Does not implicitly {@link Field.verify|verify} messages.\n   * @function encode\n   * @memberof Field\n   * @static\n   * @param {IField} message Field message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Field.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).string(message.name);\n    if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\")) writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).string(message.returnType);\n    return writer;\n  };\n  /**\n   * Encodes the specified Field message, length delimited. Does not implicitly {@link Field.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Field\n   * @static\n   * @param {IField} message Field message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Field.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a Field message from the specified reader or buffer.\n   * @function decode\n   * @memberof Field\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Field} Field\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Field.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Field();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 2:\n          message.name = reader.string();\n          break;\n\n        case 3:\n          message.returnType = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a Field message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Field\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Field} Field\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Field.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a Field message.\n   * @function verify\n   * @memberof Field\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  Field.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) if (!$util.isString(message.returnType)) return \"returnType: string expected\";\n    return null;\n  };\n  /**\n   * Creates a Field message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Field\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Field} Field\n   */\n\n\n  Field.fromObject = function fromObject(object) {\n    if (object instanceof $root.Field) return object;\n    var message = new $root.Field();\n    if (object.name != null) message.name = String(object.name);\n    if (object.returnType != null) message.returnType = String(object.returnType);\n    return message;\n  };\n  /**\n   * Creates a plain object from a Field message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Field\n   * @static\n   * @param {Field} message Field\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Field.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.name = \"\";\n      object.returnType = \"\";\n    }\n\n    if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) object.returnType = message.returnType;\n    return object;\n  };\n  /**\n   * Converts this Field to JSON.\n   * @function toJSON\n   * @memberof Field\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Field.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Field;\n}();\n\n$root.Type = function () {\n  /**\n   * Properties of a Type.\n   * @exports IType\n   * @interface IType\n   * @property {string|null} [name] Type name\n   * @property {Array.<IField>|null} [field] Type field\n   */\n\n  /**\n   * Constructs a new Type.\n   * @exports Type\n   * @classdesc Represents a Type.\n   * @implements IType\n   * @constructor\n   * @param {IType=} [properties] Properties to set\n   */\n  function Type(properties) {\n    this.field = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * Type name.\n   * @member {string} name\n   * @memberof Type\n   * @instance\n   */\n\n\n  Type.prototype.name = \"\";\n  /**\n   * Type field.\n   * @member {Array.<IField>} field\n   * @memberof Type\n   * @instance\n   */\n\n  Type.prototype.field = $util.emptyArray;\n  /**\n   * Creates a new Type instance using the specified properties.\n   * @function create\n   * @memberof Type\n   * @static\n   * @param {IType=} [properties] Properties to set\n   * @returns {Type} Type instance\n   */\n\n  Type.create = function create(properties) {\n    return new Type(properties);\n  };\n  /**\n   * Encodes the specified Type message. Does not implicitly {@link Type.verify|verify} messages.\n   * @function encode\n   * @memberof Type\n   * @static\n   * @param {IType} message Type message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Type.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).string(message.name);\n    if (message.field != null && message.field.length) for (var i = 0; i < message.field.length; ++i) $root.Field.encode(message.field[i], writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified Type message, length delimited. Does not implicitly {@link Type.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Type\n   * @static\n   * @param {IType} message Type message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Type.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a Type message from the specified reader or buffer.\n   * @function decode\n   * @memberof Type\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Type} Type\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Type.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Type();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.name = reader.string();\n          break;\n\n        case 2:\n          if (!(message.field && message.field.length)) message.field = [];\n          message.field.push($root.Field.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a Type message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Type\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Type} Type\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Type.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a Type message.\n   * @function verify\n   * @memberof Type\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  Type.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n\n    if (message.field != null && message.hasOwnProperty(\"field\")) {\n      if (!Array.isArray(message.field)) return \"field: array expected\";\n\n      for (var i = 0; i < message.field.length; ++i) {\n        var error = $root.Field.verify(message.field[i]);\n        if (error) return \"field.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a Type message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Type\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Type} Type\n   */\n\n\n  Type.fromObject = function fromObject(object) {\n    if (object instanceof $root.Type) return object;\n    var message = new $root.Type();\n    if (object.name != null) message.name = String(object.name);\n\n    if (object.field) {\n      if (!Array.isArray(object.field)) throw TypeError(\".Type.field: array expected\");\n      message.field = [];\n\n      for (var i = 0; i < object.field.length; ++i) {\n        if (typeof object.field[i] !== \"object\") throw TypeError(\".Type.field: object expected\");\n        message.field[i] = $root.Field.fromObject(object.field[i]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a Type message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Type\n   * @static\n   * @param {Type} message Type\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Type.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.field = [];\n    if (options.defaults) object.name = \"\";\n    if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n\n    if (message.field && message.field.length) {\n      object.field = [];\n\n      for (var j = 0; j < message.field.length; ++j) object.field[j] = $root.Field.toObject(message.field[j], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this Type to JSON.\n   * @function toJSON\n   * @memberof Type\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Type.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Type;\n}();\n\n$root.MemStats = function () {\n  /**\n   * Properties of a MemStats.\n   * @exports IMemStats\n   * @interface IMemStats\n   * @property {number|null} [totalBytes] MemStats totalBytes\n   * @property {number|null} [stackBytes] MemStats stackBytes\n   * @property {number|null} [heapBytes] MemStats heapBytes\n   * @property {number|null} [heapReleasedBytes] MemStats heapReleasedBytes\n   * @property {number|null} [gcOverheadBytes] MemStats gcOverheadBytes\n   * @property {number|null} [stackUsedBytes] MemStats stackUsedBytes\n   * @property {number|null} [heapAllocatedBytes] MemStats heapAllocatedBytes\n   * @property {number|null} [heapAllocatedObjects] MemStats heapAllocatedObjects\n   * @property {number|null} [heapAllocatedBytesDelta] MemStats heapAllocatedBytesDelta\n   * @property {number|null} [heapAllocatedObjectsDelta] MemStats heapAllocatedObjectsDelta\n   * @property {number|null} [heapFreedObjectsDelta] MemStats heapFreedObjectsDelta\n   * @property {number|null} [gcStwNsDelta] MemStats gcStwNsDelta\n   * @property {number|null} [gcCountDelta] MemStats gcCountDelta\n   */\n\n  /**\n   * Constructs a new MemStats.\n   * @exports MemStats\n   * @classdesc Represents a MemStats.\n   * @implements IMemStats\n   * @constructor\n   * @param {IMemStats=} [properties] Properties to set\n   */\n  function MemStats(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * MemStats totalBytes.\n   * @member {number} totalBytes\n   * @memberof MemStats\n   * @instance\n   */\n\n\n  MemStats.prototype.totalBytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats stackBytes.\n   * @member {number} stackBytes\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.stackBytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats heapBytes.\n   * @member {number} heapBytes\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.heapBytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats heapReleasedBytes.\n   * @member {number} heapReleasedBytes\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.heapReleasedBytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats gcOverheadBytes.\n   * @member {number} gcOverheadBytes\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.gcOverheadBytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats stackUsedBytes.\n   * @member {number} stackUsedBytes\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.stackUsedBytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats heapAllocatedBytes.\n   * @member {number} heapAllocatedBytes\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.heapAllocatedBytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats heapAllocatedObjects.\n   * @member {number} heapAllocatedObjects\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.heapAllocatedObjects = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats heapAllocatedBytesDelta.\n   * @member {number} heapAllocatedBytesDelta\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.heapAllocatedBytesDelta = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats heapAllocatedObjectsDelta.\n   * @member {number} heapAllocatedObjectsDelta\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.heapAllocatedObjectsDelta = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats heapFreedObjectsDelta.\n   * @member {number} heapFreedObjectsDelta\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.heapFreedObjectsDelta = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats gcStwNsDelta.\n   * @member {number} gcStwNsDelta\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.gcStwNsDelta = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * MemStats gcCountDelta.\n   * @member {number} gcCountDelta\n   * @memberof MemStats\n   * @instance\n   */\n\n  MemStats.prototype.gcCountDelta = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Creates a new MemStats instance using the specified properties.\n   * @function create\n   * @memberof MemStats\n   * @static\n   * @param {IMemStats=} [properties] Properties to set\n   * @returns {MemStats} MemStats instance\n   */\n\n  MemStats.create = function create(properties) {\n    return new MemStats(properties);\n  };\n  /**\n   * Encodes the specified MemStats message. Does not implicitly {@link MemStats.verify|verify} messages.\n   * @function encode\n   * @memberof MemStats\n   * @static\n   * @param {IMemStats} message MemStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  MemStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.totalBytes != null && Object.hasOwnProperty.call(message, \"totalBytes\")) writer.uint32(\n    /* id 1, wireType 0 =*/\n    8).uint64(message.totalBytes);\n    if (message.stackBytes != null && Object.hasOwnProperty.call(message, \"stackBytes\")) writer.uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.stackBytes);\n    if (message.heapBytes != null && Object.hasOwnProperty.call(message, \"heapBytes\")) writer.uint32(\n    /* id 3, wireType 0 =*/\n    24).uint64(message.heapBytes);\n    if (message.gcOverheadBytes != null && Object.hasOwnProperty.call(message, \"gcOverheadBytes\")) writer.uint32(\n    /* id 4, wireType 0 =*/\n    32).uint64(message.gcOverheadBytes);\n    if (message.stackUsedBytes != null && Object.hasOwnProperty.call(message, \"stackUsedBytes\")) writer.uint32(\n    /* id 5, wireType 0 =*/\n    40).uint64(message.stackUsedBytes);\n    if (message.heapAllocatedBytes != null && Object.hasOwnProperty.call(message, \"heapAllocatedBytes\")) writer.uint32(\n    /* id 6, wireType 0 =*/\n    48).uint64(message.heapAllocatedBytes);\n    if (message.heapAllocatedObjects != null && Object.hasOwnProperty.call(message, \"heapAllocatedObjects\")) writer.uint32(\n    /* id 7, wireType 0 =*/\n    56).uint64(message.heapAllocatedObjects);\n    if (message.heapAllocatedBytesDelta != null && Object.hasOwnProperty.call(message, \"heapAllocatedBytesDelta\")) writer.uint32(\n    /* id 8, wireType 0 =*/\n    64).uint64(message.heapAllocatedBytesDelta);\n    if (message.heapAllocatedObjectsDelta != null && Object.hasOwnProperty.call(message, \"heapAllocatedObjectsDelta\")) writer.uint32(\n    /* id 9, wireType 0 =*/\n    72).uint64(message.heapAllocatedObjectsDelta);\n    if (message.heapFreedObjectsDelta != null && Object.hasOwnProperty.call(message, \"heapFreedObjectsDelta\")) writer.uint32(\n    /* id 10, wireType 0 =*/\n    80).uint64(message.heapFreedObjectsDelta);\n    if (message.gcStwNsDelta != null && Object.hasOwnProperty.call(message, \"gcStwNsDelta\")) writer.uint32(\n    /* id 11, wireType 0 =*/\n    88).uint64(message.gcStwNsDelta);\n    if (message.gcCountDelta != null && Object.hasOwnProperty.call(message, \"gcCountDelta\")) writer.uint32(\n    /* id 12, wireType 0 =*/\n    96).uint64(message.gcCountDelta);\n    if (message.heapReleasedBytes != null && Object.hasOwnProperty.call(message, \"heapReleasedBytes\")) writer.uint32(\n    /* id 13, wireType 0 =*/\n    104).uint64(message.heapReleasedBytes);\n    return writer;\n  };\n  /**\n   * Encodes the specified MemStats message, length delimited. Does not implicitly {@link MemStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof MemStats\n   * @static\n   * @param {IMemStats} message MemStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  MemStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a MemStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof MemStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {MemStats} MemStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  MemStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.MemStats();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.totalBytes = reader.uint64();\n          break;\n\n        case 2:\n          message.stackBytes = reader.uint64();\n          break;\n\n        case 3:\n          message.heapBytes = reader.uint64();\n          break;\n\n        case 13:\n          message.heapReleasedBytes = reader.uint64();\n          break;\n\n        case 4:\n          message.gcOverheadBytes = reader.uint64();\n          break;\n\n        case 5:\n          message.stackUsedBytes = reader.uint64();\n          break;\n\n        case 6:\n          message.heapAllocatedBytes = reader.uint64();\n          break;\n\n        case 7:\n          message.heapAllocatedObjects = reader.uint64();\n          break;\n\n        case 8:\n          message.heapAllocatedBytesDelta = reader.uint64();\n          break;\n\n        case 9:\n          message.heapAllocatedObjectsDelta = reader.uint64();\n          break;\n\n        case 10:\n          message.heapFreedObjectsDelta = reader.uint64();\n          break;\n\n        case 11:\n          message.gcStwNsDelta = reader.uint64();\n          break;\n\n        case 12:\n          message.gcCountDelta = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a MemStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof MemStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {MemStats} MemStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  MemStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a MemStats message.\n   * @function verify\n   * @memberof MemStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  MemStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.totalBytes != null && message.hasOwnProperty(\"totalBytes\")) if (!$util.isInteger(message.totalBytes) && !(message.totalBytes && $util.isInteger(message.totalBytes.low) && $util.isInteger(message.totalBytes.high))) return \"totalBytes: integer|Long expected\";\n    if (message.stackBytes != null && message.hasOwnProperty(\"stackBytes\")) if (!$util.isInteger(message.stackBytes) && !(message.stackBytes && $util.isInteger(message.stackBytes.low) && $util.isInteger(message.stackBytes.high))) return \"stackBytes: integer|Long expected\";\n    if (message.heapBytes != null && message.hasOwnProperty(\"heapBytes\")) if (!$util.isInteger(message.heapBytes) && !(message.heapBytes && $util.isInteger(message.heapBytes.low) && $util.isInteger(message.heapBytes.high))) return \"heapBytes: integer|Long expected\";\n    if (message.heapReleasedBytes != null && message.hasOwnProperty(\"heapReleasedBytes\")) if (!$util.isInteger(message.heapReleasedBytes) && !(message.heapReleasedBytes && $util.isInteger(message.heapReleasedBytes.low) && $util.isInteger(message.heapReleasedBytes.high))) return \"heapReleasedBytes: integer|Long expected\";\n    if (message.gcOverheadBytes != null && message.hasOwnProperty(\"gcOverheadBytes\")) if (!$util.isInteger(message.gcOverheadBytes) && !(message.gcOverheadBytes && $util.isInteger(message.gcOverheadBytes.low) && $util.isInteger(message.gcOverheadBytes.high))) return \"gcOverheadBytes: integer|Long expected\";\n    if (message.stackUsedBytes != null && message.hasOwnProperty(\"stackUsedBytes\")) if (!$util.isInteger(message.stackUsedBytes) && !(message.stackUsedBytes && $util.isInteger(message.stackUsedBytes.low) && $util.isInteger(message.stackUsedBytes.high))) return \"stackUsedBytes: integer|Long expected\";\n    if (message.heapAllocatedBytes != null && message.hasOwnProperty(\"heapAllocatedBytes\")) if (!$util.isInteger(message.heapAllocatedBytes) && !(message.heapAllocatedBytes && $util.isInteger(message.heapAllocatedBytes.low) && $util.isInteger(message.heapAllocatedBytes.high))) return \"heapAllocatedBytes: integer|Long expected\";\n    if (message.heapAllocatedObjects != null && message.hasOwnProperty(\"heapAllocatedObjects\")) if (!$util.isInteger(message.heapAllocatedObjects) && !(message.heapAllocatedObjects && $util.isInteger(message.heapAllocatedObjects.low) && $util.isInteger(message.heapAllocatedObjects.high))) return \"heapAllocatedObjects: integer|Long expected\";\n    if (message.heapAllocatedBytesDelta != null && message.hasOwnProperty(\"heapAllocatedBytesDelta\")) if (!$util.isInteger(message.heapAllocatedBytesDelta) && !(message.heapAllocatedBytesDelta && $util.isInteger(message.heapAllocatedBytesDelta.low) && $util.isInteger(message.heapAllocatedBytesDelta.high))) return \"heapAllocatedBytesDelta: integer|Long expected\";\n    if (message.heapAllocatedObjectsDelta != null && message.hasOwnProperty(\"heapAllocatedObjectsDelta\")) if (!$util.isInteger(message.heapAllocatedObjectsDelta) && !(message.heapAllocatedObjectsDelta && $util.isInteger(message.heapAllocatedObjectsDelta.low) && $util.isInteger(message.heapAllocatedObjectsDelta.high))) return \"heapAllocatedObjectsDelta: integer|Long expected\";\n    if (message.heapFreedObjectsDelta != null && message.hasOwnProperty(\"heapFreedObjectsDelta\")) if (!$util.isInteger(message.heapFreedObjectsDelta) && !(message.heapFreedObjectsDelta && $util.isInteger(message.heapFreedObjectsDelta.low) && $util.isInteger(message.heapFreedObjectsDelta.high))) return \"heapFreedObjectsDelta: integer|Long expected\";\n    if (message.gcStwNsDelta != null && message.hasOwnProperty(\"gcStwNsDelta\")) if (!$util.isInteger(message.gcStwNsDelta) && !(message.gcStwNsDelta && $util.isInteger(message.gcStwNsDelta.low) && $util.isInteger(message.gcStwNsDelta.high))) return \"gcStwNsDelta: integer|Long expected\";\n    if (message.gcCountDelta != null && message.hasOwnProperty(\"gcCountDelta\")) if (!$util.isInteger(message.gcCountDelta) && !(message.gcCountDelta && $util.isInteger(message.gcCountDelta.low) && $util.isInteger(message.gcCountDelta.high))) return \"gcCountDelta: integer|Long expected\";\n    return null;\n  };\n  /**\n   * Creates a MemStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof MemStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {MemStats} MemStats\n   */\n\n\n  MemStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.MemStats) return object;\n    var message = new $root.MemStats();\n    if (object.totalBytes != null) if ($util.Long) (message.totalBytes = $util.Long.fromValue(object.totalBytes)).unsigned = true;else if (typeof object.totalBytes === \"string\") message.totalBytes = parseInt(object.totalBytes, 10);else if (typeof object.totalBytes === \"number\") message.totalBytes = object.totalBytes;else if (typeof object.totalBytes === \"object\") message.totalBytes = new $util.LongBits(object.totalBytes.low >>> 0, object.totalBytes.high >>> 0).toNumber(true);\n    if (object.stackBytes != null) if ($util.Long) (message.stackBytes = $util.Long.fromValue(object.stackBytes)).unsigned = true;else if (typeof object.stackBytes === \"string\") message.stackBytes = parseInt(object.stackBytes, 10);else if (typeof object.stackBytes === \"number\") message.stackBytes = object.stackBytes;else if (typeof object.stackBytes === \"object\") message.stackBytes = new $util.LongBits(object.stackBytes.low >>> 0, object.stackBytes.high >>> 0).toNumber(true);\n    if (object.heapBytes != null) if ($util.Long) (message.heapBytes = $util.Long.fromValue(object.heapBytes)).unsigned = true;else if (typeof object.heapBytes === \"string\") message.heapBytes = parseInt(object.heapBytes, 10);else if (typeof object.heapBytes === \"number\") message.heapBytes = object.heapBytes;else if (typeof object.heapBytes === \"object\") message.heapBytes = new $util.LongBits(object.heapBytes.low >>> 0, object.heapBytes.high >>> 0).toNumber(true);\n    if (object.heapReleasedBytes != null) if ($util.Long) (message.heapReleasedBytes = $util.Long.fromValue(object.heapReleasedBytes)).unsigned = true;else if (typeof object.heapReleasedBytes === \"string\") message.heapReleasedBytes = parseInt(object.heapReleasedBytes, 10);else if (typeof object.heapReleasedBytes === \"number\") message.heapReleasedBytes = object.heapReleasedBytes;else if (typeof object.heapReleasedBytes === \"object\") message.heapReleasedBytes = new $util.LongBits(object.heapReleasedBytes.low >>> 0, object.heapReleasedBytes.high >>> 0).toNumber(true);\n    if (object.gcOverheadBytes != null) if ($util.Long) (message.gcOverheadBytes = $util.Long.fromValue(object.gcOverheadBytes)).unsigned = true;else if (typeof object.gcOverheadBytes === \"string\") message.gcOverheadBytes = parseInt(object.gcOverheadBytes, 10);else if (typeof object.gcOverheadBytes === \"number\") message.gcOverheadBytes = object.gcOverheadBytes;else if (typeof object.gcOverheadBytes === \"object\") message.gcOverheadBytes = new $util.LongBits(object.gcOverheadBytes.low >>> 0, object.gcOverheadBytes.high >>> 0).toNumber(true);\n    if (object.stackUsedBytes != null) if ($util.Long) (message.stackUsedBytes = $util.Long.fromValue(object.stackUsedBytes)).unsigned = true;else if (typeof object.stackUsedBytes === \"string\") message.stackUsedBytes = parseInt(object.stackUsedBytes, 10);else if (typeof object.stackUsedBytes === \"number\") message.stackUsedBytes = object.stackUsedBytes;else if (typeof object.stackUsedBytes === \"object\") message.stackUsedBytes = new $util.LongBits(object.stackUsedBytes.low >>> 0, object.stackUsedBytes.high >>> 0).toNumber(true);\n    if (object.heapAllocatedBytes != null) if ($util.Long) (message.heapAllocatedBytes = $util.Long.fromValue(object.heapAllocatedBytes)).unsigned = true;else if (typeof object.heapAllocatedBytes === \"string\") message.heapAllocatedBytes = parseInt(object.heapAllocatedBytes, 10);else if (typeof object.heapAllocatedBytes === \"number\") message.heapAllocatedBytes = object.heapAllocatedBytes;else if (typeof object.heapAllocatedBytes === \"object\") message.heapAllocatedBytes = new $util.LongBits(object.heapAllocatedBytes.low >>> 0, object.heapAllocatedBytes.high >>> 0).toNumber(true);\n    if (object.heapAllocatedObjects != null) if ($util.Long) (message.heapAllocatedObjects = $util.Long.fromValue(object.heapAllocatedObjects)).unsigned = true;else if (typeof object.heapAllocatedObjects === \"string\") message.heapAllocatedObjects = parseInt(object.heapAllocatedObjects, 10);else if (typeof object.heapAllocatedObjects === \"number\") message.heapAllocatedObjects = object.heapAllocatedObjects;else if (typeof object.heapAllocatedObjects === \"object\") message.heapAllocatedObjects = new $util.LongBits(object.heapAllocatedObjects.low >>> 0, object.heapAllocatedObjects.high >>> 0).toNumber(true);\n    if (object.heapAllocatedBytesDelta != null) if ($util.Long) (message.heapAllocatedBytesDelta = $util.Long.fromValue(object.heapAllocatedBytesDelta)).unsigned = true;else if (typeof object.heapAllocatedBytesDelta === \"string\") message.heapAllocatedBytesDelta = parseInt(object.heapAllocatedBytesDelta, 10);else if (typeof object.heapAllocatedBytesDelta === \"number\") message.heapAllocatedBytesDelta = object.heapAllocatedBytesDelta;else if (typeof object.heapAllocatedBytesDelta === \"object\") message.heapAllocatedBytesDelta = new $util.LongBits(object.heapAllocatedBytesDelta.low >>> 0, object.heapAllocatedBytesDelta.high >>> 0).toNumber(true);\n    if (object.heapAllocatedObjectsDelta != null) if ($util.Long) (message.heapAllocatedObjectsDelta = $util.Long.fromValue(object.heapAllocatedObjectsDelta)).unsigned = true;else if (typeof object.heapAllocatedObjectsDelta === \"string\") message.heapAllocatedObjectsDelta = parseInt(object.heapAllocatedObjectsDelta, 10);else if (typeof object.heapAllocatedObjectsDelta === \"number\") message.heapAllocatedObjectsDelta = object.heapAllocatedObjectsDelta;else if (typeof object.heapAllocatedObjectsDelta === \"object\") message.heapAllocatedObjectsDelta = new $util.LongBits(object.heapAllocatedObjectsDelta.low >>> 0, object.heapAllocatedObjectsDelta.high >>> 0).toNumber(true);\n    if (object.heapFreedObjectsDelta != null) if ($util.Long) (message.heapFreedObjectsDelta = $util.Long.fromValue(object.heapFreedObjectsDelta)).unsigned = true;else if (typeof object.heapFreedObjectsDelta === \"string\") message.heapFreedObjectsDelta = parseInt(object.heapFreedObjectsDelta, 10);else if (typeof object.heapFreedObjectsDelta === \"number\") message.heapFreedObjectsDelta = object.heapFreedObjectsDelta;else if (typeof object.heapFreedObjectsDelta === \"object\") message.heapFreedObjectsDelta = new $util.LongBits(object.heapFreedObjectsDelta.low >>> 0, object.heapFreedObjectsDelta.high >>> 0).toNumber(true);\n    if (object.gcStwNsDelta != null) if ($util.Long) (message.gcStwNsDelta = $util.Long.fromValue(object.gcStwNsDelta)).unsigned = true;else if (typeof object.gcStwNsDelta === \"string\") message.gcStwNsDelta = parseInt(object.gcStwNsDelta, 10);else if (typeof object.gcStwNsDelta === \"number\") message.gcStwNsDelta = object.gcStwNsDelta;else if (typeof object.gcStwNsDelta === \"object\") message.gcStwNsDelta = new $util.LongBits(object.gcStwNsDelta.low >>> 0, object.gcStwNsDelta.high >>> 0).toNumber(true);\n    if (object.gcCountDelta != null) if ($util.Long) (message.gcCountDelta = $util.Long.fromValue(object.gcCountDelta)).unsigned = true;else if (typeof object.gcCountDelta === \"string\") message.gcCountDelta = parseInt(object.gcCountDelta, 10);else if (typeof object.gcCountDelta === \"number\") message.gcCountDelta = object.gcCountDelta;else if (typeof object.gcCountDelta === \"object\") message.gcCountDelta = new $util.LongBits(object.gcCountDelta.low >>> 0, object.gcCountDelta.high >>> 0).toNumber(true);\n    return message;\n  };\n  /**\n   * Creates a plain object from a MemStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof MemStats\n   * @static\n   * @param {MemStats} message MemStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  MemStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.totalBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.totalBytes = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.stackBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.stackBytes = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.heapBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.heapBytes = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.gcOverheadBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.gcOverheadBytes = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.stackUsedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.stackUsedBytes = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.heapAllocatedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.heapAllocatedBytes = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.heapAllocatedObjects = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.heapAllocatedObjects = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.heapAllocatedBytesDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.heapAllocatedBytesDelta = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.heapAllocatedObjectsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.heapAllocatedObjectsDelta = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.heapFreedObjectsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.heapFreedObjectsDelta = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.gcStwNsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.gcStwNsDelta = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.gcCountDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.gcCountDelta = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.heapReleasedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.heapReleasedBytes = options.longs === String ? \"0\" : 0;\n    }\n\n    if (message.totalBytes != null && message.hasOwnProperty(\"totalBytes\")) if (typeof message.totalBytes === \"number\") object.totalBytes = options.longs === String ? String(message.totalBytes) : message.totalBytes;else object.totalBytes = options.longs === String ? $util.Long.prototype.toString.call(message.totalBytes) : options.longs === Number ? new $util.LongBits(message.totalBytes.low >>> 0, message.totalBytes.high >>> 0).toNumber(true) : message.totalBytes;\n    if (message.stackBytes != null && message.hasOwnProperty(\"stackBytes\")) if (typeof message.stackBytes === \"number\") object.stackBytes = options.longs === String ? String(message.stackBytes) : message.stackBytes;else object.stackBytes = options.longs === String ? $util.Long.prototype.toString.call(message.stackBytes) : options.longs === Number ? new $util.LongBits(message.stackBytes.low >>> 0, message.stackBytes.high >>> 0).toNumber(true) : message.stackBytes;\n    if (message.heapBytes != null && message.hasOwnProperty(\"heapBytes\")) if (typeof message.heapBytes === \"number\") object.heapBytes = options.longs === String ? String(message.heapBytes) : message.heapBytes;else object.heapBytes = options.longs === String ? $util.Long.prototype.toString.call(message.heapBytes) : options.longs === Number ? new $util.LongBits(message.heapBytes.low >>> 0, message.heapBytes.high >>> 0).toNumber(true) : message.heapBytes;\n    if (message.gcOverheadBytes != null && message.hasOwnProperty(\"gcOverheadBytes\")) if (typeof message.gcOverheadBytes === \"number\") object.gcOverheadBytes = options.longs === String ? String(message.gcOverheadBytes) : message.gcOverheadBytes;else object.gcOverheadBytes = options.longs === String ? $util.Long.prototype.toString.call(message.gcOverheadBytes) : options.longs === Number ? new $util.LongBits(message.gcOverheadBytes.low >>> 0, message.gcOverheadBytes.high >>> 0).toNumber(true) : message.gcOverheadBytes;\n    if (message.stackUsedBytes != null && message.hasOwnProperty(\"stackUsedBytes\")) if (typeof message.stackUsedBytes === \"number\") object.stackUsedBytes = options.longs === String ? String(message.stackUsedBytes) : message.stackUsedBytes;else object.stackUsedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.stackUsedBytes) : options.longs === Number ? new $util.LongBits(message.stackUsedBytes.low >>> 0, message.stackUsedBytes.high >>> 0).toNumber(true) : message.stackUsedBytes;\n    if (message.heapAllocatedBytes != null && message.hasOwnProperty(\"heapAllocatedBytes\")) if (typeof message.heapAllocatedBytes === \"number\") object.heapAllocatedBytes = options.longs === String ? String(message.heapAllocatedBytes) : message.heapAllocatedBytes;else object.heapAllocatedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.heapAllocatedBytes) : options.longs === Number ? new $util.LongBits(message.heapAllocatedBytes.low >>> 0, message.heapAllocatedBytes.high >>> 0).toNumber(true) : message.heapAllocatedBytes;\n    if (message.heapAllocatedObjects != null && message.hasOwnProperty(\"heapAllocatedObjects\")) if (typeof message.heapAllocatedObjects === \"number\") object.heapAllocatedObjects = options.longs === String ? String(message.heapAllocatedObjects) : message.heapAllocatedObjects;else object.heapAllocatedObjects = options.longs === String ? $util.Long.prototype.toString.call(message.heapAllocatedObjects) : options.longs === Number ? new $util.LongBits(message.heapAllocatedObjects.low >>> 0, message.heapAllocatedObjects.high >>> 0).toNumber(true) : message.heapAllocatedObjects;\n    if (message.heapAllocatedBytesDelta != null && message.hasOwnProperty(\"heapAllocatedBytesDelta\")) if (typeof message.heapAllocatedBytesDelta === \"number\") object.heapAllocatedBytesDelta = options.longs === String ? String(message.heapAllocatedBytesDelta) : message.heapAllocatedBytesDelta;else object.heapAllocatedBytesDelta = options.longs === String ? $util.Long.prototype.toString.call(message.heapAllocatedBytesDelta) : options.longs === Number ? new $util.LongBits(message.heapAllocatedBytesDelta.low >>> 0, message.heapAllocatedBytesDelta.high >>> 0).toNumber(true) : message.heapAllocatedBytesDelta;\n    if (message.heapAllocatedObjectsDelta != null && message.hasOwnProperty(\"heapAllocatedObjectsDelta\")) if (typeof message.heapAllocatedObjectsDelta === \"number\") object.heapAllocatedObjectsDelta = options.longs === String ? String(message.heapAllocatedObjectsDelta) : message.heapAllocatedObjectsDelta;else object.heapAllocatedObjectsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.heapAllocatedObjectsDelta) : options.longs === Number ? new $util.LongBits(message.heapAllocatedObjectsDelta.low >>> 0, message.heapAllocatedObjectsDelta.high >>> 0).toNumber(true) : message.heapAllocatedObjectsDelta;\n    if (message.heapFreedObjectsDelta != null && message.hasOwnProperty(\"heapFreedObjectsDelta\")) if (typeof message.heapFreedObjectsDelta === \"number\") object.heapFreedObjectsDelta = options.longs === String ? String(message.heapFreedObjectsDelta) : message.heapFreedObjectsDelta;else object.heapFreedObjectsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.heapFreedObjectsDelta) : options.longs === Number ? new $util.LongBits(message.heapFreedObjectsDelta.low >>> 0, message.heapFreedObjectsDelta.high >>> 0).toNumber(true) : message.heapFreedObjectsDelta;\n    if (message.gcStwNsDelta != null && message.hasOwnProperty(\"gcStwNsDelta\")) if (typeof message.gcStwNsDelta === \"number\") object.gcStwNsDelta = options.longs === String ? String(message.gcStwNsDelta) : message.gcStwNsDelta;else object.gcStwNsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.gcStwNsDelta) : options.longs === Number ? new $util.LongBits(message.gcStwNsDelta.low >>> 0, message.gcStwNsDelta.high >>> 0).toNumber(true) : message.gcStwNsDelta;\n    if (message.gcCountDelta != null && message.hasOwnProperty(\"gcCountDelta\")) if (typeof message.gcCountDelta === \"number\") object.gcCountDelta = options.longs === String ? String(message.gcCountDelta) : message.gcCountDelta;else object.gcCountDelta = options.longs === String ? $util.Long.prototype.toString.call(message.gcCountDelta) : options.longs === Number ? new $util.LongBits(message.gcCountDelta.low >>> 0, message.gcCountDelta.high >>> 0).toNumber(true) : message.gcCountDelta;\n    if (message.heapReleasedBytes != null && message.hasOwnProperty(\"heapReleasedBytes\")) if (typeof message.heapReleasedBytes === \"number\") object.heapReleasedBytes = options.longs === String ? String(message.heapReleasedBytes) : message.heapReleasedBytes;else object.heapReleasedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.heapReleasedBytes) : options.longs === Number ? new $util.LongBits(message.heapReleasedBytes.low >>> 0, message.heapReleasedBytes.high >>> 0).toNumber(true) : message.heapReleasedBytes;\n    return object;\n  };\n  /**\n   * Converts this MemStats to JSON.\n   * @function toJSON\n   * @memberof MemStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  MemStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return MemStats;\n}();\n\n$root.TimeStats = function () {\n  /**\n   * Properties of a TimeStats.\n   * @exports ITimeStats\n   * @interface ITimeStats\n   * @property {number|null} [uptimeNs] TimeStats uptimeNs\n   * @property {number|null} [realNsDelta] TimeStats realNsDelta\n   * @property {number|null} [userNsDelta] TimeStats userNsDelta\n   * @property {number|null} [sysNsDelta] TimeStats sysNsDelta\n   */\n\n  /**\n   * Constructs a new TimeStats.\n   * @exports TimeStats\n   * @classdesc Represents a TimeStats.\n   * @implements ITimeStats\n   * @constructor\n   * @param {ITimeStats=} [properties] Properties to set\n   */\n  function TimeStats(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * TimeStats uptimeNs.\n   * @member {number} uptimeNs\n   * @memberof TimeStats\n   * @instance\n   */\n\n\n  TimeStats.prototype.uptimeNs = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * TimeStats realNsDelta.\n   * @member {number} realNsDelta\n   * @memberof TimeStats\n   * @instance\n   */\n\n  TimeStats.prototype.realNsDelta = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * TimeStats userNsDelta.\n   * @member {number} userNsDelta\n   * @memberof TimeStats\n   * @instance\n   */\n\n  TimeStats.prototype.userNsDelta = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * TimeStats sysNsDelta.\n   * @member {number} sysNsDelta\n   * @memberof TimeStats\n   * @instance\n   */\n\n  TimeStats.prototype.sysNsDelta = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Creates a new TimeStats instance using the specified properties.\n   * @function create\n   * @memberof TimeStats\n   * @static\n   * @param {ITimeStats=} [properties] Properties to set\n   * @returns {TimeStats} TimeStats instance\n   */\n\n  TimeStats.create = function create(properties) {\n    return new TimeStats(properties);\n  };\n  /**\n   * Encodes the specified TimeStats message. Does not implicitly {@link TimeStats.verify|verify} messages.\n   * @function encode\n   * @memberof TimeStats\n   * @static\n   * @param {ITimeStats} message TimeStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TimeStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.uptimeNs != null && Object.hasOwnProperty.call(message, \"uptimeNs\")) writer.uint32(\n    /* id 1, wireType 0 =*/\n    8).uint64(message.uptimeNs);\n    if (message.realNsDelta != null && Object.hasOwnProperty.call(message, \"realNsDelta\")) writer.uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.realNsDelta);\n    if (message.userNsDelta != null && Object.hasOwnProperty.call(message, \"userNsDelta\")) writer.uint32(\n    /* id 3, wireType 0 =*/\n    24).uint64(message.userNsDelta);\n    if (message.sysNsDelta != null && Object.hasOwnProperty.call(message, \"sysNsDelta\")) writer.uint32(\n    /* id 4, wireType 0 =*/\n    32).uint64(message.sysNsDelta);\n    return writer;\n  };\n  /**\n   * Encodes the specified TimeStats message, length delimited. Does not implicitly {@link TimeStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof TimeStats\n   * @static\n   * @param {ITimeStats} message TimeStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TimeStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a TimeStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof TimeStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {TimeStats} TimeStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TimeStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.TimeStats();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.uptimeNs = reader.uint64();\n          break;\n\n        case 2:\n          message.realNsDelta = reader.uint64();\n          break;\n\n        case 3:\n          message.userNsDelta = reader.uint64();\n          break;\n\n        case 4:\n          message.sysNsDelta = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a TimeStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof TimeStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {TimeStats} TimeStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TimeStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a TimeStats message.\n   * @function verify\n   * @memberof TimeStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  TimeStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.uptimeNs != null && message.hasOwnProperty(\"uptimeNs\")) if (!$util.isInteger(message.uptimeNs) && !(message.uptimeNs && $util.isInteger(message.uptimeNs.low) && $util.isInteger(message.uptimeNs.high))) return \"uptimeNs: integer|Long expected\";\n    if (message.realNsDelta != null && message.hasOwnProperty(\"realNsDelta\")) if (!$util.isInteger(message.realNsDelta) && !(message.realNsDelta && $util.isInteger(message.realNsDelta.low) && $util.isInteger(message.realNsDelta.high))) return \"realNsDelta: integer|Long expected\";\n    if (message.userNsDelta != null && message.hasOwnProperty(\"userNsDelta\")) if (!$util.isInteger(message.userNsDelta) && !(message.userNsDelta && $util.isInteger(message.userNsDelta.low) && $util.isInteger(message.userNsDelta.high))) return \"userNsDelta: integer|Long expected\";\n    if (message.sysNsDelta != null && message.hasOwnProperty(\"sysNsDelta\")) if (!$util.isInteger(message.sysNsDelta) && !(message.sysNsDelta && $util.isInteger(message.sysNsDelta.low) && $util.isInteger(message.sysNsDelta.high))) return \"sysNsDelta: integer|Long expected\";\n    return null;\n  };\n  /**\n   * Creates a TimeStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof TimeStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {TimeStats} TimeStats\n   */\n\n\n  TimeStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.TimeStats) return object;\n    var message = new $root.TimeStats();\n    if (object.uptimeNs != null) if ($util.Long) (message.uptimeNs = $util.Long.fromValue(object.uptimeNs)).unsigned = true;else if (typeof object.uptimeNs === \"string\") message.uptimeNs = parseInt(object.uptimeNs, 10);else if (typeof object.uptimeNs === \"number\") message.uptimeNs = object.uptimeNs;else if (typeof object.uptimeNs === \"object\") message.uptimeNs = new $util.LongBits(object.uptimeNs.low >>> 0, object.uptimeNs.high >>> 0).toNumber(true);\n    if (object.realNsDelta != null) if ($util.Long) (message.realNsDelta = $util.Long.fromValue(object.realNsDelta)).unsigned = true;else if (typeof object.realNsDelta === \"string\") message.realNsDelta = parseInt(object.realNsDelta, 10);else if (typeof object.realNsDelta === \"number\") message.realNsDelta = object.realNsDelta;else if (typeof object.realNsDelta === \"object\") message.realNsDelta = new $util.LongBits(object.realNsDelta.low >>> 0, object.realNsDelta.high >>> 0).toNumber(true);\n    if (object.userNsDelta != null) if ($util.Long) (message.userNsDelta = $util.Long.fromValue(object.userNsDelta)).unsigned = true;else if (typeof object.userNsDelta === \"string\") message.userNsDelta = parseInt(object.userNsDelta, 10);else if (typeof object.userNsDelta === \"number\") message.userNsDelta = object.userNsDelta;else if (typeof object.userNsDelta === \"object\") message.userNsDelta = new $util.LongBits(object.userNsDelta.low >>> 0, object.userNsDelta.high >>> 0).toNumber(true);\n    if (object.sysNsDelta != null) if ($util.Long) (message.sysNsDelta = $util.Long.fromValue(object.sysNsDelta)).unsigned = true;else if (typeof object.sysNsDelta === \"string\") message.sysNsDelta = parseInt(object.sysNsDelta, 10);else if (typeof object.sysNsDelta === \"number\") message.sysNsDelta = object.sysNsDelta;else if (typeof object.sysNsDelta === \"object\") message.sysNsDelta = new $util.LongBits(object.sysNsDelta.low >>> 0, object.sysNsDelta.high >>> 0).toNumber(true);\n    return message;\n  };\n  /**\n   * Creates a plain object from a TimeStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof TimeStats\n   * @static\n   * @param {TimeStats} message TimeStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  TimeStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.uptimeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.uptimeNs = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.realNsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.realNsDelta = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.userNsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.userNsDelta = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.sysNsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.sysNsDelta = options.longs === String ? \"0\" : 0;\n    }\n\n    if (message.uptimeNs != null && message.hasOwnProperty(\"uptimeNs\")) if (typeof message.uptimeNs === \"number\") object.uptimeNs = options.longs === String ? String(message.uptimeNs) : message.uptimeNs;else object.uptimeNs = options.longs === String ? $util.Long.prototype.toString.call(message.uptimeNs) : options.longs === Number ? new $util.LongBits(message.uptimeNs.low >>> 0, message.uptimeNs.high >>> 0).toNumber(true) : message.uptimeNs;\n    if (message.realNsDelta != null && message.hasOwnProperty(\"realNsDelta\")) if (typeof message.realNsDelta === \"number\") object.realNsDelta = options.longs === String ? String(message.realNsDelta) : message.realNsDelta;else object.realNsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.realNsDelta) : options.longs === Number ? new $util.LongBits(message.realNsDelta.low >>> 0, message.realNsDelta.high >>> 0).toNumber(true) : message.realNsDelta;\n    if (message.userNsDelta != null && message.hasOwnProperty(\"userNsDelta\")) if (typeof message.userNsDelta === \"number\") object.userNsDelta = options.longs === String ? String(message.userNsDelta) : message.userNsDelta;else object.userNsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.userNsDelta) : options.longs === Number ? new $util.LongBits(message.userNsDelta.low >>> 0, message.userNsDelta.high >>> 0).toNumber(true) : message.userNsDelta;\n    if (message.sysNsDelta != null && message.hasOwnProperty(\"sysNsDelta\")) if (typeof message.sysNsDelta === \"number\") object.sysNsDelta = options.longs === String ? String(message.sysNsDelta) : message.sysNsDelta;else object.sysNsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.sysNsDelta) : options.longs === Number ? new $util.LongBits(message.sysNsDelta.low >>> 0, message.sysNsDelta.high >>> 0).toNumber(true) : message.sysNsDelta;\n    return object;\n  };\n  /**\n   * Converts this TimeStats to JSON.\n   * @function toJSON\n   * @memberof TimeStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  TimeStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return TimeStats;\n}();\n\n$root.StatsReport = function () {\n  /**\n   * Properties of a StatsReport.\n   * @exports IStatsReport\n   * @interface IStatsReport\n   * @property {IReportHeader|null} [header] StatsReport header\n   * @property {IMemStats|null} [memStats] StatsReport memStats\n   * @property {ITimeStats|null} [timeStats] StatsReport timeStats\n   * @property {google.protobuf.ITimestamp|null} [startTime] StatsReport startTime\n   * @property {google.protobuf.ITimestamp|null} [endTime] StatsReport endTime\n   * @property {number|null} [realtimeDuration] StatsReport realtimeDuration\n   * @property {Object.<string,IQueryStats>|null} [perQuery] StatsReport perQuery\n   * @property {Object.<string,IQueryStats>|null} [legacyPerQueryImplicitOperationName] StatsReport legacyPerQueryImplicitOperationName\n   * @property {Array.<IType>|null} [type] StatsReport type\n   */\n\n  /**\n   * Constructs a new StatsReport.\n   * @exports StatsReport\n   * @classdesc Represents a StatsReport.\n   * @implements IStatsReport\n   * @constructor\n   * @param {IStatsReport=} [properties] Properties to set\n   */\n  function StatsReport(properties) {\n    this.perQuery = {};\n    this.legacyPerQueryImplicitOperationName = {};\n    this.type = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * StatsReport header.\n   * @member {IReportHeader|null|undefined} header\n   * @memberof StatsReport\n   * @instance\n   */\n\n\n  StatsReport.prototype.header = null;\n  /**\n   * StatsReport memStats.\n   * @member {IMemStats|null|undefined} memStats\n   * @memberof StatsReport\n   * @instance\n   */\n\n  StatsReport.prototype.memStats = null;\n  /**\n   * StatsReport timeStats.\n   * @member {ITimeStats|null|undefined} timeStats\n   * @memberof StatsReport\n   * @instance\n   */\n\n  StatsReport.prototype.timeStats = null;\n  /**\n   * StatsReport startTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} startTime\n   * @memberof StatsReport\n   * @instance\n   */\n\n  StatsReport.prototype.startTime = null;\n  /**\n   * StatsReport endTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} endTime\n   * @memberof StatsReport\n   * @instance\n   */\n\n  StatsReport.prototype.endTime = null;\n  /**\n   * StatsReport realtimeDuration.\n   * @member {number} realtimeDuration\n   * @memberof StatsReport\n   * @instance\n   */\n\n  StatsReport.prototype.realtimeDuration = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * StatsReport perQuery.\n   * @member {Object.<string,IQueryStats>} perQuery\n   * @memberof StatsReport\n   * @instance\n   */\n\n  StatsReport.prototype.perQuery = $util.emptyObject;\n  /**\n   * StatsReport legacyPerQueryImplicitOperationName.\n   * @member {Object.<string,IQueryStats>} legacyPerQueryImplicitOperationName\n   * @memberof StatsReport\n   * @instance\n   */\n\n  StatsReport.prototype.legacyPerQueryImplicitOperationName = $util.emptyObject;\n  /**\n   * StatsReport type.\n   * @member {Array.<IType>} type\n   * @memberof StatsReport\n   * @instance\n   */\n\n  StatsReport.prototype.type = $util.emptyArray;\n  /**\n   * Creates a new StatsReport instance using the specified properties.\n   * @function create\n   * @memberof StatsReport\n   * @static\n   * @param {IStatsReport=} [properties] Properties to set\n   * @returns {StatsReport} StatsReport instance\n   */\n\n  StatsReport.create = function create(properties) {\n    return new StatsReport(properties);\n  };\n  /**\n   * Encodes the specified StatsReport message. Does not implicitly {@link StatsReport.verify|verify} messages.\n   * @function encode\n   * @memberof StatsReport\n   * @static\n   * @param {IStatsReport} message StatsReport message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  StatsReport.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.header != null && Object.hasOwnProperty.call(message, \"header\")) $root.ReportHeader.encode(message.header, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.memStats != null && Object.hasOwnProperty.call(message, \"memStats\")) $root.MemStats.encode(message.memStats, writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    if (message.timeStats != null && Object.hasOwnProperty.call(message, \"timeStats\")) $root.TimeStats.encode(message.timeStats, writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).fork()).ldelim();\n    if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\")) $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(\n    /* id 8, wireType 2 =*/\n    66).fork()).ldelim();\n    if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\")) $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(\n    /* id 9, wireType 2 =*/\n    74).fork()).ldelim();\n    if (message.realtimeDuration != null && Object.hasOwnProperty.call(message, \"realtimeDuration\")) writer.uint32(\n    /* id 10, wireType 0 =*/\n    80).uint64(message.realtimeDuration);\n    if (message.legacyPerQueryImplicitOperationName != null && Object.hasOwnProperty.call(message, \"legacyPerQueryImplicitOperationName\")) for (var keys = Object.keys(message.legacyPerQueryImplicitOperationName), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 12, wireType 2 =*/\n      98).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.QueryStats.encode(message.legacyPerQueryImplicitOperationName[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    if (message.type != null && message.type.length) for (var i = 0; i < message.type.length; ++i) $root.Type.encode(message.type[i], writer.uint32(\n    /* id 13, wireType 2 =*/\n    106).fork()).ldelim();\n    if (message.perQuery != null && Object.hasOwnProperty.call(message, \"perQuery\")) for (var keys = Object.keys(message.perQuery), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 14, wireType 2 =*/\n      114).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.QueryStats.encode(message.perQuery[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n  /**\n   * Encodes the specified StatsReport message, length delimited. Does not implicitly {@link StatsReport.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof StatsReport\n   * @static\n   * @param {IStatsReport} message StatsReport message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  StatsReport.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a StatsReport message from the specified reader or buffer.\n   * @function decode\n   * @memberof StatsReport\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {StatsReport} StatsReport\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  StatsReport.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.StatsReport(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.header = $root.ReportHeader.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.memStats = $root.MemStats.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.timeStats = $root.TimeStats.decode(reader, reader.uint32());\n          break;\n\n        case 8:\n          message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n\n        case 9:\n          message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n\n        case 10:\n          message.realtimeDuration = reader.uint64();\n          break;\n\n        case 14:\n          reader.skip().pos++;\n          if (message.perQuery === $util.emptyObject) message.perQuery = {};\n          key = reader.string();\n          reader.pos++;\n          message.perQuery[key] = $root.QueryStats.decode(reader, reader.uint32());\n          break;\n\n        case 12:\n          reader.skip().pos++;\n          if (message.legacyPerQueryImplicitOperationName === $util.emptyObject) message.legacyPerQueryImplicitOperationName = {};\n          key = reader.string();\n          reader.pos++;\n          message.legacyPerQueryImplicitOperationName[key] = $root.QueryStats.decode(reader, reader.uint32());\n          break;\n\n        case 13:\n          if (!(message.type && message.type.length)) message.type = [];\n          message.type.push($root.Type.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a StatsReport message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof StatsReport\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {StatsReport} StatsReport\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  StatsReport.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a StatsReport message.\n   * @function verify\n   * @memberof StatsReport\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  StatsReport.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.header != null && message.hasOwnProperty(\"header\")) {\n      var error = $root.ReportHeader.verify(message.header);\n      if (error) return \"header.\" + error;\n    }\n\n    if (message.memStats != null && message.hasOwnProperty(\"memStats\")) {\n      var error = $root.MemStats.verify(message.memStats);\n      if (error) return \"memStats.\" + error;\n    }\n\n    if (message.timeStats != null && message.hasOwnProperty(\"timeStats\")) {\n      var error = $root.TimeStats.verify(message.timeStats);\n      if (error) return \"timeStats.\" + error;\n    }\n\n    if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n      if (error) return \"startTime.\" + error;\n    }\n\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n      if (error) return \"endTime.\" + error;\n    }\n\n    if (message.realtimeDuration != null && message.hasOwnProperty(\"realtimeDuration\")) if (!$util.isInteger(message.realtimeDuration) && !(message.realtimeDuration && $util.isInteger(message.realtimeDuration.low) && $util.isInteger(message.realtimeDuration.high))) return \"realtimeDuration: integer|Long expected\";\n\n    if (message.perQuery != null && message.hasOwnProperty(\"perQuery\")) {\n      if (!$util.isObject(message.perQuery)) return \"perQuery: object expected\";\n      var key = Object.keys(message.perQuery);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.QueryStats.verify(message.perQuery[key[i]]);\n        if (error) return \"perQuery.\" + error;\n      }\n    }\n\n    if (message.legacyPerQueryImplicitOperationName != null && message.hasOwnProperty(\"legacyPerQueryImplicitOperationName\")) {\n      if (!$util.isObject(message.legacyPerQueryImplicitOperationName)) return \"legacyPerQueryImplicitOperationName: object expected\";\n      var key = Object.keys(message.legacyPerQueryImplicitOperationName);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.QueryStats.verify(message.legacyPerQueryImplicitOperationName[key[i]]);\n        if (error) return \"legacyPerQueryImplicitOperationName.\" + error;\n      }\n    }\n\n    if (message.type != null && message.hasOwnProperty(\"type\")) {\n      if (!Array.isArray(message.type)) return \"type: array expected\";\n\n      for (var i = 0; i < message.type.length; ++i) {\n        var error = $root.Type.verify(message.type[i]);\n        if (error) return \"type.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a StatsReport message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof StatsReport\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {StatsReport} StatsReport\n   */\n\n\n  StatsReport.fromObject = function fromObject(object) {\n    if (object instanceof $root.StatsReport) return object;\n    var message = new $root.StatsReport();\n\n    if (object.header != null) {\n      if (typeof object.header !== \"object\") throw TypeError(\".StatsReport.header: object expected\");\n      message.header = $root.ReportHeader.fromObject(object.header);\n    }\n\n    if (object.memStats != null) {\n      if (typeof object.memStats !== \"object\") throw TypeError(\".StatsReport.memStats: object expected\");\n      message.memStats = $root.MemStats.fromObject(object.memStats);\n    }\n\n    if (object.timeStats != null) {\n      if (typeof object.timeStats !== \"object\") throw TypeError(\".StatsReport.timeStats: object expected\");\n      message.timeStats = $root.TimeStats.fromObject(object.timeStats);\n    }\n\n    if (object.startTime != null) {\n      if (typeof object.startTime !== \"object\") throw TypeError(\".StatsReport.startTime: object expected\");\n      message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);\n    }\n\n    if (object.endTime != null) {\n      if (typeof object.endTime !== \"object\") throw TypeError(\".StatsReport.endTime: object expected\");\n      message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);\n    }\n\n    if (object.realtimeDuration != null) if ($util.Long) (message.realtimeDuration = $util.Long.fromValue(object.realtimeDuration)).unsigned = true;else if (typeof object.realtimeDuration === \"string\") message.realtimeDuration = parseInt(object.realtimeDuration, 10);else if (typeof object.realtimeDuration === \"number\") message.realtimeDuration = object.realtimeDuration;else if (typeof object.realtimeDuration === \"object\") message.realtimeDuration = new $util.LongBits(object.realtimeDuration.low >>> 0, object.realtimeDuration.high >>> 0).toNumber(true);\n\n    if (object.perQuery) {\n      if (typeof object.perQuery !== \"object\") throw TypeError(\".StatsReport.perQuery: object expected\");\n      message.perQuery = {};\n\n      for (var keys = Object.keys(object.perQuery), i = 0; i < keys.length; ++i) {\n        if (typeof object.perQuery[keys[i]] !== \"object\") throw TypeError(\".StatsReport.perQuery: object expected\");\n        message.perQuery[keys[i]] = $root.QueryStats.fromObject(object.perQuery[keys[i]]);\n      }\n    }\n\n    if (object.legacyPerQueryImplicitOperationName) {\n      if (typeof object.legacyPerQueryImplicitOperationName !== \"object\") throw TypeError(\".StatsReport.legacyPerQueryImplicitOperationName: object expected\");\n      message.legacyPerQueryImplicitOperationName = {};\n\n      for (var keys = Object.keys(object.legacyPerQueryImplicitOperationName), i = 0; i < keys.length; ++i) {\n        if (typeof object.legacyPerQueryImplicitOperationName[keys[i]] !== \"object\") throw TypeError(\".StatsReport.legacyPerQueryImplicitOperationName: object expected\");\n        message.legacyPerQueryImplicitOperationName[keys[i]] = $root.QueryStats.fromObject(object.legacyPerQueryImplicitOperationName[keys[i]]);\n      }\n    }\n\n    if (object.type) {\n      if (!Array.isArray(object.type)) throw TypeError(\".StatsReport.type: array expected\");\n      message.type = [];\n\n      for (var i = 0; i < object.type.length; ++i) {\n        if (typeof object.type[i] !== \"object\") throw TypeError(\".StatsReport.type: object expected\");\n        message.type[i] = $root.Type.fromObject(object.type[i]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a StatsReport message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof StatsReport\n   * @static\n   * @param {StatsReport} message StatsReport\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  StatsReport.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.type = [];\n\n    if (options.objects || options.defaults) {\n      object.legacyPerQueryImplicitOperationName = {};\n      object.perQuery = {};\n    }\n\n    if (options.defaults) {\n      object.header = null;\n      object.memStats = null;\n      object.timeStats = null;\n      object.startTime = null;\n      object.endTime = null;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.realtimeDuration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.realtimeDuration = options.longs === String ? \"0\" : 0;\n    }\n\n    if (message.header != null && message.hasOwnProperty(\"header\")) object.header = $root.ReportHeader.toObject(message.header, options);\n    if (message.memStats != null && message.hasOwnProperty(\"memStats\")) object.memStats = $root.MemStats.toObject(message.memStats, options);\n    if (message.timeStats != null && message.hasOwnProperty(\"timeStats\")) object.timeStats = $root.TimeStats.toObject(message.timeStats, options);\n    if (message.startTime != null && message.hasOwnProperty(\"startTime\")) object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n    if (message.realtimeDuration != null && message.hasOwnProperty(\"realtimeDuration\")) if (typeof message.realtimeDuration === \"number\") object.realtimeDuration = options.longs === String ? String(message.realtimeDuration) : message.realtimeDuration;else object.realtimeDuration = options.longs === String ? $util.Long.prototype.toString.call(message.realtimeDuration) : options.longs === Number ? new $util.LongBits(message.realtimeDuration.low >>> 0, message.realtimeDuration.high >>> 0).toNumber(true) : message.realtimeDuration;\n    var keys2;\n\n    if (message.legacyPerQueryImplicitOperationName && (keys2 = Object.keys(message.legacyPerQueryImplicitOperationName)).length) {\n      object.legacyPerQueryImplicitOperationName = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.legacyPerQueryImplicitOperationName[keys2[j]] = $root.QueryStats.toObject(message.legacyPerQueryImplicitOperationName[keys2[j]], options);\n    }\n\n    if (message.type && message.type.length) {\n      object.type = [];\n\n      for (var j = 0; j < message.type.length; ++j) object.type[j] = $root.Type.toObject(message.type[j], options);\n    }\n\n    if (message.perQuery && (keys2 = Object.keys(message.perQuery)).length) {\n      object.perQuery = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.perQuery[keys2[j]] = $root.QueryStats.toObject(message.perQuery[keys2[j]], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this StatsReport to JSON.\n   * @function toJSON\n   * @memberof StatsReport\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  StatsReport.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return StatsReport;\n}();\n\n$root.FullTracesReport = function () {\n  /**\n   * Properties of a FullTracesReport.\n   * @exports IFullTracesReport\n   * @interface IFullTracesReport\n   * @property {IReportHeader|null} [header] FullTracesReport header\n   * @property {Object.<string,ITraces>|null} [tracesPerQuery] FullTracesReport tracesPerQuery\n   */\n\n  /**\n   * Constructs a new FullTracesReport.\n   * @exports FullTracesReport\n   * @classdesc Represents a FullTracesReport.\n   * @implements IFullTracesReport\n   * @constructor\n   * @param {IFullTracesReport=} [properties] Properties to set\n   */\n  function FullTracesReport(properties) {\n    this.tracesPerQuery = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * FullTracesReport header.\n   * @member {IReportHeader|null|undefined} header\n   * @memberof FullTracesReport\n   * @instance\n   */\n\n\n  FullTracesReport.prototype.header = null;\n  /**\n   * FullTracesReport tracesPerQuery.\n   * @member {Object.<string,ITraces>} tracesPerQuery\n   * @memberof FullTracesReport\n   * @instance\n   */\n\n  FullTracesReport.prototype.tracesPerQuery = $util.emptyObject;\n  /**\n   * Creates a new FullTracesReport instance using the specified properties.\n   * @function create\n   * @memberof FullTracesReport\n   * @static\n   * @param {IFullTracesReport=} [properties] Properties to set\n   * @returns {FullTracesReport} FullTracesReport instance\n   */\n\n  FullTracesReport.create = function create(properties) {\n    return new FullTracesReport(properties);\n  };\n  /**\n   * Encodes the specified FullTracesReport message. Does not implicitly {@link FullTracesReport.verify|verify} messages.\n   * @function encode\n   * @memberof FullTracesReport\n   * @static\n   * @param {IFullTracesReport} message FullTracesReport message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  FullTracesReport.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.header != null && Object.hasOwnProperty.call(message, \"header\")) $root.ReportHeader.encode(message.header, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\")) for (var keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.Traces.encode(message.tracesPerQuery[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n  /**\n   * Encodes the specified FullTracesReport message, length delimited. Does not implicitly {@link FullTracesReport.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof FullTracesReport\n   * @static\n   * @param {IFullTracesReport} message FullTracesReport message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  FullTracesReport.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a FullTracesReport message from the specified reader or buffer.\n   * @function decode\n   * @memberof FullTracesReport\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {FullTracesReport} FullTracesReport\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  FullTracesReport.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.FullTracesReport(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.header = $root.ReportHeader.decode(reader, reader.uint32());\n          break;\n\n        case 5:\n          reader.skip().pos++;\n          if (message.tracesPerQuery === $util.emptyObject) message.tracesPerQuery = {};\n          key = reader.string();\n          reader.pos++;\n          message.tracesPerQuery[key] = $root.Traces.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a FullTracesReport message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof FullTracesReport\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {FullTracesReport} FullTracesReport\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  FullTracesReport.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a FullTracesReport message.\n   * @function verify\n   * @memberof FullTracesReport\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  FullTracesReport.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.header != null && message.hasOwnProperty(\"header\")) {\n      var error = $root.ReportHeader.verify(message.header);\n      if (error) return \"header.\" + error;\n    }\n\n    if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n      if (!$util.isObject(message.tracesPerQuery)) return \"tracesPerQuery: object expected\";\n      var key = Object.keys(message.tracesPerQuery);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.Traces.verify(message.tracesPerQuery[key[i]]);\n        if (error) return \"tracesPerQuery.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a FullTracesReport message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof FullTracesReport\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {FullTracesReport} FullTracesReport\n   */\n\n\n  FullTracesReport.fromObject = function fromObject(object) {\n    if (object instanceof $root.FullTracesReport) return object;\n    var message = new $root.FullTracesReport();\n\n    if (object.header != null) {\n      if (typeof object.header !== \"object\") throw TypeError(\".FullTracesReport.header: object expected\");\n      message.header = $root.ReportHeader.fromObject(object.header);\n    }\n\n    if (object.tracesPerQuery) {\n      if (typeof object.tracesPerQuery !== \"object\") throw TypeError(\".FullTracesReport.tracesPerQuery: object expected\");\n      message.tracesPerQuery = {};\n\n      for (var keys = Object.keys(object.tracesPerQuery), i = 0; i < keys.length; ++i) {\n        if (typeof object.tracesPerQuery[keys[i]] !== \"object\") throw TypeError(\".FullTracesReport.tracesPerQuery: object expected\");\n        message.tracesPerQuery[keys[i]] = $root.Traces.fromObject(object.tracesPerQuery[keys[i]]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a FullTracesReport message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof FullTracesReport\n   * @static\n   * @param {FullTracesReport} message FullTracesReport\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  FullTracesReport.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.tracesPerQuery = {};\n    if (options.defaults) object.header = null;\n    if (message.header != null && message.hasOwnProperty(\"header\")) object.header = $root.ReportHeader.toObject(message.header, options);\n    var keys2;\n\n    if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n      object.tracesPerQuery = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.tracesPerQuery[keys2[j]] = $root.Traces.toObject(message.tracesPerQuery[keys2[j]], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this FullTracesReport to JSON.\n   * @function toJSON\n   * @memberof FullTracesReport\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  FullTracesReport.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return FullTracesReport;\n}();\n\n$root.Traces = function () {\n  /**\n   * Properties of a Traces.\n   * @exports ITraces\n   * @interface ITraces\n   * @property {Array.<ITrace>|null} [trace] Traces trace\n   */\n\n  /**\n   * Constructs a new Traces.\n   * @exports Traces\n   * @classdesc Represents a Traces.\n   * @implements ITraces\n   * @constructor\n   * @param {ITraces=} [properties] Properties to set\n   */\n  function Traces(properties) {\n    this.trace = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * Traces trace.\n   * @member {Array.<ITrace>} trace\n   * @memberof Traces\n   * @instance\n   */\n\n\n  Traces.prototype.trace = $util.emptyArray;\n  /**\n   * Creates a new Traces instance using the specified properties.\n   * @function create\n   * @memberof Traces\n   * @static\n   * @param {ITraces=} [properties] Properties to set\n   * @returns {Traces} Traces instance\n   */\n\n  Traces.create = function create(properties) {\n    return new Traces(properties);\n  };\n  /**\n   * Encodes the specified Traces message. Does not implicitly {@link Traces.verify|verify} messages.\n   * @function encode\n   * @memberof Traces\n   * @static\n   * @param {ITraces} message Traces message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Traces.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.trace != null && message.trace.length) for (var i = 0; i < message.trace.length; ++i) $root.Trace.encode(message.trace[i], writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified Traces message, length delimited. Does not implicitly {@link Traces.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Traces\n   * @static\n   * @param {ITraces} message Traces message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Traces.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a Traces message from the specified reader or buffer.\n   * @function decode\n   * @memberof Traces\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Traces} Traces\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Traces.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Traces();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          if (!(message.trace && message.trace.length)) message.trace = [];\n          message.trace.push($root.Trace.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a Traces message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Traces\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Traces} Traces\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Traces.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a Traces message.\n   * @function verify\n   * @memberof Traces\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  Traces.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n      if (!Array.isArray(message.trace)) return \"trace: array expected\";\n\n      for (var i = 0; i < message.trace.length; ++i) {\n        var error = $root.Trace.verify(message.trace[i]);\n        if (error) return \"trace.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a Traces message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Traces\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Traces} Traces\n   */\n\n\n  Traces.fromObject = function fromObject(object) {\n    if (object instanceof $root.Traces) return object;\n    var message = new $root.Traces();\n\n    if (object.trace) {\n      if (!Array.isArray(object.trace)) throw TypeError(\".Traces.trace: array expected\");\n      message.trace = [];\n\n      for (var i = 0; i < object.trace.length; ++i) {\n        if (typeof object.trace[i] !== \"object\") throw TypeError(\".Traces.trace: object expected\");\n        message.trace[i] = $root.Trace.fromObject(object.trace[i]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a Traces message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Traces\n   * @static\n   * @param {Traces} message Traces\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Traces.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.trace = [];\n\n    if (message.trace && message.trace.length) {\n      object.trace = [];\n\n      for (var j = 0; j < message.trace.length; ++j) object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this Traces to JSON.\n   * @function toJSON\n   * @memberof Traces\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Traces.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Traces;\n}();\n\n$root.TraceV1 = function () {\n  /**\n   * Properties of a TraceV1.\n   * @exports ITraceV1\n   * @interface ITraceV1\n   * @property {IReportHeader|null} [header] TraceV1 header\n   * @property {ITrace|null} [trace] TraceV1 trace\n   */\n\n  /**\n   * Constructs a new TraceV1.\n   * @exports TraceV1\n   * @classdesc Represents a TraceV1.\n   * @implements ITraceV1\n   * @constructor\n   * @param {ITraceV1=} [properties] Properties to set\n   */\n  function TraceV1(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * TraceV1 header.\n   * @member {IReportHeader|null|undefined} header\n   * @memberof TraceV1\n   * @instance\n   */\n\n\n  TraceV1.prototype.header = null;\n  /**\n   * TraceV1 trace.\n   * @member {ITrace|null|undefined} trace\n   * @memberof TraceV1\n   * @instance\n   */\n\n  TraceV1.prototype.trace = null;\n  /**\n   * Creates a new TraceV1 instance using the specified properties.\n   * @function create\n   * @memberof TraceV1\n   * @static\n   * @param {ITraceV1=} [properties] Properties to set\n   * @returns {TraceV1} TraceV1 instance\n   */\n\n  TraceV1.create = function create(properties) {\n    return new TraceV1(properties);\n  };\n  /**\n   * Encodes the specified TraceV1 message. Does not implicitly {@link TraceV1.verify|verify} messages.\n   * @function encode\n   * @memberof TraceV1\n   * @static\n   * @param {ITraceV1} message TraceV1 message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TraceV1.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.header != null && Object.hasOwnProperty.call(message, \"header\")) $root.ReportHeader.encode(message.header, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\")) $root.Trace.encode(message.trace, writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified TraceV1 message, length delimited. Does not implicitly {@link TraceV1.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof TraceV1\n   * @static\n   * @param {ITraceV1} message TraceV1 message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TraceV1.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a TraceV1 message from the specified reader or buffer.\n   * @function decode\n   * @memberof TraceV1\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {TraceV1} TraceV1\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TraceV1.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.TraceV1();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.header = $root.ReportHeader.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.trace = $root.Trace.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a TraceV1 message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof TraceV1\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {TraceV1} TraceV1\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TraceV1.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a TraceV1 message.\n   * @function verify\n   * @memberof TraceV1\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  TraceV1.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.header != null && message.hasOwnProperty(\"header\")) {\n      var error = $root.ReportHeader.verify(message.header);\n      if (error) return \"header.\" + error;\n    }\n\n    if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n      var error = $root.Trace.verify(message.trace);\n      if (error) return \"trace.\" + error;\n    }\n\n    return null;\n  };\n  /**\n   * Creates a TraceV1 message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof TraceV1\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {TraceV1} TraceV1\n   */\n\n\n  TraceV1.fromObject = function fromObject(object) {\n    if (object instanceof $root.TraceV1) return object;\n    var message = new $root.TraceV1();\n\n    if (object.header != null) {\n      if (typeof object.header !== \"object\") throw TypeError(\".TraceV1.header: object expected\");\n      message.header = $root.ReportHeader.fromObject(object.header);\n    }\n\n    if (object.trace != null) {\n      if (typeof object.trace !== \"object\") throw TypeError(\".TraceV1.trace: object expected\");\n      message.trace = $root.Trace.fromObject(object.trace);\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a TraceV1 message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof TraceV1\n   * @static\n   * @param {TraceV1} message TraceV1\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  TraceV1.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.header = null;\n      object.trace = null;\n    }\n\n    if (message.header != null && message.hasOwnProperty(\"header\")) object.header = $root.ReportHeader.toObject(message.header, options);\n    if (message.trace != null && message.hasOwnProperty(\"trace\")) object.trace = $root.Trace.toObject(message.trace, options);\n    return object;\n  };\n  /**\n   * Converts this TraceV1 to JSON.\n   * @function toJSON\n   * @memberof TraceV1\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  TraceV1.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return TraceV1;\n}();\n\n$root.google = function () {\n  /**\n   * Namespace google.\n   * @exports google\n   * @namespace\n   */\n  var google = {};\n\n  google.protobuf = function () {\n    /**\n     * Namespace protobuf.\n     * @memberof google\n     * @namespace\n     */\n    var protobuf = {};\n\n    protobuf.Timestamp = function () {\n      /**\n       * Properties of a Timestamp.\n       * @memberof google.protobuf\n       * @interface ITimestamp\n       * @property {number|null} [seconds] Timestamp seconds\n       * @property {number|null} [nanos] Timestamp nanos\n       */\n\n      /**\n       * Constructs a new Timestamp.\n       * @memberof google.protobuf\n       * @classdesc Represents a Timestamp.\n       * @implements ITimestamp\n       * @constructor\n       * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n       */\n      function Timestamp(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Timestamp seconds.\n       * @member {number} seconds\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       */\n\n\n      Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Timestamp nanos.\n       * @member {number} nanos\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       */\n\n      Timestamp.prototype.nanos = 0;\n      /**\n       * Creates a new Timestamp instance using the specified properties.\n       * @function create\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n       * @returns {google.protobuf.Timestamp} Timestamp instance\n       */\n\n      Timestamp.create = function create(properties) {\n        return new Timestamp(properties);\n      };\n      /**\n       * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n       * @function encode\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Timestamp.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\")) writer.uint32(\n        /* id 1, wireType 0 =*/\n        8).int64(message.seconds);\n        if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).int32(message.nanos);\n        return writer;\n      };\n      /**\n       * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Timestamp message from the specified reader or buffer.\n       * @function decode\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {google.protobuf.Timestamp} Timestamp\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Timestamp.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.google.protobuf.Timestamp();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.seconds = reader.int64();\n              break;\n\n            case 2:\n              message.nanos = reader.int32();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {google.protobuf.Timestamp} Timestamp\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Timestamp.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Timestamp message.\n       * @function verify\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Timestamp.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.seconds != null && message.hasOwnProperty(\"seconds\")) if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high))) return \"seconds: integer|Long expected\";\n        if (message.nanos != null && message.hasOwnProperty(\"nanos\")) if (!$util.isInteger(message.nanos)) return \"nanos: integer expected\";\n        return null;\n      };\n      /**\n       * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {google.protobuf.Timestamp} Timestamp\n       */\n\n\n      Timestamp.fromObject = function fromObject(object) {\n        if (object instanceof $root.google.protobuf.Timestamp) return object;\n        var message = new $root.google.protobuf.Timestamp();\n        if (object.seconds != null) if ($util.Long) (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;else if (typeof object.seconds === \"string\") message.seconds = parseInt(object.seconds, 10);else if (typeof object.seconds === \"number\") message.seconds = object.seconds;else if (typeof object.seconds === \"object\") message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n        if (object.nanos != null) message.nanos = object.nanos | 0;\n        return message;\n      };\n      /**\n       * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.Timestamp} message Timestamp\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Timestamp.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.seconds = options.longs === String ? \"0\" : 0;\n\n          object.nanos = 0;\n        }\n\n        if (message.seconds != null && message.hasOwnProperty(\"seconds\")) if (typeof message.seconds === \"number\") object.seconds = options.longs === String ? String(message.seconds) : message.seconds;else object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n        if (message.nanos != null && message.hasOwnProperty(\"nanos\")) object.nanos = message.nanos;\n        return object;\n      };\n      /**\n       * Converts this Timestamp to JSON.\n       * @function toJSON\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Timestamp.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Timestamp;\n    }();\n\n    return protobuf;\n  }();\n\n  return google;\n}();\n\nmodule.exports = $root;","map":{"version":3,"sources":["/home/jay/Desktop/homepage/node_modules/apollo-engine-reporting-protobuf/dist/protobuf.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Trace","properties","keys","Object","i","length","prototype","startTime","endTime","durationNs","Long","fromBits","root","signature","details","clientName","clientVersion","clientAddress","clientReferenceId","http","cachePolicy","queryPlan","fullQueryCacheHit","persistedQueryHit","persistedQueryRegister","registeredOperation","forbiddenOperation","originReportedStartTime","originReportedEndTime","originReportedDurationNs","legacySignatureNeedsResigning","create","encode","message","writer","hasOwnProperty","call","google","protobuf","Timestamp","uint32","fork","ldelim","string","Details","HTTP","uint64","Node","CachePolicy","bool","QueryPlanNode","encodeDelimited","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","error","isInteger","low","high","isString","fromObject","object","TypeError","fromValue","unsigned","parseInt","LongBits","toNumber","String","Boolean","toObject","options","defaults","long","longs","toString","Number","toJSON","constructor","toJSONOptions","scope","maxAgeNs","int32","int64","enums","Scope","valuesById","values","variablesJson","variables","emptyObject","rawQuery","operationName","bytes","key","skip","isObject","base64","newBuffer","objects","keys2","j","Array","slice","Error","location","emptyArray","timeNs","json","Location","push","isArray","arrays","requestHeaders","responseHeaders","method","host","path","statusCode","secure","protocol","Values","Method","value","line","column","child","responseName","index","originalFieldName","type","parentType","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","id","oneofs","sequence","parallel","fetch","flatten","SequenceNode","ParallelNode","FetchNode","FlattenNode","node","nodes","serviceName","traceParsingFailed","trace","sentTimeOffset","sentTime","receivedTime","responsePath","ResponsePathElement","fieldName","ReportHeader","service","hostname","agentVersion","serviceVersion","runtimeVersion","uname","schemaTag","schemaHash","PathErrorStats","children","errorsCount","requestsWithErrorsCount","ClientNameStats","latencyCount","requestsCountPerVersion","cacheHitsPerVersion","persistedQueryHitsPerVersion","persistedQueryMissesPerVersion","registeredOperationCountPerVersion","forbiddenOperationCountPerVersion","cacheLatencyCount","publicCacheTtlCount","privateCacheTtlCount","rootErrorStats","end2","QueryLatencyStats","requestCount","cacheHits","persistedQueryHits","persistedQueryMisses","registeredOperationCount","forbiddenOperationCount","StatsContext","ContextualizedQueryLatencyStats","queryLatencyStats","context","ContextualizedTypeStats","perTypeStat","TypeStat","FieldStat","name","returnType","count","field","perFieldStat","QueryStats","perClientName","queryStatsWithContext","perType","typeStatsWithContext","TracesReport","header","Field","Type","MemStats","totalBytes","stackBytes","heapBytes","heapReleasedBytes","gcOverheadBytes","stackUsedBytes","heapAllocatedBytes","heapAllocatedObjects","heapAllocatedBytesDelta","heapAllocatedObjectsDelta","heapFreedObjectsDelta","gcStwNsDelta","gcCountDelta","TimeStats","uptimeNs","realNsDelta","userNsDelta","sysNsDelta","StatsReport","perQuery","legacyPerQueryImplicitOperationName","memStats","timeStats","realtimeDuration","FullTracesReport","tracesPerQuery","Traces","TraceV1","seconds","nanos","module","exports"],"mappings":"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","sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"@apollo/protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.Trace = (function() {\n\n    /**\n     * Properties of a Trace.\n     * @exports ITrace\n     * @interface ITrace\n     * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n     * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n     * @property {number|null} [durationNs] Trace durationNs\n     * @property {Trace.INode|null} [root] Trace root\n     * @property {string|null} [signature] Trace signature\n     * @property {Trace.IDetails|null} [details] Trace details\n     * @property {string|null} [clientName] Trace clientName\n     * @property {string|null} [clientVersion] Trace clientVersion\n     * @property {string|null} [clientAddress] Trace clientAddress\n     * @property {string|null} [clientReferenceId] Trace clientReferenceId\n     * @property {Trace.IHTTP|null} [http] Trace http\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n     * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n     * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n     * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n     * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n     * @property {boolean|null} [registeredOperation] Trace registeredOperation\n     * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n     * @property {google.protobuf.ITimestamp|null} [originReportedStartTime] Trace originReportedStartTime\n     * @property {google.protobuf.ITimestamp|null} [originReportedEndTime] Trace originReportedEndTime\n     * @property {number|null} [originReportedDurationNs] Trace originReportedDurationNs\n     * @property {string|null} [legacySignatureNeedsResigning] Trace legacySignatureNeedsResigning\n     */\n\n    /**\n     * Constructs a new Trace.\n     * @exports Trace\n     * @classdesc Represents a Trace.\n     * @implements ITrace\n     * @constructor\n     * @param {ITrace=} [properties] Properties to set\n     */\n    function Trace(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Trace startTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} startTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.startTime = null;\n\n    /**\n     * Trace endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.endTime = null;\n\n    /**\n     * Trace durationNs.\n     * @member {number} durationNs\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.durationNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Trace root.\n     * @member {Trace.INode|null|undefined} root\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.root = null;\n\n    /**\n     * Trace signature.\n     * @member {string} signature\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.signature = \"\";\n\n    /**\n     * Trace details.\n     * @member {Trace.IDetails|null|undefined} details\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.details = null;\n\n    /**\n     * Trace clientName.\n     * @member {string} clientName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientName = \"\";\n\n    /**\n     * Trace clientVersion.\n     * @member {string} clientVersion\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientVersion = \"\";\n\n    /**\n     * Trace clientAddress.\n     * @member {string} clientAddress\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientAddress = \"\";\n\n    /**\n     * Trace clientReferenceId.\n     * @member {string} clientReferenceId\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientReferenceId = \"\";\n\n    /**\n     * Trace http.\n     * @member {Trace.IHTTP|null|undefined} http\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.http = null;\n\n    /**\n     * Trace cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.cachePolicy = null;\n\n    /**\n     * Trace queryPlan.\n     * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.queryPlan = null;\n\n    /**\n     * Trace fullQueryCacheHit.\n     * @member {boolean} fullQueryCacheHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fullQueryCacheHit = false;\n\n    /**\n     * Trace persistedQueryHit.\n     * @member {boolean} persistedQueryHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryHit = false;\n\n    /**\n     * Trace persistedQueryRegister.\n     * @member {boolean} persistedQueryRegister\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryRegister = false;\n\n    /**\n     * Trace registeredOperation.\n     * @member {boolean} registeredOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.registeredOperation = false;\n\n    /**\n     * Trace forbiddenOperation.\n     * @member {boolean} forbiddenOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.forbiddenOperation = false;\n\n    /**\n     * Trace originReportedStartTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} originReportedStartTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.originReportedStartTime = null;\n\n    /**\n     * Trace originReportedEndTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} originReportedEndTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.originReportedEndTime = null;\n\n    /**\n     * Trace originReportedDurationNs.\n     * @member {number} originReportedDurationNs\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.originReportedDurationNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Trace legacySignatureNeedsResigning.\n     * @member {string} legacySignatureNeedsResigning\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.legacySignatureNeedsResigning = \"\";\n\n    /**\n     * Creates a new Trace instance using the specified properties.\n     * @function create\n     * @memberof Trace\n     * @static\n     * @param {ITrace=} [properties] Properties to set\n     * @returns {Trace} Trace instance\n     */\n    Trace.create = function create(properties) {\n        return new Trace(properties);\n    };\n\n    /**\n     * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encode\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.legacySignatureNeedsResigning != null && Object.hasOwnProperty.call(message, \"legacySignatureNeedsResigning\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.legacySignatureNeedsResigning);\n        if (message.details != null && Object.hasOwnProperty.call(message, \"details\"))\n            $root.Trace.Details.encode(message.details, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.clientVersion);\n        if (message.clientAddress != null && Object.hasOwnProperty.call(message, \"clientAddress\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.clientAddress);\n        if (message.http != null && Object.hasOwnProperty.call(message, \"http\"))\n            $root.Trace.HTTP.encode(message.http, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.durationNs);\n        if (message.root != null && Object.hasOwnProperty.call(message, \"root\"))\n            $root.Trace.Node.encode(message.root, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n        if (message.originReportedStartTime != null && Object.hasOwnProperty.call(message, \"originReportedStartTime\"))\n            $root.google.protobuf.Timestamp.encode(message.originReportedStartTime, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n        if (message.originReportedEndTime != null && Object.hasOwnProperty.call(message, \"originReportedEndTime\"))\n            $root.google.protobuf.Timestamp.encode(message.originReportedEndTime, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n        if (message.originReportedDurationNs != null && Object.hasOwnProperty.call(message, \"originReportedDurationNs\"))\n            writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.originReportedDurationNs);\n        if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n            $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\"))\n            writer.uint32(/* id 19, wireType 2 =*/154).string(message.signature);\n        if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\"))\n            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.fullQueryCacheHit);\n        if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\"))\n            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.persistedQueryHit);\n        if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\"))\n            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.persistedQueryRegister);\n        if (message.clientReferenceId != null && Object.hasOwnProperty.call(message, \"clientReferenceId\"))\n            writer.uint32(/* id 23, wireType 2 =*/186).string(message.clientReferenceId);\n        if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\"))\n            writer.uint32(/* id 24, wireType 0 =*/192).bool(message.registeredOperation);\n        if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\"))\n            writer.uint32(/* id 25, wireType 0 =*/200).bool(message.forbiddenOperation);\n        if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\"))\n            $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 4:\n                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.durationNs = reader.uint64();\n                break;\n            case 14:\n                message.root = $root.Trace.Node.decode(reader, reader.uint32());\n                break;\n            case 19:\n                message.signature = reader.string();\n                break;\n            case 6:\n                message.details = $root.Trace.Details.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.clientName = reader.string();\n                break;\n            case 8:\n                message.clientVersion = reader.string();\n                break;\n            case 9:\n                message.clientAddress = reader.string();\n                break;\n            case 23:\n                message.clientReferenceId = reader.string();\n                break;\n            case 10:\n                message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n                break;\n            case 18:\n                message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                break;\n            case 26:\n                message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                break;\n            case 20:\n                message.fullQueryCacheHit = reader.bool();\n                break;\n            case 21:\n                message.persistedQueryHit = reader.bool();\n                break;\n            case 22:\n                message.persistedQueryRegister = reader.bool();\n                break;\n            case 24:\n                message.registeredOperation = reader.bool();\n                break;\n            case 25:\n                message.forbiddenOperation = reader.bool();\n                break;\n            case 15:\n                message.originReportedStartTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 16:\n                message.originReportedEndTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 17:\n                message.originReportedDurationNs = reader.uint64();\n                break;\n            case 5:\n                message.legacySignatureNeedsResigning = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Trace message.\n     * @function verify\n     * @memberof Trace\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Trace.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n            if (error)\n                return \"startTime.\" + error;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high)))\n                return \"durationNs: integer|Long expected\";\n        if (message.root != null && message.hasOwnProperty(\"root\")) {\n            var error = $root.Trace.Node.verify(message.root);\n            if (error)\n                return \"root.\" + error;\n        }\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            if (!$util.isString(message.signature))\n                return \"signature: string expected\";\n        if (message.details != null && message.hasOwnProperty(\"details\")) {\n            var error = $root.Trace.Details.verify(message.details);\n            if (error)\n                return \"details.\" + error;\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        if (message.clientAddress != null && message.hasOwnProperty(\"clientAddress\"))\n            if (!$util.isString(message.clientAddress))\n                return \"clientAddress: string expected\";\n        if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\"))\n            if (!$util.isString(message.clientReferenceId))\n                return \"clientReferenceId: string expected\";\n        if (message.http != null && message.hasOwnProperty(\"http\")) {\n            var error = $root.Trace.HTTP.verify(message.http);\n            if (error)\n                return \"http.\" + error;\n        }\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n            var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n            if (error)\n                return \"cachePolicy.\" + error;\n        }\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n            var error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n            if (error)\n                return \"queryPlan.\" + error;\n        }\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            if (typeof message.fullQueryCacheHit !== \"boolean\")\n                return \"fullQueryCacheHit: boolean expected\";\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            if (typeof message.persistedQueryHit !== \"boolean\")\n                return \"persistedQueryHit: boolean expected\";\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            if (typeof message.persistedQueryRegister !== \"boolean\")\n                return \"persistedQueryRegister: boolean expected\";\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            if (typeof message.registeredOperation !== \"boolean\")\n                return \"registeredOperation: boolean expected\";\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            if (typeof message.forbiddenOperation !== \"boolean\")\n                return \"forbiddenOperation: boolean expected\";\n        if (message.originReportedStartTime != null && message.hasOwnProperty(\"originReportedStartTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.originReportedStartTime);\n            if (error)\n                return \"originReportedStartTime.\" + error;\n        }\n        if (message.originReportedEndTime != null && message.hasOwnProperty(\"originReportedEndTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.originReportedEndTime);\n            if (error)\n                return \"originReportedEndTime.\" + error;\n        }\n        if (message.originReportedDurationNs != null && message.hasOwnProperty(\"originReportedDurationNs\"))\n            if (!$util.isInteger(message.originReportedDurationNs) && !(message.originReportedDurationNs && $util.isInteger(message.originReportedDurationNs.low) && $util.isInteger(message.originReportedDurationNs.high)))\n                return \"originReportedDurationNs: integer|Long expected\";\n        if (message.legacySignatureNeedsResigning != null && message.hasOwnProperty(\"legacySignatureNeedsResigning\"))\n            if (!$util.isString(message.legacySignatureNeedsResigning))\n                return \"legacySignatureNeedsResigning: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Trace message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace} Trace\n     */\n    Trace.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace)\n            return object;\n        var message = new $root.Trace();\n        if (object.startTime != null) {\n            if (typeof object.startTime !== \"object\")\n                throw TypeError(\".Trace.startTime: object expected\");\n            message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);\n        }\n        if (object.endTime != null) {\n            if (typeof object.endTime !== \"object\")\n                throw TypeError(\".Trace.endTime: object expected\");\n            message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);\n        }\n        if (object.durationNs != null)\n            if ($util.Long)\n                (message.durationNs = $util.Long.fromValue(object.durationNs)).unsigned = true;\n            else if (typeof object.durationNs === \"string\")\n                message.durationNs = parseInt(object.durationNs, 10);\n            else if (typeof object.durationNs === \"number\")\n                message.durationNs = object.durationNs;\n            else if (typeof object.durationNs === \"object\")\n                message.durationNs = new $util.LongBits(object.durationNs.low >>> 0, object.durationNs.high >>> 0).toNumber(true);\n        if (object.root != null) {\n            if (typeof object.root !== \"object\")\n                throw TypeError(\".Trace.root: object expected\");\n            message.root = $root.Trace.Node.fromObject(object.root);\n        }\n        if (object.signature != null)\n            message.signature = String(object.signature);\n        if (object.details != null) {\n            if (typeof object.details !== \"object\")\n                throw TypeError(\".Trace.details: object expected\");\n            message.details = $root.Trace.Details.fromObject(object.details);\n        }\n        if (object.clientName != null)\n            message.clientName = String(object.clientName);\n        if (object.clientVersion != null)\n            message.clientVersion = String(object.clientVersion);\n        if (object.clientAddress != null)\n            message.clientAddress = String(object.clientAddress);\n        if (object.clientReferenceId != null)\n            message.clientReferenceId = String(object.clientReferenceId);\n        if (object.http != null) {\n            if (typeof object.http !== \"object\")\n                throw TypeError(\".Trace.http: object expected\");\n            message.http = $root.Trace.HTTP.fromObject(object.http);\n        }\n        if (object.cachePolicy != null) {\n            if (typeof object.cachePolicy !== \"object\")\n                throw TypeError(\".Trace.cachePolicy: object expected\");\n            message.cachePolicy = $root.Trace.CachePolicy.fromObject(object.cachePolicy);\n        }\n        if (object.queryPlan != null) {\n            if (typeof object.queryPlan !== \"object\")\n                throw TypeError(\".Trace.queryPlan: object expected\");\n            message.queryPlan = $root.Trace.QueryPlanNode.fromObject(object.queryPlan);\n        }\n        if (object.fullQueryCacheHit != null)\n            message.fullQueryCacheHit = Boolean(object.fullQueryCacheHit);\n        if (object.persistedQueryHit != null)\n            message.persistedQueryHit = Boolean(object.persistedQueryHit);\n        if (object.persistedQueryRegister != null)\n            message.persistedQueryRegister = Boolean(object.persistedQueryRegister);\n        if (object.registeredOperation != null)\n            message.registeredOperation = Boolean(object.registeredOperation);\n        if (object.forbiddenOperation != null)\n            message.forbiddenOperation = Boolean(object.forbiddenOperation);\n        if (object.originReportedStartTime != null) {\n            if (typeof object.originReportedStartTime !== \"object\")\n                throw TypeError(\".Trace.originReportedStartTime: object expected\");\n            message.originReportedStartTime = $root.google.protobuf.Timestamp.fromObject(object.originReportedStartTime);\n        }\n        if (object.originReportedEndTime != null) {\n            if (typeof object.originReportedEndTime !== \"object\")\n                throw TypeError(\".Trace.originReportedEndTime: object expected\");\n            message.originReportedEndTime = $root.google.protobuf.Timestamp.fromObject(object.originReportedEndTime);\n        }\n        if (object.originReportedDurationNs != null)\n            if ($util.Long)\n                (message.originReportedDurationNs = $util.Long.fromValue(object.originReportedDurationNs)).unsigned = true;\n            else if (typeof object.originReportedDurationNs === \"string\")\n                message.originReportedDurationNs = parseInt(object.originReportedDurationNs, 10);\n            else if (typeof object.originReportedDurationNs === \"number\")\n                message.originReportedDurationNs = object.originReportedDurationNs;\n            else if (typeof object.originReportedDurationNs === \"object\")\n                message.originReportedDurationNs = new $util.LongBits(object.originReportedDurationNs.low >>> 0, object.originReportedDurationNs.high >>> 0).toNumber(true);\n        if (object.legacySignatureNeedsResigning != null)\n            message.legacySignatureNeedsResigning = String(object.legacySignatureNeedsResigning);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Trace message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace\n     * @static\n     * @param {Trace} message Trace\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Trace.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.endTime = null;\n            object.startTime = null;\n            object.legacySignatureNeedsResigning = \"\";\n            object.details = null;\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n            object.clientAddress = \"\";\n            object.http = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.durationNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.durationNs = options.longs === String ? \"0\" : 0;\n            object.root = null;\n            object.originReportedStartTime = null;\n            object.originReportedEndTime = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.originReportedDurationNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.originReportedDurationNs = options.longs === String ? \"0\" : 0;\n            object.cachePolicy = null;\n            object.signature = \"\";\n            object.fullQueryCacheHit = false;\n            object.persistedQueryHit = false;\n            object.persistedQueryRegister = false;\n            object.clientReferenceId = \"\";\n            object.registeredOperation = false;\n            object.forbiddenOperation = false;\n            object.queryPlan = null;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n        if (message.legacySignatureNeedsResigning != null && message.hasOwnProperty(\"legacySignatureNeedsResigning\"))\n            object.legacySignatureNeedsResigning = message.legacySignatureNeedsResigning;\n        if (message.details != null && message.hasOwnProperty(\"details\"))\n            object.details = $root.Trace.Details.toObject(message.details, options);\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        if (message.clientAddress != null && message.hasOwnProperty(\"clientAddress\"))\n            object.clientAddress = message.clientAddress;\n        if (message.http != null && message.hasOwnProperty(\"http\"))\n            object.http = $root.Trace.HTTP.toObject(message.http, options);\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (typeof message.durationNs === \"number\")\n                object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;\n            else\n                object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n        if (message.root != null && message.hasOwnProperty(\"root\"))\n            object.root = $root.Trace.Node.toObject(message.root, options);\n        if (message.originReportedStartTime != null && message.hasOwnProperty(\"originReportedStartTime\"))\n            object.originReportedStartTime = $root.google.protobuf.Timestamp.toObject(message.originReportedStartTime, options);\n        if (message.originReportedEndTime != null && message.hasOwnProperty(\"originReportedEndTime\"))\n            object.originReportedEndTime = $root.google.protobuf.Timestamp.toObject(message.originReportedEndTime, options);\n        if (message.originReportedDurationNs != null && message.hasOwnProperty(\"originReportedDurationNs\"))\n            if (typeof message.originReportedDurationNs === \"number\")\n                object.originReportedDurationNs = options.longs === String ? String(message.originReportedDurationNs) : message.originReportedDurationNs;\n            else\n                object.originReportedDurationNs = options.longs === String ? $util.Long.prototype.toString.call(message.originReportedDurationNs) : options.longs === Number ? new $util.LongBits(message.originReportedDurationNs.low >>> 0, message.originReportedDurationNs.high >>> 0).toNumber(true) : message.originReportedDurationNs;\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n            object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            object.signature = message.signature;\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            object.fullQueryCacheHit = message.fullQueryCacheHit;\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            object.persistedQueryHit = message.persistedQueryHit;\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            object.persistedQueryRegister = message.persistedQueryRegister;\n        if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\"))\n            object.clientReferenceId = message.clientReferenceId;\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            object.registeredOperation = message.registeredOperation;\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            object.forbiddenOperation = message.forbiddenOperation;\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\"))\n            object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n        return object;\n    };\n\n    /**\n     * Converts this Trace to JSON.\n     * @function toJSON\n     * @memberof Trace\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Trace.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Trace.CachePolicy = (function() {\n\n        /**\n         * Properties of a CachePolicy.\n         * @memberof Trace\n         * @interface ICachePolicy\n         * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n         * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n         */\n\n        /**\n         * Constructs a new CachePolicy.\n         * @memberof Trace\n         * @classdesc Represents a CachePolicy.\n         * @implements ICachePolicy\n         * @constructor\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         */\n        function CachePolicy(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CachePolicy scope.\n         * @member {Trace.CachePolicy.Scope} scope\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.scope = 0;\n\n        /**\n         * CachePolicy maxAgeNs.\n         * @member {number} maxAgeNs\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.maxAgeNs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new CachePolicy instance using the specified properties.\n         * @function create\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         * @returns {Trace.CachePolicy} CachePolicy instance\n         */\n        CachePolicy.create = function create(properties) {\n            return new CachePolicy(properties);\n        };\n\n        /**\n         * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scope);\n            if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxAgeNs);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.CachePolicy();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.scope = reader.int32();\n                    break;\n                case 2:\n                    message.maxAgeNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CachePolicy message.\n         * @function verify\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CachePolicy.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                switch (message.scope) {\n                default:\n                    return \"scope: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high)))\n                    return \"maxAgeNs: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CachePolicy message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.CachePolicy} CachePolicy\n         */\n        CachePolicy.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.CachePolicy)\n                return object;\n            var message = new $root.Trace.CachePolicy();\n            switch (object.scope) {\n            case \"UNKNOWN\":\n            case 0:\n                message.scope = 0;\n                break;\n            case \"PUBLIC\":\n            case 1:\n                message.scope = 1;\n                break;\n            case \"PRIVATE\":\n            case 2:\n                message.scope = 2;\n                break;\n            }\n            if (object.maxAgeNs != null)\n                if ($util.Long)\n                    (message.maxAgeNs = $util.Long.fromValue(object.maxAgeNs)).unsigned = false;\n                else if (typeof object.maxAgeNs === \"string\")\n                    message.maxAgeNs = parseInt(object.maxAgeNs, 10);\n                else if (typeof object.maxAgeNs === \"number\")\n                    message.maxAgeNs = object.maxAgeNs;\n                else if (typeof object.maxAgeNs === \"object\")\n                    message.maxAgeNs = new $util.LongBits(object.maxAgeNs.low >>> 0, object.maxAgeNs.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.CachePolicy} message CachePolicy\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CachePolicy.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.maxAgeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.maxAgeNs = options.longs === String ? \"0\" : 0;\n            }\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (typeof message.maxAgeNs === \"number\")\n                    object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;\n                else\n                    object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n            return object;\n        };\n\n        /**\n         * Converts this CachePolicy to JSON.\n         * @function toJSON\n         * @memberof Trace.CachePolicy\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CachePolicy.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Scope enum.\n         * @name Trace.CachePolicy.Scope\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} PUBLIC=1 PUBLIC value\n         * @property {number} PRIVATE=2 PRIVATE value\n         */\n        CachePolicy.Scope = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"PUBLIC\"] = 1;\n            values[valuesById[2] = \"PRIVATE\"] = 2;\n            return values;\n        })();\n\n        return CachePolicy;\n    })();\n\n    Trace.Details = (function() {\n\n        /**\n         * Properties of a Details.\n         * @memberof Trace\n         * @interface IDetails\n         * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n         * @property {Object.<string,Uint8Array>|null} [variables] Details variables\n         * @property {string|null} [rawQuery] Details rawQuery\n         * @property {string|null} [operationName] Details operationName\n         */\n\n        /**\n         * Constructs a new Details.\n         * @memberof Trace\n         * @classdesc Represents a Details.\n         * @implements IDetails\n         * @constructor\n         * @param {Trace.IDetails=} [properties] Properties to set\n         */\n        function Details(properties) {\n            this.variablesJson = {};\n            this.variables = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Details variablesJson.\n         * @member {Object.<string,string>} variablesJson\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.variablesJson = $util.emptyObject;\n\n        /**\n         * Details variables.\n         * @member {Object.<string,Uint8Array>} variables\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.variables = $util.emptyObject;\n\n        /**\n         * Details rawQuery.\n         * @member {string} rawQuery\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.rawQuery = \"\";\n\n        /**\n         * Details operationName.\n         * @member {string} operationName\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.operationName = \"\";\n\n        /**\n         * Creates a new Details instance using the specified properties.\n         * @function create\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails=} [properties] Properties to set\n         * @returns {Trace.Details} Details instance\n         */\n        Details.create = function create(properties) {\n            return new Details(properties);\n        };\n\n        /**\n         * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\"))\n                for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).bytes(message.variables[keys[i]]).ldelim();\n            if (message.rawQuery != null && Object.hasOwnProperty.call(message, \"rawQuery\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.rawQuery);\n            if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.operationName);\n            if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\"))\n                for (var keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variablesJson[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Details(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 4:\n                    reader.skip().pos++;\n                    if (message.variablesJson === $util.emptyObject)\n                        message.variablesJson = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.variablesJson[key] = reader.string();\n                    break;\n                case 1:\n                    reader.skip().pos++;\n                    if (message.variables === $util.emptyObject)\n                        message.variables = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.variables[key] = reader.bytes();\n                    break;\n                case 2:\n                    message.rawQuery = reader.string();\n                    break;\n                case 3:\n                    message.operationName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Details message.\n         * @function verify\n         * @memberof Trace.Details\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Details.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n                if (!$util.isObject(message.variablesJson))\n                    return \"variablesJson: object expected\";\n                var key = Object.keys(message.variablesJson);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variablesJson[key[i]]))\n                        return \"variablesJson: string{k:string} expected\";\n            }\n            if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n                if (!$util.isObject(message.variables))\n                    return \"variables: object expected\";\n                var key = Object.keys(message.variables);\n                for (var i = 0; i < key.length; ++i)\n                    if (!(message.variables[key[i]] && typeof message.variables[key[i]].length === \"number\" || $util.isString(message.variables[key[i]])))\n                        return \"variables: buffer{k:string} expected\";\n            }\n            if (message.rawQuery != null && message.hasOwnProperty(\"rawQuery\"))\n                if (!$util.isString(message.rawQuery))\n                    return \"rawQuery: string expected\";\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                if (!$util.isString(message.operationName))\n                    return \"operationName: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Details message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.Details\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.Details} Details\n         */\n        Details.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.Details)\n                return object;\n            var message = new $root.Trace.Details();\n            if (object.variablesJson) {\n                if (typeof object.variablesJson !== \"object\")\n                    throw TypeError(\".Trace.Details.variablesJson: object expected\");\n                message.variablesJson = {};\n                for (var keys = Object.keys(object.variablesJson), i = 0; i < keys.length; ++i)\n                    message.variablesJson[keys[i]] = String(object.variablesJson[keys[i]]);\n            }\n            if (object.variables) {\n                if (typeof object.variables !== \"object\")\n                    throw TypeError(\".Trace.Details.variables: object expected\");\n                message.variables = {};\n                for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i)\n                    if (typeof object.variables[keys[i]] === \"string\")\n                        $util.base64.decode(object.variables[keys[i]], message.variables[keys[i]] = $util.newBuffer($util.base64.length(object.variables[keys[i]])), 0);\n                    else if (object.variables[keys[i]].length)\n                        message.variables[keys[i]] = object.variables[keys[i]];\n            }\n            if (object.rawQuery != null)\n                message.rawQuery = String(object.rawQuery);\n            if (object.operationName != null)\n                message.operationName = String(object.operationName);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Details message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.Details} message Details\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Details.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults) {\n                object.variables = {};\n                object.variablesJson = {};\n            }\n            if (options.defaults) {\n                object.rawQuery = \"\";\n                object.operationName = \"\";\n            }\n            var keys2;\n            if (message.variables && (keys2 = Object.keys(message.variables)).length) {\n                object.variables = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.variables[keys2[j]] = options.bytes === String ? $util.base64.encode(message.variables[keys2[j]], 0, message.variables[keys2[j]].length) : options.bytes === Array ? Array.prototype.slice.call(message.variables[keys2[j]]) : message.variables[keys2[j]];\n            }\n            if (message.rawQuery != null && message.hasOwnProperty(\"rawQuery\"))\n                object.rawQuery = message.rawQuery;\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                object.operationName = message.operationName;\n            if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n                object.variablesJson = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Details to JSON.\n         * @function toJSON\n         * @memberof Trace.Details\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Details.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Details;\n    })();\n\n    Trace.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof Trace\n         * @interface IError\n         * @property {string|null} [message] Error message\n         * @property {Array.<Trace.ILocation>|null} [location] Error location\n         * @property {number|null} [timeNs] Error timeNs\n         * @property {string|null} [json] Error json\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof Trace\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {Trace.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            this.location = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error message.\n         * @member {string} message\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.message = \"\";\n\n        /**\n         * Error location.\n         * @member {Array.<Trace.ILocation>} location\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.location = $util.emptyArray;\n\n        /**\n         * Error timeNs.\n         * @member {number} timeNs\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.timeNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Error json.\n         * @member {string} json\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.json = \"\";\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError=} [properties] Properties to set\n         * @returns {Trace.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n            if (message.location != null && message.location.length)\n                for (var i = 0; i < message.location.length; ++i)\n                    $root.Trace.Location.encode(message.location[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timeNs);\n            if (message.json != null && Object.hasOwnProperty.call(message, \"json\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.json);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Error();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                case 2:\n                    if (!(message.location && message.location.length))\n                        message.location = [];\n                    message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.timeNs = reader.uint64();\n                    break;\n                case 4:\n                    message.json = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof Trace.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                if (!Array.isArray(message.location))\n                    return \"location: array expected\";\n                for (var i = 0; i < message.location.length; ++i) {\n                    var error = $root.Trace.Location.verify(message.location[i]);\n                    if (error)\n                        return \"location.\" + error;\n                }\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high)))\n                    return \"timeNs: integer|Long expected\";\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                if (!$util.isString(message.json))\n                    return \"json: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Error message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.Error\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.Error} Error\n         */\n        Error.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.Error)\n                return object;\n            var message = new $root.Trace.Error();\n            if (object.message != null)\n                message.message = String(object.message);\n            if (object.location) {\n                if (!Array.isArray(object.location))\n                    throw TypeError(\".Trace.Error.location: array expected\");\n                message.location = [];\n                for (var i = 0; i < object.location.length; ++i) {\n                    if (typeof object.location[i] !== \"object\")\n                        throw TypeError(\".Trace.Error.location: object expected\");\n                    message.location[i] = $root.Trace.Location.fromObject(object.location[i]);\n                }\n            }\n            if (object.timeNs != null)\n                if ($util.Long)\n                    (message.timeNs = $util.Long.fromValue(object.timeNs)).unsigned = true;\n                else if (typeof object.timeNs === \"string\")\n                    message.timeNs = parseInt(object.timeNs, 10);\n                else if (typeof object.timeNs === \"number\")\n                    message.timeNs = object.timeNs;\n                else if (typeof object.timeNs === \"object\")\n                    message.timeNs = new $util.LongBits(object.timeNs.low >>> 0, object.timeNs.high >>> 0).toNumber(true);\n            if (object.json != null)\n                message.json = String(object.json);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.location = [];\n            if (options.defaults) {\n                object.message = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.timeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timeNs = options.longs === String ? \"0\" : 0;\n                object.json = \"\";\n            }\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.location && message.location.length) {\n                object.location = [];\n                for (var j = 0; j < message.location.length; ++j)\n                    object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (typeof message.timeNs === \"number\")\n                    object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;\n                else\n                    object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                object.json = message.json;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof Trace.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    Trace.HTTP = (function() {\n\n        /**\n         * Properties of a HTTP.\n         * @memberof Trace\n         * @interface IHTTP\n         * @property {Trace.HTTP.Method|null} [method] HTTP method\n         * @property {string|null} [host] HTTP host\n         * @property {string|null} [path] HTTP path\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n         * @property {number|null} [statusCode] HTTP statusCode\n         * @property {boolean|null} [secure] HTTP secure\n         * @property {string|null} [protocol] HTTP protocol\n         */\n\n        /**\n         * Constructs a new HTTP.\n         * @memberof Trace\n         * @classdesc Represents a HTTP.\n         * @implements IHTTP\n         * @constructor\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         */\n        function HTTP(properties) {\n            this.requestHeaders = {};\n            this.responseHeaders = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HTTP method.\n         * @member {Trace.HTTP.Method} method\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.method = 0;\n\n        /**\n         * HTTP host.\n         * @member {string} host\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.host = \"\";\n\n        /**\n         * HTTP path.\n         * @member {string} path\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.path = \"\";\n\n        /**\n         * HTTP requestHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.requestHeaders = $util.emptyObject;\n\n        /**\n         * HTTP responseHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.responseHeaders = $util.emptyObject;\n\n        /**\n         * HTTP statusCode.\n         * @member {number} statusCode\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.statusCode = 0;\n\n        /**\n         * HTTP secure.\n         * @member {boolean} secure\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.secure = false;\n\n        /**\n         * HTTP protocol.\n         * @member {string} protocol\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.protocol = \"\";\n\n        /**\n         * Creates a new HTTP instance using the specified properties.\n         * @function create\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         * @returns {Trace.HTTP} HTTP instance\n         */\n        HTTP.create = function create(properties) {\n            return new HTTP(properties);\n        };\n\n        /**\n         * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.method != null && Object.hasOwnProperty.call(message, \"method\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.method);\n            if (message.host != null && Object.hasOwnProperty.call(message, \"host\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.host);\n            if (message.path != null && Object.hasOwnProperty.call(message, \"path\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.path);\n            if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\"))\n                for (var keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\"))\n                for (var keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.statusCode);\n            if (message.secure != null && Object.hasOwnProperty.call(message, \"secure\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.secure);\n            if (message.protocol != null && Object.hasOwnProperty.call(message, \"protocol\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).string(message.protocol);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.method = reader.int32();\n                    break;\n                case 2:\n                    message.host = reader.string();\n                    break;\n                case 3:\n                    message.path = reader.string();\n                    break;\n                case 4:\n                    reader.skip().pos++;\n                    if (message.requestHeaders === $util.emptyObject)\n                        message.requestHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    reader.skip().pos++;\n                    if (message.responseHeaders === $util.emptyObject)\n                        message.responseHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.statusCode = reader.uint32();\n                    break;\n                case 8:\n                    message.secure = reader.bool();\n                    break;\n                case 9:\n                    message.protocol = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HTTP message.\n         * @function verify\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HTTP.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                switch (message.method) {\n                default:\n                    return \"method: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                    break;\n                }\n            if (message.host != null && message.hasOwnProperty(\"host\"))\n                if (!$util.isString(message.host))\n                    return \"host: string expected\";\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                if (!$util.isString(message.path))\n                    return \"path: string expected\";\n            if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n                if (!$util.isObject(message.requestHeaders))\n                    return \"requestHeaders: object expected\";\n                var key = Object.keys(message.requestHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n                    if (error)\n                        return \"requestHeaders.\" + error;\n                }\n            }\n            if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n                if (!$util.isObject(message.responseHeaders))\n                    return \"responseHeaders: object expected\";\n                var key = Object.keys(message.responseHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n                    if (error)\n                        return \"responseHeaders.\" + error;\n                }\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                if (!$util.isInteger(message.statusCode))\n                    return \"statusCode: integer expected\";\n            if (message.secure != null && message.hasOwnProperty(\"secure\"))\n                if (typeof message.secure !== \"boolean\")\n                    return \"secure: boolean expected\";\n            if (message.protocol != null && message.hasOwnProperty(\"protocol\"))\n                if (!$util.isString(message.protocol))\n                    return \"protocol: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a HTTP message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.HTTP} HTTP\n         */\n        HTTP.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.HTTP)\n                return object;\n            var message = new $root.Trace.HTTP();\n            switch (object.method) {\n            case \"UNKNOWN\":\n            case 0:\n                message.method = 0;\n                break;\n            case \"OPTIONS\":\n            case 1:\n                message.method = 1;\n                break;\n            case \"GET\":\n            case 2:\n                message.method = 2;\n                break;\n            case \"HEAD\":\n            case 3:\n                message.method = 3;\n                break;\n            case \"POST\":\n            case 4:\n                message.method = 4;\n                break;\n            case \"PUT\":\n            case 5:\n                message.method = 5;\n                break;\n            case \"DELETE\":\n            case 6:\n                message.method = 6;\n                break;\n            case \"TRACE\":\n            case 7:\n                message.method = 7;\n                break;\n            case \"CONNECT\":\n            case 8:\n                message.method = 8;\n                break;\n            case \"PATCH\":\n            case 9:\n                message.method = 9;\n                break;\n            }\n            if (object.host != null)\n                message.host = String(object.host);\n            if (object.path != null)\n                message.path = String(object.path);\n            if (object.requestHeaders) {\n                if (typeof object.requestHeaders !== \"object\")\n                    throw TypeError(\".Trace.HTTP.requestHeaders: object expected\");\n                message.requestHeaders = {};\n                for (var keys = Object.keys(object.requestHeaders), i = 0; i < keys.length; ++i) {\n                    if (typeof object.requestHeaders[keys[i]] !== \"object\")\n                        throw TypeError(\".Trace.HTTP.requestHeaders: object expected\");\n                    message.requestHeaders[keys[i]] = $root.Trace.HTTP.Values.fromObject(object.requestHeaders[keys[i]]);\n                }\n            }\n            if (object.responseHeaders) {\n                if (typeof object.responseHeaders !== \"object\")\n                    throw TypeError(\".Trace.HTTP.responseHeaders: object expected\");\n                message.responseHeaders = {};\n                for (var keys = Object.keys(object.responseHeaders), i = 0; i < keys.length; ++i) {\n                    if (typeof object.responseHeaders[keys[i]] !== \"object\")\n                        throw TypeError(\".Trace.HTTP.responseHeaders: object expected\");\n                    message.responseHeaders[keys[i]] = $root.Trace.HTTP.Values.fromObject(object.responseHeaders[keys[i]]);\n                }\n            }\n            if (object.statusCode != null)\n                message.statusCode = object.statusCode >>> 0;\n            if (object.secure != null)\n                message.secure = Boolean(object.secure);\n            if (object.protocol != null)\n                message.protocol = String(object.protocol);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.HTTP} message HTTP\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HTTP.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults) {\n                object.requestHeaders = {};\n                object.responseHeaders = {};\n            }\n            if (options.defaults) {\n                object.method = options.enums === String ? \"UNKNOWN\" : 0;\n                object.host = \"\";\n                object.path = \"\";\n                object.statusCode = 0;\n                object.secure = false;\n                object.protocol = \"\";\n            }\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n            if (message.host != null && message.hasOwnProperty(\"host\"))\n                object.host = message.host;\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                object.path = message.path;\n            var keys2;\n            if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n                object.requestHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n            }\n            if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n                object.responseHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                object.statusCode = message.statusCode;\n            if (message.secure != null && message.hasOwnProperty(\"secure\"))\n                object.secure = message.secure;\n            if (message.protocol != null && message.hasOwnProperty(\"protocol\"))\n                object.protocol = message.protocol;\n            return object;\n        };\n\n        /**\n         * Converts this HTTP to JSON.\n         * @function toJSON\n         * @memberof Trace.HTTP\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HTTP.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        HTTP.Values = (function() {\n\n            /**\n             * Properties of a Values.\n             * @memberof Trace.HTTP\n             * @interface IValues\n             * @property {Array.<string>|null} [value] Values value\n             */\n\n            /**\n             * Constructs a new Values.\n             * @memberof Trace.HTTP\n             * @classdesc Represents a Values.\n             * @implements IValues\n             * @constructor\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             */\n            function Values(properties) {\n                this.value = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Values value.\n             * @member {Array.<string>} value\n             * @memberof Trace.HTTP.Values\n             * @instance\n             */\n            Values.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new Values instance using the specified properties.\n             * @function create\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             * @returns {Trace.HTTP.Values} Values instance\n             */\n            Values.create = function create(properties) {\n                return new Values(properties);\n            };\n\n            /**\n             * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.value != null && message.value.length)\n                    for (var i = 0; i < message.value.length; ++i)\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP.Values();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.value && message.value.length))\n                            message.value = [];\n                        message.value.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Values message.\n             * @function verify\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Values.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value))\n                        return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i)\n                        if (!$util.isString(message.value[i]))\n                            return \"value: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Values message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.HTTP.Values} Values\n             */\n            Values.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.HTTP.Values)\n                    return object;\n                var message = new $root.Trace.HTTP.Values();\n                if (object.value) {\n                    if (!Array.isArray(object.value))\n                        throw TypeError(\".Trace.HTTP.Values.value: array expected\");\n                    message.value = [];\n                    for (var i = 0; i < object.value.length; ++i)\n                        message.value[i] = String(object.value[i]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Values message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.Values} message Values\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Values.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j)\n                        object.value[j] = message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Values to JSON.\n             * @function toJSON\n             * @memberof Trace.HTTP.Values\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Values.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Values;\n        })();\n\n        /**\n         * Method enum.\n         * @name Trace.HTTP.Method\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} OPTIONS=1 OPTIONS value\n         * @property {number} GET=2 GET value\n         * @property {number} HEAD=3 HEAD value\n         * @property {number} POST=4 POST value\n         * @property {number} PUT=5 PUT value\n         * @property {number} DELETE=6 DELETE value\n         * @property {number} TRACE=7 TRACE value\n         * @property {number} CONNECT=8 CONNECT value\n         * @property {number} PATCH=9 PATCH value\n         */\n        HTTP.Method = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"OPTIONS\"] = 1;\n            values[valuesById[2] = \"GET\"] = 2;\n            values[valuesById[3] = \"HEAD\"] = 3;\n            values[valuesById[4] = \"POST\"] = 4;\n            values[valuesById[5] = \"PUT\"] = 5;\n            values[valuesById[6] = \"DELETE\"] = 6;\n            values[valuesById[7] = \"TRACE\"] = 7;\n            values[valuesById[8] = \"CONNECT\"] = 8;\n            values[valuesById[9] = \"PATCH\"] = 9;\n            return values;\n        })();\n\n        return HTTP;\n    })();\n\n    Trace.Location = (function() {\n\n        /**\n         * Properties of a Location.\n         * @memberof Trace\n         * @interface ILocation\n         * @property {number|null} [line] Location line\n         * @property {number|null} [column] Location column\n         */\n\n        /**\n         * Constructs a new Location.\n         * @memberof Trace\n         * @classdesc Represents a Location.\n         * @implements ILocation\n         * @constructor\n         * @param {Trace.ILocation=} [properties] Properties to set\n         */\n        function Location(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Location line.\n         * @member {number} line\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.line = 0;\n\n        /**\n         * Location column.\n         * @member {number} column\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.column = 0;\n\n        /**\n         * Creates a new Location instance using the specified properties.\n         * @function create\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation=} [properties] Properties to set\n         * @returns {Trace.Location} Location instance\n         */\n        Location.create = function create(properties) {\n            return new Location(properties);\n        };\n\n        /**\n         * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.line != null && Object.hasOwnProperty.call(message, \"line\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.line);\n            if (message.column != null && Object.hasOwnProperty.call(message, \"column\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.column);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Location();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.line = reader.uint32();\n                    break;\n                case 2:\n                    message.column = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Location message.\n         * @function verify\n         * @memberof Trace.Location\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Location.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                if (!$util.isInteger(message.line))\n                    return \"line: integer expected\";\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                if (!$util.isInteger(message.column))\n                    return \"column: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Location message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.Location\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.Location} Location\n         */\n        Location.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.Location)\n                return object;\n            var message = new $root.Trace.Location();\n            if (object.line != null)\n                message.line = object.line >>> 0;\n            if (object.column != null)\n                message.column = object.column >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Location message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.Location} message Location\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Location.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.line = 0;\n                object.column = 0;\n            }\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                object.line = message.line;\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                object.column = message.column;\n            return object;\n        };\n\n        /**\n         * Converts this Location to JSON.\n         * @function toJSON\n         * @memberof Trace.Location\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Location.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Location;\n    })();\n\n    Trace.Node = (function() {\n\n        /**\n         * Properties of a Node.\n         * @memberof Trace\n         * @interface INode\n         * @property {string|null} [responseName] Node responseName\n         * @property {number|null} [index] Node index\n         * @property {string|null} [originalFieldName] Node originalFieldName\n         * @property {string|null} [type] Node type\n         * @property {string|null} [parentType] Node parentType\n         * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n         * @property {number|null} [startTime] Node startTime\n         * @property {number|null} [endTime] Node endTime\n         * @property {Array.<Trace.IError>|null} [error] Node error\n         * @property {Array.<Trace.INode>|null} [child] Node child\n         */\n\n        /**\n         * Constructs a new Node.\n         * @memberof Trace\n         * @classdesc Represents a Node.\n         * @implements INode\n         * @constructor\n         * @param {Trace.INode=} [properties] Properties to set\n         */\n        function Node(properties) {\n            this.error = [];\n            this.child = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Node responseName.\n         * @member {string} responseName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.responseName = \"\";\n\n        /**\n         * Node index.\n         * @member {number} index\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.index = 0;\n\n        /**\n         * Node originalFieldName.\n         * @member {string} originalFieldName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.originalFieldName = \"\";\n\n        /**\n         * Node type.\n         * @member {string} type\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.type = \"\";\n\n        /**\n         * Node parentType.\n         * @member {string} parentType\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.parentType = \"\";\n\n        /**\n         * Node cachePolicy.\n         * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.cachePolicy = null;\n\n        /**\n         * Node startTime.\n         * @member {number} startTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Node endTime.\n         * @member {number} endTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Node error.\n         * @member {Array.<Trace.IError>} error\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.error = $util.emptyArray;\n\n        /**\n         * Node child.\n         * @member {Array.<Trace.INode>} child\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.child = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Node id.\n         * @member {\"responseName\"|\"index\"|undefined} id\n         * @memberof Trace.Node\n         * @instance\n         */\n        Object.defineProperty(Node.prototype, \"id\", {\n            get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Node instance using the specified properties.\n         * @function create\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode=} [properties] Properties to set\n         * @returns {Trace.Node} Node instance\n         */\n        Node.create = function create(properties) {\n            return new Node(properties);\n        };\n\n        /**\n         * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseName);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n            if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n                $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.startTime);\n            if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.endTime);\n            if (message.error != null && message.error.length)\n                for (var i = 0; i < message.error.length; ++i)\n                    $root.Trace.Error.encode(message.error[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.child != null && message.child.length)\n                for (var i = 0; i < message.child.length; ++i)\n                    $root.Trace.Node.encode(message.child[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.parentType);\n            if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.originalFieldName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Node();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.responseName = reader.string();\n                    break;\n                case 2:\n                    message.index = reader.uint32();\n                    break;\n                case 14:\n                    message.originalFieldName = reader.string();\n                    break;\n                case 3:\n                    message.type = reader.string();\n                    break;\n                case 13:\n                    message.parentType = reader.string();\n                    break;\n                case 5:\n                    message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.startTime = reader.uint64();\n                    break;\n                case 9:\n                    message.endTime = reader.uint64();\n                    break;\n                case 11:\n                    if (!(message.error && message.error.length))\n                        message.error = [];\n                    message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.child && message.child.length))\n                        message.child = [];\n                    message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Node message.\n         * @function verify\n         * @memberof Trace.Node\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Node.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                properties.id = 1;\n                if (!$util.isString(message.responseName))\n                    return \"responseName: string expected\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                if (properties.id === 1)\n                    return \"id: multiple values\";\n                properties.id = 1;\n                if (!$util.isInteger(message.index))\n                    return \"index: integer expected\";\n            }\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                if (!$util.isString(message.originalFieldName))\n                    return \"originalFieldName: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                if (!$util.isString(message.parentType))\n                    return \"parentType: string expected\";\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n                var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n                if (error)\n                    return \"cachePolicy.\" + error;\n            }\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))\n                    return \"startTime: integer|Long expected\";\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))\n                    return \"endTime: integer|Long expected\";\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                if (!Array.isArray(message.error))\n                    return \"error: array expected\";\n                for (var i = 0; i < message.error.length; ++i) {\n                    var error = $root.Trace.Error.verify(message.error[i]);\n                    if (error)\n                        return \"error.\" + error;\n                }\n            }\n            if (message.child != null && message.hasOwnProperty(\"child\")) {\n                if (!Array.isArray(message.child))\n                    return \"child: array expected\";\n                for (var i = 0; i < message.child.length; ++i) {\n                    var error = $root.Trace.Node.verify(message.child[i]);\n                    if (error)\n                        return \"child.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Node message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.Node\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.Node} Node\n         */\n        Node.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.Node)\n                return object;\n            var message = new $root.Trace.Node();\n            if (object.responseName != null)\n                message.responseName = String(object.responseName);\n            if (object.index != null)\n                message.index = object.index >>> 0;\n            if (object.originalFieldName != null)\n                message.originalFieldName = String(object.originalFieldName);\n            if (object.type != null)\n                message.type = String(object.type);\n            if (object.parentType != null)\n                message.parentType = String(object.parentType);\n            if (object.cachePolicy != null) {\n                if (typeof object.cachePolicy !== \"object\")\n                    throw TypeError(\".Trace.Node.cachePolicy: object expected\");\n                message.cachePolicy = $root.Trace.CachePolicy.fromObject(object.cachePolicy);\n            }\n            if (object.startTime != null)\n                if ($util.Long)\n                    (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = true;\n                else if (typeof object.startTime === \"string\")\n                    message.startTime = parseInt(object.startTime, 10);\n                else if (typeof object.startTime === \"number\")\n                    message.startTime = object.startTime;\n                else if (typeof object.startTime === \"object\")\n                    message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber(true);\n            if (object.endTime != null)\n                if ($util.Long)\n                    (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = true;\n                else if (typeof object.endTime === \"string\")\n                    message.endTime = parseInt(object.endTime, 10);\n                else if (typeof object.endTime === \"number\")\n                    message.endTime = object.endTime;\n                else if (typeof object.endTime === \"object\")\n                    message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber(true);\n            if (object.error) {\n                if (!Array.isArray(object.error))\n                    throw TypeError(\".Trace.Node.error: array expected\");\n                message.error = [];\n                for (var i = 0; i < object.error.length; ++i) {\n                    if (typeof object.error[i] !== \"object\")\n                        throw TypeError(\".Trace.Node.error: object expected\");\n                    message.error[i] = $root.Trace.Error.fromObject(object.error[i]);\n                }\n            }\n            if (object.child) {\n                if (!Array.isArray(object.child))\n                    throw TypeError(\".Trace.Node.child: array expected\");\n                message.child = [];\n                for (var i = 0; i < object.child.length; ++i) {\n                    if (typeof object.child[i] !== \"object\")\n                        throw TypeError(\".Trace.Node.child: object expected\");\n                    message.child[i] = $root.Trace.Node.fromObject(object.child[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Node message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.Node} message Node\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Node.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.error = [];\n                object.child = [];\n            }\n            if (options.defaults) {\n                object.type = \"\";\n                object.cachePolicy = null;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.startTime = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.endTime = options.longs === String ? \"0\" : 0;\n                object.parentType = \"\";\n                object.originalFieldName = \"\";\n            }\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                object.responseName = message.responseName;\n                if (options.oneofs)\n                    object.id = \"responseName\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                object.index = message.index;\n                if (options.oneofs)\n                    object.id = \"index\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n                object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (typeof message.startTime === \"number\")\n                    object.startTime = options.longs === String ? String(message.startTime) : message.startTime;\n                else\n                    object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (typeof message.endTime === \"number\")\n                    object.endTime = options.longs === String ? String(message.endTime) : message.endTime;\n                else\n                    object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n            if (message.error && message.error.length) {\n                object.error = [];\n                for (var j = 0; j < message.error.length; ++j)\n                    object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n            }\n            if (message.child && message.child.length) {\n                object.child = [];\n                for (var j = 0; j < message.child.length; ++j)\n                    object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n            }\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                object.parentType = message.parentType;\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                object.originalFieldName = message.originalFieldName;\n            return object;\n        };\n\n        /**\n         * Converts this Node to JSON.\n         * @function toJSON\n         * @memberof Trace.Node\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Node.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Node;\n    })();\n\n    Trace.QueryPlanNode = (function() {\n\n        /**\n         * Properties of a QueryPlanNode.\n         * @memberof Trace\n         * @interface IQueryPlanNode\n         * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n         * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n         * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n         * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n         */\n\n        /**\n         * Constructs a new QueryPlanNode.\n         * @memberof Trace\n         * @classdesc Represents a QueryPlanNode.\n         * @implements IQueryPlanNode\n         * @constructor\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         */\n        function QueryPlanNode(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * QueryPlanNode sequence.\n         * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.sequence = null;\n\n        /**\n         * QueryPlanNode parallel.\n         * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.parallel = null;\n\n        /**\n         * QueryPlanNode fetch.\n         * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.fetch = null;\n\n        /**\n         * QueryPlanNode flatten.\n         * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.flatten = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * QueryPlanNode node.\n         * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|undefined} node\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new QueryPlanNode instance using the specified properties.\n         * @function create\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n         */\n        QueryPlanNode.create = function create(properties) {\n            return new QueryPlanNode(properties);\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\"))\n                $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\"))\n                $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\"))\n                $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\"))\n                $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a QueryPlanNode message.\n         * @function verify\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        QueryPlanNode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n                    if (error)\n                        return \"sequence.\" + error;\n                }\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n                    if (error)\n                        return \"parallel.\" + error;\n                }\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n                    if (error)\n                        return \"fetch.\" + error;\n                }\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n                    if (error)\n                        return \"flatten.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a QueryPlanNode message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         */\n        QueryPlanNode.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.QueryPlanNode)\n                return object;\n            var message = new $root.Trace.QueryPlanNode();\n            if (object.sequence != null) {\n                if (typeof object.sequence !== \"object\")\n                    throw TypeError(\".Trace.QueryPlanNode.sequence: object expected\");\n                message.sequence = $root.Trace.QueryPlanNode.SequenceNode.fromObject(object.sequence);\n            }\n            if (object.parallel != null) {\n                if (typeof object.parallel !== \"object\")\n                    throw TypeError(\".Trace.QueryPlanNode.parallel: object expected\");\n                message.parallel = $root.Trace.QueryPlanNode.ParallelNode.fromObject(object.parallel);\n            }\n            if (object.fetch != null) {\n                if (typeof object.fetch !== \"object\")\n                    throw TypeError(\".Trace.QueryPlanNode.fetch: object expected\");\n                message.fetch = $root.Trace.QueryPlanNode.FetchNode.fromObject(object.fetch);\n            }\n            if (object.flatten != null) {\n                if (typeof object.flatten !== \"object\")\n                    throw TypeError(\".Trace.QueryPlanNode.flatten: object expected\");\n                message.flatten = $root.Trace.QueryPlanNode.FlattenNode.fromObject(object.flatten);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.QueryPlanNode} message QueryPlanNode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        QueryPlanNode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n                if (options.oneofs)\n                    object.node = \"sequence\";\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n                if (options.oneofs)\n                    object.node = \"parallel\";\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n                if (options.oneofs)\n                    object.node = \"fetch\";\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n                if (options.oneofs)\n                    object.node = \"flatten\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this QueryPlanNode to JSON.\n         * @function toJSON\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        QueryPlanNode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        QueryPlanNode.SequenceNode = (function() {\n\n            /**\n             * Properties of a SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface ISequenceNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n             */\n\n            /**\n             * Constructs a new SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a SequenceNode.\n             * @implements ISequenceNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             */\n            function SequenceNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             */\n            SequenceNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n             */\n            SequenceNode.create = function create(properties) {\n                return new SequenceNode(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.SequenceNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SequenceNode message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             */\n            SequenceNode.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.SequenceNode)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.SequenceNode();\n                if (object.nodes) {\n                    if (!Array.isArray(object.nodes))\n                        throw TypeError(\".Trace.QueryPlanNode.SequenceNode.nodes: array expected\");\n                    message.nodes = [];\n                    for (var i = 0; i < object.nodes.length; ++i) {\n                        if (typeof object.nodes[i] !== \"object\")\n                            throw TypeError(\".Trace.QueryPlanNode.SequenceNode.nodes: object expected\");\n                        message.nodes[i] = $root.Trace.QueryPlanNode.fromObject(object.nodes[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SequenceNode;\n        })();\n\n        QueryPlanNode.ParallelNode = (function() {\n\n            /**\n             * Properties of a ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IParallelNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n             */\n\n            /**\n             * Constructs a new ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ParallelNode.\n             * @implements IParallelNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             */\n            function ParallelNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ParallelNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             */\n            ParallelNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new ParallelNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n             */\n            ParallelNode.create = function create(properties) {\n                return new ParallelNode(properties);\n            };\n\n            /**\n             * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ParallelNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ParallelNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ParallelNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ParallelNode message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             */\n            ParallelNode.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.ParallelNode)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.ParallelNode();\n                if (object.nodes) {\n                    if (!Array.isArray(object.nodes))\n                        throw TypeError(\".Trace.QueryPlanNode.ParallelNode.nodes: array expected\");\n                    message.nodes = [];\n                    for (var i = 0; i < object.nodes.length; ++i) {\n                        if (typeof object.nodes[i] !== \"object\")\n                            throw TypeError(\".Trace.QueryPlanNode.ParallelNode.nodes: object expected\");\n                        message.nodes[i] = $root.Trace.QueryPlanNode.fromObject(object.nodes[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ParallelNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ParallelNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ParallelNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ParallelNode;\n        })();\n\n        QueryPlanNode.FetchNode = (function() {\n\n            /**\n             * Properties of a FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFetchNode\n             * @property {string|null} [serviceName] FetchNode serviceName\n             * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n             * @property {ITrace|null} [trace] FetchNode trace\n             * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n             * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n             * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n             */\n\n            /**\n             * Constructs a new FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FetchNode.\n             * @implements IFetchNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             */\n            function FetchNode(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FetchNode serviceName.\n             * @member {string} serviceName\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.serviceName = \"\";\n\n            /**\n             * FetchNode traceParsingFailed.\n             * @member {boolean} traceParsingFailed\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.traceParsingFailed = false;\n\n            /**\n             * FetchNode trace.\n             * @member {ITrace|null|undefined} trace\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.trace = null;\n\n            /**\n             * FetchNode sentTimeOffset.\n             * @member {number} sentTimeOffset\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTimeOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * FetchNode sentTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTime = null;\n\n            /**\n             * FetchNode receivedTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.receivedTime = null;\n\n            /**\n             * Creates a new FetchNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n             */\n            FetchNode.create = function create(properties) {\n                return new FetchNode(properties);\n            };\n\n            /**\n             * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);\n                if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.traceParsingFailed);\n                if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\"))\n                    $root.Trace.encode(message.trace, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sentTimeOffset);\n                if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FetchNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.serviceName = reader.string();\n                        break;\n                    case 2:\n                        message.traceParsingFailed = reader.bool();\n                        break;\n                    case 3:\n                        message.trace = $root.Trace.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        message.sentTimeOffset = reader.uint64();\n                        break;\n                    case 5:\n                        message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    case 6:\n                        message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FetchNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FetchNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    if (!$util.isString(message.serviceName))\n                        return \"serviceName: string expected\";\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    if (typeof message.traceParsingFailed !== \"boolean\")\n                        return \"traceParsingFailed: boolean expected\";\n                if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n                    var error = $root.Trace.verify(message.trace);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high)))\n                        return \"sentTimeOffset: integer|Long expected\";\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n                    if (error)\n                        return \"sentTime.\" + error;\n                }\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n                    if (error)\n                        return \"receivedTime.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FetchNode message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             */\n            FetchNode.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.FetchNode)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.FetchNode();\n                if (object.serviceName != null)\n                    message.serviceName = String(object.serviceName);\n                if (object.traceParsingFailed != null)\n                    message.traceParsingFailed = Boolean(object.traceParsingFailed);\n                if (object.trace != null) {\n                    if (typeof object.trace !== \"object\")\n                        throw TypeError(\".Trace.QueryPlanNode.FetchNode.trace: object expected\");\n                    message.trace = $root.Trace.fromObject(object.trace);\n                }\n                if (object.sentTimeOffset != null)\n                    if ($util.Long)\n                        (message.sentTimeOffset = $util.Long.fromValue(object.sentTimeOffset)).unsigned = true;\n                    else if (typeof object.sentTimeOffset === \"string\")\n                        message.sentTimeOffset = parseInt(object.sentTimeOffset, 10);\n                    else if (typeof object.sentTimeOffset === \"number\")\n                        message.sentTimeOffset = object.sentTimeOffset;\n                    else if (typeof object.sentTimeOffset === \"object\")\n                        message.sentTimeOffset = new $util.LongBits(object.sentTimeOffset.low >>> 0, object.sentTimeOffset.high >>> 0).toNumber(true);\n                if (object.sentTime != null) {\n                    if (typeof object.sentTime !== \"object\")\n                        throw TypeError(\".Trace.QueryPlanNode.FetchNode.sentTime: object expected\");\n                    message.sentTime = $root.google.protobuf.Timestamp.fromObject(object.sentTime);\n                }\n                if (object.receivedTime != null) {\n                    if (typeof object.receivedTime !== \"object\")\n                        throw TypeError(\".Trace.QueryPlanNode.FetchNode.receivedTime: object expected\");\n                    message.receivedTime = $root.google.protobuf.Timestamp.fromObject(object.receivedTime);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FetchNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.serviceName = \"\";\n                    object.traceParsingFailed = false;\n                    object.trace = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.sentTimeOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.sentTimeOffset = options.longs === String ? \"0\" : 0;\n                    object.sentTime = null;\n                    object.receivedTime = null;\n                }\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    object.serviceName = message.serviceName;\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    object.traceParsingFailed = message.traceParsingFailed;\n                if (message.trace != null && message.hasOwnProperty(\"trace\"))\n                    object.trace = $root.Trace.toObject(message.trace, options);\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (typeof message.sentTimeOffset === \"number\")\n                        object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;\n                    else\n                        object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\"))\n                    object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\"))\n                    object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n                return object;\n            };\n\n            /**\n             * Converts this FetchNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FetchNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FetchNode;\n        })();\n\n        QueryPlanNode.FlattenNode = (function() {\n\n            /**\n             * Properties of a FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFlattenNode\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n             * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n             */\n\n            /**\n             * Constructs a new FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FlattenNode.\n             * @implements IFlattenNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             */\n            function FlattenNode(properties) {\n                this.responsePath = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FlattenNode responsePath.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.responsePath = $util.emptyArray;\n\n            /**\n             * FlattenNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.node = null;\n\n            /**\n             * Creates a new FlattenNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n             */\n            FlattenNode.create = function create(properties) {\n                return new FlattenNode(properties);\n            };\n\n            /**\n             * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.responsePath != null && message.responsePath.length)\n                    for (var i = 0; i < message.responsePath.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FlattenNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.responsePath && message.responsePath.length))\n                            message.responsePath = [];\n                        message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FlattenNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FlattenNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n                    if (!Array.isArray(message.responsePath))\n                        return \"responsePath: array expected\";\n                    for (var i = 0; i < message.responsePath.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n                        if (error)\n                            return \"responsePath.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FlattenNode message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             */\n            FlattenNode.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.FlattenNode)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.FlattenNode();\n                if (object.responsePath) {\n                    if (!Array.isArray(object.responsePath))\n                        throw TypeError(\".Trace.QueryPlanNode.FlattenNode.responsePath: array expected\");\n                    message.responsePath = [];\n                    for (var i = 0; i < object.responsePath.length; ++i) {\n                        if (typeof object.responsePath[i] !== \"object\")\n                            throw TypeError(\".Trace.QueryPlanNode.FlattenNode.responsePath: object expected\");\n                        message.responsePath[i] = $root.Trace.QueryPlanNode.ResponsePathElement.fromObject(object.responsePath[i]);\n                    }\n                }\n                if (object.node != null) {\n                    if (typeof object.node !== \"object\")\n                        throw TypeError(\".Trace.QueryPlanNode.FlattenNode.node: object expected\");\n                    message.node = $root.Trace.QueryPlanNode.fromObject(object.node);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FlattenNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.responsePath = [];\n                if (options.defaults)\n                    object.node = null;\n                if (message.responsePath && message.responsePath.length) {\n                    object.responsePath = [];\n                    for (var j = 0; j < message.responsePath.length; ++j)\n                        object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this FlattenNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FlattenNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FlattenNode;\n        })();\n\n        QueryPlanNode.ResponsePathElement = (function() {\n\n            /**\n             * Properties of a ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @interface IResponsePathElement\n             * @property {string|null} [fieldName] ResponsePathElement fieldName\n             * @property {number|null} [index] ResponsePathElement index\n             */\n\n            /**\n             * Constructs a new ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ResponsePathElement.\n             * @implements IResponsePathElement\n             * @constructor\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             */\n            function ResponsePathElement(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ResponsePathElement fieldName.\n             * @member {string} fieldName\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.fieldName = \"\";\n\n            /**\n             * ResponsePathElement index.\n             * @member {number} index\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.index = 0;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ResponsePathElement id.\n             * @member {\"fieldName\"|\"index\"|undefined} id\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n                get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ResponsePathElement instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n             */\n            ResponsePathElement.create = function create(properties) {\n                return new ResponsePathElement(properties);\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldName);\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.fieldName = reader.string();\n                        break;\n                    case 2:\n                        message.index = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ResponsePathElement message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ResponsePathElement.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    properties.id = 1;\n                    if (!$util.isString(message.fieldName))\n                        return \"fieldName: string expected\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    if (properties.id === 1)\n                        return \"id: multiple values\";\n                    properties.id = 1;\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ResponsePathElement message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             */\n            ResponsePathElement.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.ResponsePathElement)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n                if (object.fieldName != null)\n                    message.fieldName = String(object.fieldName);\n                if (object.index != null)\n                    message.index = object.index >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ResponsePathElement.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    object.fieldName = message.fieldName;\n                    if (options.oneofs)\n                        object.id = \"fieldName\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    object.index = message.index;\n                    if (options.oneofs)\n                        object.id = \"index\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ResponsePathElement to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ResponsePathElement.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ResponsePathElement;\n        })();\n\n        return QueryPlanNode;\n    })();\n\n    return Trace;\n})();\n\n$root.ReportHeader = (function() {\n\n    /**\n     * Properties of a ReportHeader.\n     * @exports IReportHeader\n     * @interface IReportHeader\n     * @property {string|null} [service] ReportHeader service\n     * @property {string|null} [hostname] ReportHeader hostname\n     * @property {string|null} [agentVersion] ReportHeader agentVersion\n     * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n     * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n     * @property {string|null} [uname] ReportHeader uname\n     * @property {string|null} [schemaTag] ReportHeader schemaTag\n     * @property {string|null} [schemaHash] ReportHeader schemaHash\n     */\n\n    /**\n     * Constructs a new ReportHeader.\n     * @exports ReportHeader\n     * @classdesc Represents a ReportHeader.\n     * @implements IReportHeader\n     * @constructor\n     * @param {IReportHeader=} [properties] Properties to set\n     */\n    function ReportHeader(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportHeader service.\n     * @member {string} service\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.service = \"\";\n\n    /**\n     * ReportHeader hostname.\n     * @member {string} hostname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.hostname = \"\";\n\n    /**\n     * ReportHeader agentVersion.\n     * @member {string} agentVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.agentVersion = \"\";\n\n    /**\n     * ReportHeader serviceVersion.\n     * @member {string} serviceVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.serviceVersion = \"\";\n\n    /**\n     * ReportHeader runtimeVersion.\n     * @member {string} runtimeVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.runtimeVersion = \"\";\n\n    /**\n     * ReportHeader uname.\n     * @member {string} uname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.uname = \"\";\n\n    /**\n     * ReportHeader schemaTag.\n     * @member {string} schemaTag\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.schemaTag = \"\";\n\n    /**\n     * ReportHeader schemaHash.\n     * @member {string} schemaHash\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.schemaHash = \"\";\n\n    /**\n     * Creates a new ReportHeader instance using the specified properties.\n     * @function create\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader=} [properties] Properties to set\n     * @returns {ReportHeader} ReportHeader instance\n     */\n    ReportHeader.create = function create(properties) {\n        return new ReportHeader(properties);\n    };\n\n    /**\n     * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encode\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.service != null && Object.hasOwnProperty.call(message, \"service\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.service);\n        if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.hostname);\n        if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.agentVersion);\n        if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.serviceVersion);\n        if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.runtimeVersion);\n        if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.uname);\n        if (message.schemaTag != null && Object.hasOwnProperty.call(message, \"schemaTag\"))\n            writer.uint32(/* id 10, wireType 2 =*/82).string(message.schemaTag);\n        if (message.schemaHash != null && Object.hasOwnProperty.call(message, \"schemaHash\"))\n            writer.uint32(/* id 11, wireType 2 =*/90).string(message.schemaHash);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportHeader();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                message.service = reader.string();\n                break;\n            case 5:\n                message.hostname = reader.string();\n                break;\n            case 6:\n                message.agentVersion = reader.string();\n                break;\n            case 7:\n                message.serviceVersion = reader.string();\n                break;\n            case 8:\n                message.runtimeVersion = reader.string();\n                break;\n            case 9:\n                message.uname = reader.string();\n                break;\n            case 10:\n                message.schemaTag = reader.string();\n                break;\n            case 11:\n                message.schemaHash = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportHeader message.\n     * @function verify\n     * @memberof ReportHeader\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportHeader.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.service != null && message.hasOwnProperty(\"service\"))\n            if (!$util.isString(message.service))\n                return \"service: string expected\";\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            if (!$util.isString(message.hostname))\n                return \"hostname: string expected\";\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            if (!$util.isString(message.agentVersion))\n                return \"agentVersion: string expected\";\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            if (!$util.isString(message.serviceVersion))\n                return \"serviceVersion: string expected\";\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            if (!$util.isString(message.runtimeVersion))\n                return \"runtimeVersion: string expected\";\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            if (!$util.isString(message.uname))\n                return \"uname: string expected\";\n        if (message.schemaTag != null && message.hasOwnProperty(\"schemaTag\"))\n            if (!$util.isString(message.schemaTag))\n                return \"schemaTag: string expected\";\n        if (message.schemaHash != null && message.hasOwnProperty(\"schemaHash\"))\n            if (!$util.isString(message.schemaHash))\n                return \"schemaHash: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ReportHeader message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ReportHeader\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ReportHeader} ReportHeader\n     */\n    ReportHeader.fromObject = function fromObject(object) {\n        if (object instanceof $root.ReportHeader)\n            return object;\n        var message = new $root.ReportHeader();\n        if (object.service != null)\n            message.service = String(object.service);\n        if (object.hostname != null)\n            message.hostname = String(object.hostname);\n        if (object.agentVersion != null)\n            message.agentVersion = String(object.agentVersion);\n        if (object.serviceVersion != null)\n            message.serviceVersion = String(object.serviceVersion);\n        if (object.runtimeVersion != null)\n            message.runtimeVersion = String(object.runtimeVersion);\n        if (object.uname != null)\n            message.uname = String(object.uname);\n        if (object.schemaTag != null)\n            message.schemaTag = String(object.schemaTag);\n        if (object.schemaHash != null)\n            message.schemaHash = String(object.schemaHash);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportHeader\n     * @static\n     * @param {ReportHeader} message ReportHeader\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportHeader.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.service = \"\";\n            object.hostname = \"\";\n            object.agentVersion = \"\";\n            object.serviceVersion = \"\";\n            object.runtimeVersion = \"\";\n            object.uname = \"\";\n            object.schemaTag = \"\";\n            object.schemaHash = \"\";\n        }\n        if (message.service != null && message.hasOwnProperty(\"service\"))\n            object.service = message.service;\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            object.hostname = message.hostname;\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            object.agentVersion = message.agentVersion;\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            object.serviceVersion = message.serviceVersion;\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            object.runtimeVersion = message.runtimeVersion;\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            object.uname = message.uname;\n        if (message.schemaTag != null && message.hasOwnProperty(\"schemaTag\"))\n            object.schemaTag = message.schemaTag;\n        if (message.schemaHash != null && message.hasOwnProperty(\"schemaHash\"))\n            object.schemaHash = message.schemaHash;\n        return object;\n    };\n\n    /**\n     * Converts this ReportHeader to JSON.\n     * @function toJSON\n     * @memberof ReportHeader\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportHeader.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportHeader;\n})();\n\n$root.PathErrorStats = (function() {\n\n    /**\n     * Properties of a PathErrorStats.\n     * @exports IPathErrorStats\n     * @interface IPathErrorStats\n     * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n     * @property {number|null} [errorsCount] PathErrorStats errorsCount\n     * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n     */\n\n    /**\n     * Constructs a new PathErrorStats.\n     * @exports PathErrorStats\n     * @classdesc Represents a PathErrorStats.\n     * @implements IPathErrorStats\n     * @constructor\n     * @param {IPathErrorStats=} [properties] Properties to set\n     */\n    function PathErrorStats(properties) {\n        this.children = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PathErrorStats children.\n     * @member {Object.<string,IPathErrorStats>} children\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.children = $util.emptyObject;\n\n    /**\n     * PathErrorStats errorsCount.\n     * @member {number} errorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * PathErrorStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new PathErrorStats instance using the specified properties.\n     * @function create\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats=} [properties] Properties to set\n     * @returns {PathErrorStats} PathErrorStats instance\n     */\n    PathErrorStats.create = function create(properties) {\n        return new PathErrorStats(properties);\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encode\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.requestsWithErrorsCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PathErrorStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                reader.skip().pos++;\n                if (message.children === $util.emptyObject)\n                    message.children = {};\n                key = reader.string();\n                reader.pos++;\n                message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PathErrorStats message.\n     * @function verify\n     * @memberof PathErrorStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PathErrorStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\")) {\n            if (!$util.isObject(message.children))\n                return \"children: object expected\";\n            var key = Object.keys(message.children);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.PathErrorStats.verify(message.children[key[i]]);\n                if (error)\n                    return \"children.\" + error;\n            }\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a PathErrorStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PathErrorStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {PathErrorStats} PathErrorStats\n     */\n    PathErrorStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.PathErrorStats)\n            return object;\n        var message = new $root.PathErrorStats();\n        if (object.children) {\n            if (typeof object.children !== \"object\")\n                throw TypeError(\".PathErrorStats.children: object expected\");\n            message.children = {};\n            for (var keys = Object.keys(object.children), i = 0; i < keys.length; ++i) {\n                if (typeof object.children[keys[i]] !== \"object\")\n                    throw TypeError(\".PathErrorStats.children: object expected\");\n                message.children[keys[i]] = $root.PathErrorStats.fromObject(object.children[keys[i]]);\n            }\n        }\n        if (object.errorsCount != null)\n            if ($util.Long)\n                (message.errorsCount = $util.Long.fromValue(object.errorsCount)).unsigned = true;\n            else if (typeof object.errorsCount === \"string\")\n                message.errorsCount = parseInt(object.errorsCount, 10);\n            else if (typeof object.errorsCount === \"number\")\n                message.errorsCount = object.errorsCount;\n            else if (typeof object.errorsCount === \"object\")\n                message.errorsCount = new $util.LongBits(object.errorsCount.low >>> 0, object.errorsCount.high >>> 0).toNumber(true);\n        if (object.requestsWithErrorsCount != null)\n            if ($util.Long)\n                (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;\n            else if (typeof object.requestsWithErrorsCount === \"string\")\n                message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);\n            else if (typeof object.requestsWithErrorsCount === \"number\")\n                message.requestsWithErrorsCount = object.requestsWithErrorsCount;\n            else if (typeof object.requestsWithErrorsCount === \"object\")\n                message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PathErrorStats\n     * @static\n     * @param {PathErrorStats} message PathErrorStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PathErrorStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.children = {};\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.errorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n        }\n        var keys2;\n        if (message.children && (keys2 = Object.keys(message.children)).length) {\n            object.children = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        return object;\n    };\n\n    /**\n     * Converts this PathErrorStats to JSON.\n     * @function toJSON\n     * @memberof PathErrorStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PathErrorStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PathErrorStats;\n})();\n\n$root.ClientNameStats = (function() {\n\n    /**\n     * Properties of a ClientNameStats.\n     * @exports IClientNameStats\n     * @interface IClientNameStats\n     * @property {Array.<number>|null} [latencyCount] ClientNameStats latencyCount\n     * @property {Object.<string,number>|null} [requestsCountPerVersion] ClientNameStats requestsCountPerVersion\n     * @property {Object.<string,number>|null} [cacheHitsPerVersion] ClientNameStats cacheHitsPerVersion\n     * @property {Object.<string,number>|null} [persistedQueryHitsPerVersion] ClientNameStats persistedQueryHitsPerVersion\n     * @property {Object.<string,number>|null} [persistedQueryMissesPerVersion] ClientNameStats persistedQueryMissesPerVersion\n     * @property {Object.<string,number>|null} [registeredOperationCountPerVersion] ClientNameStats registeredOperationCountPerVersion\n     * @property {Object.<string,number>|null} [forbiddenOperationCountPerVersion] ClientNameStats forbiddenOperationCountPerVersion\n     * @property {Array.<number>|null} [cacheLatencyCount] ClientNameStats cacheLatencyCount\n     * @property {IPathErrorStats|null} [rootErrorStats] ClientNameStats rootErrorStats\n     * @property {number|null} [requestsWithErrorsCount] ClientNameStats requestsWithErrorsCount\n     * @property {Array.<number>|null} [publicCacheTtlCount] ClientNameStats publicCacheTtlCount\n     * @property {Array.<number>|null} [privateCacheTtlCount] ClientNameStats privateCacheTtlCount\n     */\n\n    /**\n     * Constructs a new ClientNameStats.\n     * @exports ClientNameStats\n     * @classdesc Represents a ClientNameStats.\n     * @implements IClientNameStats\n     * @constructor\n     * @param {IClientNameStats=} [properties] Properties to set\n     */\n    function ClientNameStats(properties) {\n        this.latencyCount = [];\n        this.requestsCountPerVersion = {};\n        this.cacheHitsPerVersion = {};\n        this.persistedQueryHitsPerVersion = {};\n        this.persistedQueryMissesPerVersion = {};\n        this.registeredOperationCountPerVersion = {};\n        this.forbiddenOperationCountPerVersion = {};\n        this.cacheLatencyCount = [];\n        this.publicCacheTtlCount = [];\n        this.privateCacheTtlCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ClientNameStats latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * ClientNameStats requestsCountPerVersion.\n     * @member {Object.<string,number>} requestsCountPerVersion\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.requestsCountPerVersion = $util.emptyObject;\n\n    /**\n     * ClientNameStats cacheHitsPerVersion.\n     * @member {Object.<string,number>} cacheHitsPerVersion\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.cacheHitsPerVersion = $util.emptyObject;\n\n    /**\n     * ClientNameStats persistedQueryHitsPerVersion.\n     * @member {Object.<string,number>} persistedQueryHitsPerVersion\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.persistedQueryHitsPerVersion = $util.emptyObject;\n\n    /**\n     * ClientNameStats persistedQueryMissesPerVersion.\n     * @member {Object.<string,number>} persistedQueryMissesPerVersion\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.persistedQueryMissesPerVersion = $util.emptyObject;\n\n    /**\n     * ClientNameStats registeredOperationCountPerVersion.\n     * @member {Object.<string,number>} registeredOperationCountPerVersion\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.registeredOperationCountPerVersion = $util.emptyObject;\n\n    /**\n     * ClientNameStats forbiddenOperationCountPerVersion.\n     * @member {Object.<string,number>} forbiddenOperationCountPerVersion\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.forbiddenOperationCountPerVersion = $util.emptyObject;\n\n    /**\n     * ClientNameStats cacheLatencyCount.\n     * @member {Array.<number>} cacheLatencyCount\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.cacheLatencyCount = $util.emptyArray;\n\n    /**\n     * ClientNameStats rootErrorStats.\n     * @member {IPathErrorStats|null|undefined} rootErrorStats\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.rootErrorStats = null;\n\n    /**\n     * ClientNameStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * ClientNameStats publicCacheTtlCount.\n     * @member {Array.<number>} publicCacheTtlCount\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.publicCacheTtlCount = $util.emptyArray;\n\n    /**\n     * ClientNameStats privateCacheTtlCount.\n     * @member {Array.<number>} privateCacheTtlCount\n     * @memberof ClientNameStats\n     * @instance\n     */\n    ClientNameStats.prototype.privateCacheTtlCount = $util.emptyArray;\n\n    /**\n     * Creates a new ClientNameStats instance using the specified properties.\n     * @function create\n     * @memberof ClientNameStats\n     * @static\n     * @param {IClientNameStats=} [properties] Properties to set\n     * @returns {ClientNameStats} ClientNameStats instance\n     */\n    ClientNameStats.create = function create(properties) {\n        return new ClientNameStats(properties);\n    };\n\n    /**\n     * Encodes the specified ClientNameStats message. Does not implicitly {@link ClientNameStats.verify|verify} messages.\n     * @function encode\n     * @memberof ClientNameStats\n     * @static\n     * @param {IClientNameStats} message ClientNameStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ClientNameStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.latencyCount != null && message.latencyCount.length) {\n            writer.uint32(/* id 1, wireType 2 =*/10).fork();\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                writer.int64(message.latencyCount[i]);\n            writer.ldelim();\n        }\n        if (message.requestsCountPerVersion != null && Object.hasOwnProperty.call(message, \"requestsCountPerVersion\"))\n            for (var keys = Object.keys(message.requestsCountPerVersion), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint64(message.requestsCountPerVersion[keys[i]]).ldelim();\n        if (message.cacheHitsPerVersion != null && Object.hasOwnProperty.call(message, \"cacheHitsPerVersion\"))\n            for (var keys = Object.keys(message.cacheHitsPerVersion), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint64(message.cacheHitsPerVersion[keys[i]]).ldelim();\n        if (message.cacheLatencyCount != null && message.cacheLatencyCount.length) {\n            writer.uint32(/* id 5, wireType 2 =*/42).fork();\n            for (var i = 0; i < message.cacheLatencyCount.length; ++i)\n                writer.int64(message.cacheLatencyCount[i]);\n            writer.ldelim();\n        }\n        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\"))\n            $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.requestsWithErrorsCount);\n        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.length) {\n            writer.uint32(/* id 8, wireType 2 =*/66).fork();\n            for (var i = 0; i < message.publicCacheTtlCount.length; ++i)\n                writer.int64(message.publicCacheTtlCount[i]);\n            writer.ldelim();\n        }\n        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.length) {\n            writer.uint32(/* id 9, wireType 2 =*/74).fork();\n            for (var i = 0; i < message.privateCacheTtlCount.length; ++i)\n                writer.int64(message.privateCacheTtlCount[i]);\n            writer.ldelim();\n        }\n        if (message.persistedQueryHitsPerVersion != null && Object.hasOwnProperty.call(message, \"persistedQueryHitsPerVersion\"))\n            for (var keys = Object.keys(message.persistedQueryHitsPerVersion), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 10, wireType 2 =*/82).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint64(message.persistedQueryHitsPerVersion[keys[i]]).ldelim();\n        if (message.persistedQueryMissesPerVersion != null && Object.hasOwnProperty.call(message, \"persistedQueryMissesPerVersion\"))\n            for (var keys = Object.keys(message.persistedQueryMissesPerVersion), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 11, wireType 2 =*/90).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint64(message.persistedQueryMissesPerVersion[keys[i]]).ldelim();\n        if (message.registeredOperationCountPerVersion != null && Object.hasOwnProperty.call(message, \"registeredOperationCountPerVersion\"))\n            for (var keys = Object.keys(message.registeredOperationCountPerVersion), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 12, wireType 2 =*/98).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint64(message.registeredOperationCountPerVersion[keys[i]]).ldelim();\n        if (message.forbiddenOperationCountPerVersion != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCountPerVersion\"))\n            for (var keys = Object.keys(message.forbiddenOperationCountPerVersion), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 13, wireType 2 =*/106).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint64(message.forbiddenOperationCountPerVersion[keys[i]]).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ClientNameStats message, length delimited. Does not implicitly {@link ClientNameStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ClientNameStats\n     * @static\n     * @param {IClientNameStats} message ClientNameStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ClientNameStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ClientNameStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ClientNameStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ClientNameStats} ClientNameStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ClientNameStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ClientNameStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.int64());\n                } else\n                    message.latencyCount.push(reader.int64());\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.requestsCountPerVersion === $util.emptyObject)\n                    message.requestsCountPerVersion = {};\n                key = reader.string();\n                reader.pos++;\n                message.requestsCountPerVersion[key] = reader.uint64();\n                break;\n            case 4:\n                reader.skip().pos++;\n                if (message.cacheHitsPerVersion === $util.emptyObject)\n                    message.cacheHitsPerVersion = {};\n                key = reader.string();\n                reader.pos++;\n                message.cacheHitsPerVersion[key] = reader.uint64();\n                break;\n            case 10:\n                reader.skip().pos++;\n                if (message.persistedQueryHitsPerVersion === $util.emptyObject)\n                    message.persistedQueryHitsPerVersion = {};\n                key = reader.string();\n                reader.pos++;\n                message.persistedQueryHitsPerVersion[key] = reader.uint64();\n                break;\n            case 11:\n                reader.skip().pos++;\n                if (message.persistedQueryMissesPerVersion === $util.emptyObject)\n                    message.persistedQueryMissesPerVersion = {};\n                key = reader.string();\n                reader.pos++;\n                message.persistedQueryMissesPerVersion[key] = reader.uint64();\n                break;\n            case 12:\n                reader.skip().pos++;\n                if (message.registeredOperationCountPerVersion === $util.emptyObject)\n                    message.registeredOperationCountPerVersion = {};\n                key = reader.string();\n                reader.pos++;\n                message.registeredOperationCountPerVersion[key] = reader.uint64();\n                break;\n            case 13:\n                reader.skip().pos++;\n                if (message.forbiddenOperationCountPerVersion === $util.emptyObject)\n                    message.forbiddenOperationCountPerVersion = {};\n                key = reader.string();\n                reader.pos++;\n                message.forbiddenOperationCountPerVersion[key] = reader.uint64();\n                break;\n            case 5:\n                if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))\n                    message.cacheLatencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.cacheLatencyCount.push(reader.int64());\n                } else\n                    message.cacheLatencyCount.push(reader.int64());\n                break;\n            case 6:\n                message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 8:\n                if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))\n                    message.publicCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.publicCacheTtlCount.push(reader.int64());\n                } else\n                    message.publicCacheTtlCount.push(reader.int64());\n                break;\n            case 9:\n                if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))\n                    message.privateCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.privateCacheTtlCount.push(reader.int64());\n                } else\n                    message.privateCacheTtlCount.push(reader.int64());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ClientNameStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ClientNameStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ClientNameStats} ClientNameStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ClientNameStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ClientNameStats message.\n     * @function verify\n     * @memberof ClientNameStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ClientNameStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            if (!Array.isArray(message.latencyCount))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        if (message.requestsCountPerVersion != null && message.hasOwnProperty(\"requestsCountPerVersion\")) {\n            if (!$util.isObject(message.requestsCountPerVersion))\n                return \"requestsCountPerVersion: object expected\";\n            var key = Object.keys(message.requestsCountPerVersion);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.requestsCountPerVersion[key[i]]) && !(message.requestsCountPerVersion[key[i]] && $util.isInteger(message.requestsCountPerVersion[key[i]].low) && $util.isInteger(message.requestsCountPerVersion[key[i]].high)))\n                    return \"requestsCountPerVersion: integer|Long{k:string} expected\";\n        }\n        if (message.cacheHitsPerVersion != null && message.hasOwnProperty(\"cacheHitsPerVersion\")) {\n            if (!$util.isObject(message.cacheHitsPerVersion))\n                return \"cacheHitsPerVersion: object expected\";\n            var key = Object.keys(message.cacheHitsPerVersion);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.cacheHitsPerVersion[key[i]]) && !(message.cacheHitsPerVersion[key[i]] && $util.isInteger(message.cacheHitsPerVersion[key[i]].low) && $util.isInteger(message.cacheHitsPerVersion[key[i]].high)))\n                    return \"cacheHitsPerVersion: integer|Long{k:string} expected\";\n        }\n        if (message.persistedQueryHitsPerVersion != null && message.hasOwnProperty(\"persistedQueryHitsPerVersion\")) {\n            if (!$util.isObject(message.persistedQueryHitsPerVersion))\n                return \"persistedQueryHitsPerVersion: object expected\";\n            var key = Object.keys(message.persistedQueryHitsPerVersion);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.persistedQueryHitsPerVersion[key[i]]) && !(message.persistedQueryHitsPerVersion[key[i]] && $util.isInteger(message.persistedQueryHitsPerVersion[key[i]].low) && $util.isInteger(message.persistedQueryHitsPerVersion[key[i]].high)))\n                    return \"persistedQueryHitsPerVersion: integer|Long{k:string} expected\";\n        }\n        if (message.persistedQueryMissesPerVersion != null && message.hasOwnProperty(\"persistedQueryMissesPerVersion\")) {\n            if (!$util.isObject(message.persistedQueryMissesPerVersion))\n                return \"persistedQueryMissesPerVersion: object expected\";\n            var key = Object.keys(message.persistedQueryMissesPerVersion);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.persistedQueryMissesPerVersion[key[i]]) && !(message.persistedQueryMissesPerVersion[key[i]] && $util.isInteger(message.persistedQueryMissesPerVersion[key[i]].low) && $util.isInteger(message.persistedQueryMissesPerVersion[key[i]].high)))\n                    return \"persistedQueryMissesPerVersion: integer|Long{k:string} expected\";\n        }\n        if (message.registeredOperationCountPerVersion != null && message.hasOwnProperty(\"registeredOperationCountPerVersion\")) {\n            if (!$util.isObject(message.registeredOperationCountPerVersion))\n                return \"registeredOperationCountPerVersion: object expected\";\n            var key = Object.keys(message.registeredOperationCountPerVersion);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.registeredOperationCountPerVersion[key[i]]) && !(message.registeredOperationCountPerVersion[key[i]] && $util.isInteger(message.registeredOperationCountPerVersion[key[i]].low) && $util.isInteger(message.registeredOperationCountPerVersion[key[i]].high)))\n                    return \"registeredOperationCountPerVersion: integer|Long{k:string} expected\";\n        }\n        if (message.forbiddenOperationCountPerVersion != null && message.hasOwnProperty(\"forbiddenOperationCountPerVersion\")) {\n            if (!$util.isObject(message.forbiddenOperationCountPerVersion))\n                return \"forbiddenOperationCountPerVersion: object expected\";\n            var key = Object.keys(message.forbiddenOperationCountPerVersion);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.forbiddenOperationCountPerVersion[key[i]]) && !(message.forbiddenOperationCountPerVersion[key[i]] && $util.isInteger(message.forbiddenOperationCountPerVersion[key[i]].low) && $util.isInteger(message.forbiddenOperationCountPerVersion[key[i]].high)))\n                    return \"forbiddenOperationCountPerVersion: integer|Long{k:string} expected\";\n        }\n        if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n            if (!Array.isArray(message.cacheLatencyCount))\n                return \"cacheLatencyCount: array expected\";\n            for (var i = 0; i < message.cacheLatencyCount.length; ++i)\n                if (!$util.isInteger(message.cacheLatencyCount[i]) && !(message.cacheLatencyCount[i] && $util.isInteger(message.cacheLatencyCount[i].low) && $util.isInteger(message.cacheLatencyCount[i].high)))\n                    return \"cacheLatencyCount: integer|Long[] expected\";\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n            var error = $root.PathErrorStats.verify(message.rootErrorStats);\n            if (error)\n                return \"rootErrorStats.\" + error;\n        }\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n            if (!Array.isArray(message.publicCacheTtlCount))\n                return \"publicCacheTtlCount: array expected\";\n            for (var i = 0; i < message.publicCacheTtlCount.length; ++i)\n                if (!$util.isInteger(message.publicCacheTtlCount[i]) && !(message.publicCacheTtlCount[i] && $util.isInteger(message.publicCacheTtlCount[i].low) && $util.isInteger(message.publicCacheTtlCount[i].high)))\n                    return \"publicCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n            if (!Array.isArray(message.privateCacheTtlCount))\n                return \"privateCacheTtlCount: array expected\";\n            for (var i = 0; i < message.privateCacheTtlCount.length; ++i)\n                if (!$util.isInteger(message.privateCacheTtlCount[i]) && !(message.privateCacheTtlCount[i] && $util.isInteger(message.privateCacheTtlCount[i].low) && $util.isInteger(message.privateCacheTtlCount[i].high)))\n                    return \"privateCacheTtlCount: integer|Long[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ClientNameStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ClientNameStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ClientNameStats} ClientNameStats\n     */\n    ClientNameStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.ClientNameStats)\n            return object;\n        var message = new $root.ClientNameStats();\n        if (object.latencyCount) {\n            if (!Array.isArray(object.latencyCount))\n                throw TypeError(\".ClientNameStats.latencyCount: array expected\");\n            message.latencyCount = [];\n            for (var i = 0; i < object.latencyCount.length; ++i)\n                if ($util.Long)\n                    (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;\n                else if (typeof object.latencyCount[i] === \"string\")\n                    message.latencyCount[i] = parseInt(object.latencyCount[i], 10);\n                else if (typeof object.latencyCount[i] === \"number\")\n                    message.latencyCount[i] = object.latencyCount[i];\n                else if (typeof object.latencyCount[i] === \"object\")\n                    message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n        }\n        if (object.requestsCountPerVersion) {\n            if (typeof object.requestsCountPerVersion !== \"object\")\n                throw TypeError(\".ClientNameStats.requestsCountPerVersion: object expected\");\n            message.requestsCountPerVersion = {};\n            for (var keys = Object.keys(object.requestsCountPerVersion), i = 0; i < keys.length; ++i)\n                if ($util.Long)\n                    (message.requestsCountPerVersion[keys[i]] = $util.Long.fromValue(object.requestsCountPerVersion[keys[i]])).unsigned = true;\n                else if (typeof object.requestsCountPerVersion[keys[i]] === \"string\")\n                    message.requestsCountPerVersion[keys[i]] = parseInt(object.requestsCountPerVersion[keys[i]], 10);\n                else if (typeof object.requestsCountPerVersion[keys[i]] === \"number\")\n                    message.requestsCountPerVersion[keys[i]] = object.requestsCountPerVersion[keys[i]];\n                else if (typeof object.requestsCountPerVersion[keys[i]] === \"object\")\n                    message.requestsCountPerVersion[keys[i]] = new $util.LongBits(object.requestsCountPerVersion[keys[i]].low >>> 0, object.requestsCountPerVersion[keys[i]].high >>> 0).toNumber(true);\n        }\n        if (object.cacheHitsPerVersion) {\n            if (typeof object.cacheHitsPerVersion !== \"object\")\n                throw TypeError(\".ClientNameStats.cacheHitsPerVersion: object expected\");\n            message.cacheHitsPerVersion = {};\n            for (var keys = Object.keys(object.cacheHitsPerVersion), i = 0; i < keys.length; ++i)\n                if ($util.Long)\n                    (message.cacheHitsPerVersion[keys[i]] = $util.Long.fromValue(object.cacheHitsPerVersion[keys[i]])).unsigned = true;\n                else if (typeof object.cacheHitsPerVersion[keys[i]] === \"string\")\n                    message.cacheHitsPerVersion[keys[i]] = parseInt(object.cacheHitsPerVersion[keys[i]], 10);\n                else if (typeof object.cacheHitsPerVersion[keys[i]] === \"number\")\n                    message.cacheHitsPerVersion[keys[i]] = object.cacheHitsPerVersion[keys[i]];\n                else if (typeof object.cacheHitsPerVersion[keys[i]] === \"object\")\n                    message.cacheHitsPerVersion[keys[i]] = new $util.LongBits(object.cacheHitsPerVersion[keys[i]].low >>> 0, object.cacheHitsPerVersion[keys[i]].high >>> 0).toNumber(true);\n        }\n        if (object.persistedQueryHitsPerVersion) {\n            if (typeof object.persistedQueryHitsPerVersion !== \"object\")\n                throw TypeError(\".ClientNameStats.persistedQueryHitsPerVersion: object expected\");\n            message.persistedQueryHitsPerVersion = {};\n            for (var keys = Object.keys(object.persistedQueryHitsPerVersion), i = 0; i < keys.length; ++i)\n                if ($util.Long)\n                    (message.persistedQueryHitsPerVersion[keys[i]] = $util.Long.fromValue(object.persistedQueryHitsPerVersion[keys[i]])).unsigned = true;\n                else if (typeof object.persistedQueryHitsPerVersion[keys[i]] === \"string\")\n                    message.persistedQueryHitsPerVersion[keys[i]] = parseInt(object.persistedQueryHitsPerVersion[keys[i]], 10);\n                else if (typeof object.persistedQueryHitsPerVersion[keys[i]] === \"number\")\n                    message.persistedQueryHitsPerVersion[keys[i]] = object.persistedQueryHitsPerVersion[keys[i]];\n                else if (typeof object.persistedQueryHitsPerVersion[keys[i]] === \"object\")\n                    message.persistedQueryHitsPerVersion[keys[i]] = new $util.LongBits(object.persistedQueryHitsPerVersion[keys[i]].low >>> 0, object.persistedQueryHitsPerVersion[keys[i]].high >>> 0).toNumber(true);\n        }\n        if (object.persistedQueryMissesPerVersion) {\n            if (typeof object.persistedQueryMissesPerVersion !== \"object\")\n                throw TypeError(\".ClientNameStats.persistedQueryMissesPerVersion: object expected\");\n            message.persistedQueryMissesPerVersion = {};\n            for (var keys = Object.keys(object.persistedQueryMissesPerVersion), i = 0; i < keys.length; ++i)\n                if ($util.Long)\n                    (message.persistedQueryMissesPerVersion[keys[i]] = $util.Long.fromValue(object.persistedQueryMissesPerVersion[keys[i]])).unsigned = true;\n                else if (typeof object.persistedQueryMissesPerVersion[keys[i]] === \"string\")\n                    message.persistedQueryMissesPerVersion[keys[i]] = parseInt(object.persistedQueryMissesPerVersion[keys[i]], 10);\n                else if (typeof object.persistedQueryMissesPerVersion[keys[i]] === \"number\")\n                    message.persistedQueryMissesPerVersion[keys[i]] = object.persistedQueryMissesPerVersion[keys[i]];\n                else if (typeof object.persistedQueryMissesPerVersion[keys[i]] === \"object\")\n                    message.persistedQueryMissesPerVersion[keys[i]] = new $util.LongBits(object.persistedQueryMissesPerVersion[keys[i]].low >>> 0, object.persistedQueryMissesPerVersion[keys[i]].high >>> 0).toNumber(true);\n        }\n        if (object.registeredOperationCountPerVersion) {\n            if (typeof object.registeredOperationCountPerVersion !== \"object\")\n                throw TypeError(\".ClientNameStats.registeredOperationCountPerVersion: object expected\");\n            message.registeredOperationCountPerVersion = {};\n            for (var keys = Object.keys(object.registeredOperationCountPerVersion), i = 0; i < keys.length; ++i)\n                if ($util.Long)\n                    (message.registeredOperationCountPerVersion[keys[i]] = $util.Long.fromValue(object.registeredOperationCountPerVersion[keys[i]])).unsigned = true;\n                else if (typeof object.registeredOperationCountPerVersion[keys[i]] === \"string\")\n                    message.registeredOperationCountPerVersion[keys[i]] = parseInt(object.registeredOperationCountPerVersion[keys[i]], 10);\n                else if (typeof object.registeredOperationCountPerVersion[keys[i]] === \"number\")\n                    message.registeredOperationCountPerVersion[keys[i]] = object.registeredOperationCountPerVersion[keys[i]];\n                else if (typeof object.registeredOperationCountPerVersion[keys[i]] === \"object\")\n                    message.registeredOperationCountPerVersion[keys[i]] = new $util.LongBits(object.registeredOperationCountPerVersion[keys[i]].low >>> 0, object.registeredOperationCountPerVersion[keys[i]].high >>> 0).toNumber(true);\n        }\n        if (object.forbiddenOperationCountPerVersion) {\n            if (typeof object.forbiddenOperationCountPerVersion !== \"object\")\n                throw TypeError(\".ClientNameStats.forbiddenOperationCountPerVersion: object expected\");\n            message.forbiddenOperationCountPerVersion = {};\n            for (var keys = Object.keys(object.forbiddenOperationCountPerVersion), i = 0; i < keys.length; ++i)\n                if ($util.Long)\n                    (message.forbiddenOperationCountPerVersion[keys[i]] = $util.Long.fromValue(object.forbiddenOperationCountPerVersion[keys[i]])).unsigned = true;\n                else if (typeof object.forbiddenOperationCountPerVersion[keys[i]] === \"string\")\n                    message.forbiddenOperationCountPerVersion[keys[i]] = parseInt(object.forbiddenOperationCountPerVersion[keys[i]], 10);\n                else if (typeof object.forbiddenOperationCountPerVersion[keys[i]] === \"number\")\n                    message.forbiddenOperationCountPerVersion[keys[i]] = object.forbiddenOperationCountPerVersion[keys[i]];\n                else if (typeof object.forbiddenOperationCountPerVersion[keys[i]] === \"object\")\n                    message.forbiddenOperationCountPerVersion[keys[i]] = new $util.LongBits(object.forbiddenOperationCountPerVersion[keys[i]].low >>> 0, object.forbiddenOperationCountPerVersion[keys[i]].high >>> 0).toNumber(true);\n        }\n        if (object.cacheLatencyCount) {\n            if (!Array.isArray(object.cacheLatencyCount))\n                throw TypeError(\".ClientNameStats.cacheLatencyCount: array expected\");\n            message.cacheLatencyCount = [];\n            for (var i = 0; i < object.cacheLatencyCount.length; ++i)\n                if ($util.Long)\n                    (message.cacheLatencyCount[i] = $util.Long.fromValue(object.cacheLatencyCount[i])).unsigned = false;\n                else if (typeof object.cacheLatencyCount[i] === \"string\")\n                    message.cacheLatencyCount[i] = parseInt(object.cacheLatencyCount[i], 10);\n                else if (typeof object.cacheLatencyCount[i] === \"number\")\n                    message.cacheLatencyCount[i] = object.cacheLatencyCount[i];\n                else if (typeof object.cacheLatencyCount[i] === \"object\")\n                    message.cacheLatencyCount[i] = new $util.LongBits(object.cacheLatencyCount[i].low >>> 0, object.cacheLatencyCount[i].high >>> 0).toNumber();\n        }\n        if (object.rootErrorStats != null) {\n            if (typeof object.rootErrorStats !== \"object\")\n                throw TypeError(\".ClientNameStats.rootErrorStats: object expected\");\n            message.rootErrorStats = $root.PathErrorStats.fromObject(object.rootErrorStats);\n        }\n        if (object.requestsWithErrorsCount != null)\n            if ($util.Long)\n                (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;\n            else if (typeof object.requestsWithErrorsCount === \"string\")\n                message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);\n            else if (typeof object.requestsWithErrorsCount === \"number\")\n                message.requestsWithErrorsCount = object.requestsWithErrorsCount;\n            else if (typeof object.requestsWithErrorsCount === \"object\")\n                message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n        if (object.publicCacheTtlCount) {\n            if (!Array.isArray(object.publicCacheTtlCount))\n                throw TypeError(\".ClientNameStats.publicCacheTtlCount: array expected\");\n            message.publicCacheTtlCount = [];\n            for (var i = 0; i < object.publicCacheTtlCount.length; ++i)\n                if ($util.Long)\n                    (message.publicCacheTtlCount[i] = $util.Long.fromValue(object.publicCacheTtlCount[i])).unsigned = false;\n                else if (typeof object.publicCacheTtlCount[i] === \"string\")\n                    message.publicCacheTtlCount[i] = parseInt(object.publicCacheTtlCount[i], 10);\n                else if (typeof object.publicCacheTtlCount[i] === \"number\")\n                    message.publicCacheTtlCount[i] = object.publicCacheTtlCount[i];\n                else if (typeof object.publicCacheTtlCount[i] === \"object\")\n                    message.publicCacheTtlCount[i] = new $util.LongBits(object.publicCacheTtlCount[i].low >>> 0, object.publicCacheTtlCount[i].high >>> 0).toNumber();\n        }\n        if (object.privateCacheTtlCount) {\n            if (!Array.isArray(object.privateCacheTtlCount))\n                throw TypeError(\".ClientNameStats.privateCacheTtlCount: array expected\");\n            message.privateCacheTtlCount = [];\n            for (var i = 0; i < object.privateCacheTtlCount.length; ++i)\n                if ($util.Long)\n                    (message.privateCacheTtlCount[i] = $util.Long.fromValue(object.privateCacheTtlCount[i])).unsigned = false;\n                else if (typeof object.privateCacheTtlCount[i] === \"string\")\n                    message.privateCacheTtlCount[i] = parseInt(object.privateCacheTtlCount[i], 10);\n                else if (typeof object.privateCacheTtlCount[i] === \"number\")\n                    message.privateCacheTtlCount[i] = object.privateCacheTtlCount[i];\n                else if (typeof object.privateCacheTtlCount[i] === \"object\")\n                    message.privateCacheTtlCount[i] = new $util.LongBits(object.privateCacheTtlCount[i].low >>> 0, object.privateCacheTtlCount[i].high >>> 0).toNumber();\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ClientNameStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ClientNameStats\n     * @static\n     * @param {ClientNameStats} message ClientNameStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ClientNameStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.latencyCount = [];\n            object.cacheLatencyCount = [];\n            object.publicCacheTtlCount = [];\n            object.privateCacheTtlCount = [];\n        }\n        if (options.objects || options.defaults) {\n            object.requestsCountPerVersion = {};\n            object.cacheHitsPerVersion = {};\n            object.persistedQueryHitsPerVersion = {};\n            object.persistedQueryMissesPerVersion = {};\n            object.registeredOperationCountPerVersion = {};\n            object.forbiddenOperationCountPerVersion = {};\n        }\n        if (options.defaults) {\n            object.rootErrorStats = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n        }\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        var keys2;\n        if (message.requestsCountPerVersion && (keys2 = Object.keys(message.requestsCountPerVersion)).length) {\n            object.requestsCountPerVersion = {};\n            for (var j = 0; j < keys2.length; ++j)\n                if (typeof message.requestsCountPerVersion[keys2[j]] === \"number\")\n                    object.requestsCountPerVersion[keys2[j]] = options.longs === String ? String(message.requestsCountPerVersion[keys2[j]]) : message.requestsCountPerVersion[keys2[j]];\n                else\n                    object.requestsCountPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.requestsCountPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.requestsCountPerVersion[keys2[j]].low >>> 0, message.requestsCountPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.requestsCountPerVersion[keys2[j]];\n        }\n        if (message.cacheHitsPerVersion && (keys2 = Object.keys(message.cacheHitsPerVersion)).length) {\n            object.cacheHitsPerVersion = {};\n            for (var j = 0; j < keys2.length; ++j)\n                if (typeof message.cacheHitsPerVersion[keys2[j]] === \"number\")\n                    object.cacheHitsPerVersion[keys2[j]] = options.longs === String ? String(message.cacheHitsPerVersion[keys2[j]]) : message.cacheHitsPerVersion[keys2[j]];\n                else\n                    object.cacheHitsPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHitsPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.cacheHitsPerVersion[keys2[j]].low >>> 0, message.cacheHitsPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.cacheHitsPerVersion[keys2[j]];\n        }\n        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n            object.cacheLatencyCount = [];\n            for (var j = 0; j < message.cacheLatencyCount.length; ++j)\n                if (typeof message.cacheLatencyCount[j] === \"number\")\n                    object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];\n                else\n                    object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\"))\n            object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n            object.publicCacheTtlCount = [];\n            for (var j = 0; j < message.publicCacheTtlCount.length; ++j)\n                if (typeof message.publicCacheTtlCount[j] === \"number\")\n                    object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];\n                else\n                    object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n        }\n        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n            object.privateCacheTtlCount = [];\n            for (var j = 0; j < message.privateCacheTtlCount.length; ++j)\n                if (typeof message.privateCacheTtlCount[j] === \"number\")\n                    object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];\n                else\n                    object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n        }\n        if (message.persistedQueryHitsPerVersion && (keys2 = Object.keys(message.persistedQueryHitsPerVersion)).length) {\n            object.persistedQueryHitsPerVersion = {};\n            for (var j = 0; j < keys2.length; ++j)\n                if (typeof message.persistedQueryHitsPerVersion[keys2[j]] === \"number\")\n                    object.persistedQueryHitsPerVersion[keys2[j]] = options.longs === String ? String(message.persistedQueryHitsPerVersion[keys2[j]]) : message.persistedQueryHitsPerVersion[keys2[j]];\n                else\n                    object.persistedQueryHitsPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHitsPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.persistedQueryHitsPerVersion[keys2[j]].low >>> 0, message.persistedQueryHitsPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.persistedQueryHitsPerVersion[keys2[j]];\n        }\n        if (message.persistedQueryMissesPerVersion && (keys2 = Object.keys(message.persistedQueryMissesPerVersion)).length) {\n            object.persistedQueryMissesPerVersion = {};\n            for (var j = 0; j < keys2.length; ++j)\n                if (typeof message.persistedQueryMissesPerVersion[keys2[j]] === \"number\")\n                    object.persistedQueryMissesPerVersion[keys2[j]] = options.longs === String ? String(message.persistedQueryMissesPerVersion[keys2[j]]) : message.persistedQueryMissesPerVersion[keys2[j]];\n                else\n                    object.persistedQueryMissesPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMissesPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.persistedQueryMissesPerVersion[keys2[j]].low >>> 0, message.persistedQueryMissesPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.persistedQueryMissesPerVersion[keys2[j]];\n        }\n        if (message.registeredOperationCountPerVersion && (keys2 = Object.keys(message.registeredOperationCountPerVersion)).length) {\n            object.registeredOperationCountPerVersion = {};\n            for (var j = 0; j < keys2.length; ++j)\n                if (typeof message.registeredOperationCountPerVersion[keys2[j]] === \"number\")\n                    object.registeredOperationCountPerVersion[keys2[j]] = options.longs === String ? String(message.registeredOperationCountPerVersion[keys2[j]]) : message.registeredOperationCountPerVersion[keys2[j]];\n                else\n                    object.registeredOperationCountPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCountPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.registeredOperationCountPerVersion[keys2[j]].low >>> 0, message.registeredOperationCountPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.registeredOperationCountPerVersion[keys2[j]];\n        }\n        if (message.forbiddenOperationCountPerVersion && (keys2 = Object.keys(message.forbiddenOperationCountPerVersion)).length) {\n            object.forbiddenOperationCountPerVersion = {};\n            for (var j = 0; j < keys2.length; ++j)\n                if (typeof message.forbiddenOperationCountPerVersion[keys2[j]] === \"number\")\n                    object.forbiddenOperationCountPerVersion[keys2[j]] = options.longs === String ? String(message.forbiddenOperationCountPerVersion[keys2[j]]) : message.forbiddenOperationCountPerVersion[keys2[j]];\n                else\n                    object.forbiddenOperationCountPerVersion[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCountPerVersion[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCountPerVersion[keys2[j]].low >>> 0, message.forbiddenOperationCountPerVersion[keys2[j]].high >>> 0).toNumber(true) : message.forbiddenOperationCountPerVersion[keys2[j]];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ClientNameStats to JSON.\n     * @function toJSON\n     * @memberof ClientNameStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ClientNameStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ClientNameStats;\n})();\n\n$root.QueryLatencyStats = (function() {\n\n    /**\n     * Properties of a QueryLatencyStats.\n     * @exports IQueryLatencyStats\n     * @interface IQueryLatencyStats\n     * @property {Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n     * @property {number|null} [requestCount] QueryLatencyStats requestCount\n     * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n     * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n     * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n     * @property {Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n     * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n     * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n     * @property {Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n     * @property {Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n     * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n     * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n     */\n\n    /**\n     * Constructs a new QueryLatencyStats.\n     * @exports QueryLatencyStats\n     * @classdesc Represents a QueryLatencyStats.\n     * @implements IQueryLatencyStats\n     * @constructor\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     */\n    function QueryLatencyStats(properties) {\n        this.latencyCount = [];\n        this.cacheLatencyCount = [];\n        this.publicCacheTtlCount = [];\n        this.privateCacheTtlCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * QueryLatencyStats latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats requestCount.\n     * @member {number} requestCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats cacheHits.\n     * @member {number} cacheHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheHits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats persistedQueryHits.\n     * @member {number} persistedQueryHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryHits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats persistedQueryMisses.\n     * @member {number} persistedQueryMisses\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryMisses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats cacheLatencyCount.\n     * @member {Array.<number>} cacheLatencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats rootErrorStats.\n     * @member {IPathErrorStats|null|undefined} rootErrorStats\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.rootErrorStats = null;\n\n    /**\n     * QueryLatencyStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats publicCacheTtlCount.\n     * @member {Array.<number>} publicCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats privateCacheTtlCount.\n     * @member {Array.<number>} privateCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats registeredOperationCount.\n     * @member {number} registeredOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.registeredOperationCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats forbiddenOperationCount.\n     * @member {number} forbiddenOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.forbiddenOperationCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new QueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     * @returns {QueryLatencyStats} QueryLatencyStats instance\n     */\n    QueryLatencyStats.create = function create(properties) {\n        return new QueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.latencyCount != null && message.latencyCount.length) {\n            writer.uint32(/* id 1, wireType 2 =*/10).fork();\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                writer.int64(message.latencyCount[i]);\n            writer.ldelim();\n        }\n        if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.requestCount);\n        if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.cacheHits);\n        if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.persistedQueryHits);\n        if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.persistedQueryMisses);\n        if (message.cacheLatencyCount != null && message.cacheLatencyCount.length) {\n            writer.uint32(/* id 6, wireType 2 =*/50).fork();\n            for (var i = 0; i < message.cacheLatencyCount.length; ++i)\n                writer.int64(message.cacheLatencyCount[i]);\n            writer.ldelim();\n        }\n        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\"))\n            $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.requestsWithErrorsCount);\n        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.length) {\n            writer.uint32(/* id 9, wireType 2 =*/74).fork();\n            for (var i = 0; i < message.publicCacheTtlCount.length; ++i)\n                writer.int64(message.publicCacheTtlCount[i]);\n            writer.ldelim();\n        }\n        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.length) {\n            writer.uint32(/* id 10, wireType 2 =*/82).fork();\n            for (var i = 0; i < message.privateCacheTtlCount.length; ++i)\n                writer.int64(message.privateCacheTtlCount[i]);\n            writer.ldelim();\n        }\n        if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.registeredOperationCount);\n        if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.forbiddenOperationCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.QueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.int64());\n                } else\n                    message.latencyCount.push(reader.int64());\n                break;\n            case 2:\n                message.requestCount = reader.uint64();\n                break;\n            case 3:\n                message.cacheHits = reader.uint64();\n                break;\n            case 4:\n                message.persistedQueryHits = reader.uint64();\n                break;\n            case 5:\n                message.persistedQueryMisses = reader.uint64();\n                break;\n            case 6:\n                if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))\n                    message.cacheLatencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.cacheLatencyCount.push(reader.int64());\n                } else\n                    message.cacheLatencyCount.push(reader.int64());\n                break;\n            case 7:\n                message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 9:\n                if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))\n                    message.publicCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.publicCacheTtlCount.push(reader.int64());\n                } else\n                    message.publicCacheTtlCount.push(reader.int64());\n                break;\n            case 10:\n                if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))\n                    message.privateCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.privateCacheTtlCount.push(reader.int64());\n                } else\n                    message.privateCacheTtlCount.push(reader.int64());\n                break;\n            case 11:\n                message.registeredOperationCount = reader.uint64();\n                break;\n            case 12:\n                message.forbiddenOperationCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a QueryLatencyStats message.\n     * @function verify\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    QueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            if (!Array.isArray(message.latencyCount))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high)))\n                return \"requestCount: integer|Long expected\";\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high)))\n                return \"cacheHits: integer|Long expected\";\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high)))\n                return \"persistedQueryHits: integer|Long expected\";\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high)))\n                return \"persistedQueryMisses: integer|Long expected\";\n        if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n            if (!Array.isArray(message.cacheLatencyCount))\n                return \"cacheLatencyCount: array expected\";\n            for (var i = 0; i < message.cacheLatencyCount.length; ++i)\n                if (!$util.isInteger(message.cacheLatencyCount[i]) && !(message.cacheLatencyCount[i] && $util.isInteger(message.cacheLatencyCount[i].low) && $util.isInteger(message.cacheLatencyCount[i].high)))\n                    return \"cacheLatencyCount: integer|Long[] expected\";\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n            var error = $root.PathErrorStats.verify(message.rootErrorStats);\n            if (error)\n                return \"rootErrorStats.\" + error;\n        }\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n            if (!Array.isArray(message.publicCacheTtlCount))\n                return \"publicCacheTtlCount: array expected\";\n            for (var i = 0; i < message.publicCacheTtlCount.length; ++i)\n                if (!$util.isInteger(message.publicCacheTtlCount[i]) && !(message.publicCacheTtlCount[i] && $util.isInteger(message.publicCacheTtlCount[i].low) && $util.isInteger(message.publicCacheTtlCount[i].high)))\n                    return \"publicCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n            if (!Array.isArray(message.privateCacheTtlCount))\n                return \"privateCacheTtlCount: array expected\";\n            for (var i = 0; i < message.privateCacheTtlCount.length; ++i)\n                if (!$util.isInteger(message.privateCacheTtlCount[i]) && !(message.privateCacheTtlCount[i] && $util.isInteger(message.privateCacheTtlCount[i].low) && $util.isInteger(message.privateCacheTtlCount[i].high)))\n                    return \"privateCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high)))\n                return \"registeredOperationCount: integer|Long expected\";\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high)))\n                return \"forbiddenOperationCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a QueryLatencyStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     */\n    QueryLatencyStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.QueryLatencyStats)\n            return object;\n        var message = new $root.QueryLatencyStats();\n        if (object.latencyCount) {\n            if (!Array.isArray(object.latencyCount))\n                throw TypeError(\".QueryLatencyStats.latencyCount: array expected\");\n            message.latencyCount = [];\n            for (var i = 0; i < object.latencyCount.length; ++i)\n                if ($util.Long)\n                    (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;\n                else if (typeof object.latencyCount[i] === \"string\")\n                    message.latencyCount[i] = parseInt(object.latencyCount[i], 10);\n                else if (typeof object.latencyCount[i] === \"number\")\n                    message.latencyCount[i] = object.latencyCount[i];\n                else if (typeof object.latencyCount[i] === \"object\")\n                    message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n        }\n        if (object.requestCount != null)\n            if ($util.Long)\n                (message.requestCount = $util.Long.fromValue(object.requestCount)).unsigned = true;\n            else if (typeof object.requestCount === \"string\")\n                message.requestCount = parseInt(object.requestCount, 10);\n            else if (typeof object.requestCount === \"number\")\n                message.requestCount = object.requestCount;\n            else if (typeof object.requestCount === \"object\")\n                message.requestCount = new $util.LongBits(object.requestCount.low >>> 0, object.requestCount.high >>> 0).toNumber(true);\n        if (object.cacheHits != null)\n            if ($util.Long)\n                (message.cacheHits = $util.Long.fromValue(object.cacheHits)).unsigned = true;\n            else if (typeof object.cacheHits === \"string\")\n                message.cacheHits = parseInt(object.cacheHits, 10);\n            else if (typeof object.cacheHits === \"number\")\n                message.cacheHits = object.cacheHits;\n            else if (typeof object.cacheHits === \"object\")\n                message.cacheHits = new $util.LongBits(object.cacheHits.low >>> 0, object.cacheHits.high >>> 0).toNumber(true);\n        if (object.persistedQueryHits != null)\n            if ($util.Long)\n                (message.persistedQueryHits = $util.Long.fromValue(object.persistedQueryHits)).unsigned = true;\n            else if (typeof object.persistedQueryHits === \"string\")\n                message.persistedQueryHits = parseInt(object.persistedQueryHits, 10);\n            else if (typeof object.persistedQueryHits === \"number\")\n                message.persistedQueryHits = object.persistedQueryHits;\n            else if (typeof object.persistedQueryHits === \"object\")\n                message.persistedQueryHits = new $util.LongBits(object.persistedQueryHits.low >>> 0, object.persistedQueryHits.high >>> 0).toNumber(true);\n        if (object.persistedQueryMisses != null)\n            if ($util.Long)\n                (message.persistedQueryMisses = $util.Long.fromValue(object.persistedQueryMisses)).unsigned = true;\n            else if (typeof object.persistedQueryMisses === \"string\")\n                message.persistedQueryMisses = parseInt(object.persistedQueryMisses, 10);\n            else if (typeof object.persistedQueryMisses === \"number\")\n                message.persistedQueryMisses = object.persistedQueryMisses;\n            else if (typeof object.persistedQueryMisses === \"object\")\n                message.persistedQueryMisses = new $util.LongBits(object.persistedQueryMisses.low >>> 0, object.persistedQueryMisses.high >>> 0).toNumber(true);\n        if (object.cacheLatencyCount) {\n            if (!Array.isArray(object.cacheLatencyCount))\n                throw TypeError(\".QueryLatencyStats.cacheLatencyCount: array expected\");\n            message.cacheLatencyCount = [];\n            for (var i = 0; i < object.cacheLatencyCount.length; ++i)\n                if ($util.Long)\n                    (message.cacheLatencyCount[i] = $util.Long.fromValue(object.cacheLatencyCount[i])).unsigned = false;\n                else if (typeof object.cacheLatencyCount[i] === \"string\")\n                    message.cacheLatencyCount[i] = parseInt(object.cacheLatencyCount[i], 10);\n                else if (typeof object.cacheLatencyCount[i] === \"number\")\n                    message.cacheLatencyCount[i] = object.cacheLatencyCount[i];\n                else if (typeof object.cacheLatencyCount[i] === \"object\")\n                    message.cacheLatencyCount[i] = new $util.LongBits(object.cacheLatencyCount[i].low >>> 0, object.cacheLatencyCount[i].high >>> 0).toNumber();\n        }\n        if (object.rootErrorStats != null) {\n            if (typeof object.rootErrorStats !== \"object\")\n                throw TypeError(\".QueryLatencyStats.rootErrorStats: object expected\");\n            message.rootErrorStats = $root.PathErrorStats.fromObject(object.rootErrorStats);\n        }\n        if (object.requestsWithErrorsCount != null)\n            if ($util.Long)\n                (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;\n            else if (typeof object.requestsWithErrorsCount === \"string\")\n                message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);\n            else if (typeof object.requestsWithErrorsCount === \"number\")\n                message.requestsWithErrorsCount = object.requestsWithErrorsCount;\n            else if (typeof object.requestsWithErrorsCount === \"object\")\n                message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n        if (object.publicCacheTtlCount) {\n            if (!Array.isArray(object.publicCacheTtlCount))\n                throw TypeError(\".QueryLatencyStats.publicCacheTtlCount: array expected\");\n            message.publicCacheTtlCount = [];\n            for (var i = 0; i < object.publicCacheTtlCount.length; ++i)\n                if ($util.Long)\n                    (message.publicCacheTtlCount[i] = $util.Long.fromValue(object.publicCacheTtlCount[i])).unsigned = false;\n                else if (typeof object.publicCacheTtlCount[i] === \"string\")\n                    message.publicCacheTtlCount[i] = parseInt(object.publicCacheTtlCount[i], 10);\n                else if (typeof object.publicCacheTtlCount[i] === \"number\")\n                    message.publicCacheTtlCount[i] = object.publicCacheTtlCount[i];\n                else if (typeof object.publicCacheTtlCount[i] === \"object\")\n                    message.publicCacheTtlCount[i] = new $util.LongBits(object.publicCacheTtlCount[i].low >>> 0, object.publicCacheTtlCount[i].high >>> 0).toNumber();\n        }\n        if (object.privateCacheTtlCount) {\n            if (!Array.isArray(object.privateCacheTtlCount))\n                throw TypeError(\".QueryLatencyStats.privateCacheTtlCount: array expected\");\n            message.privateCacheTtlCount = [];\n            for (var i = 0; i < object.privateCacheTtlCount.length; ++i)\n                if ($util.Long)\n                    (message.privateCacheTtlCount[i] = $util.Long.fromValue(object.privateCacheTtlCount[i])).unsigned = false;\n                else if (typeof object.privateCacheTtlCount[i] === \"string\")\n                    message.privateCacheTtlCount[i] = parseInt(object.privateCacheTtlCount[i], 10);\n                else if (typeof object.privateCacheTtlCount[i] === \"number\")\n                    message.privateCacheTtlCount[i] = object.privateCacheTtlCount[i];\n                else if (typeof object.privateCacheTtlCount[i] === \"object\")\n                    message.privateCacheTtlCount[i] = new $util.LongBits(object.privateCacheTtlCount[i].low >>> 0, object.privateCacheTtlCount[i].high >>> 0).toNumber();\n        }\n        if (object.registeredOperationCount != null)\n            if ($util.Long)\n                (message.registeredOperationCount = $util.Long.fromValue(object.registeredOperationCount)).unsigned = true;\n            else if (typeof object.registeredOperationCount === \"string\")\n                message.registeredOperationCount = parseInt(object.registeredOperationCount, 10);\n            else if (typeof object.registeredOperationCount === \"number\")\n                message.registeredOperationCount = object.registeredOperationCount;\n            else if (typeof object.registeredOperationCount === \"object\")\n                message.registeredOperationCount = new $util.LongBits(object.registeredOperationCount.low >>> 0, object.registeredOperationCount.high >>> 0).toNumber(true);\n        if (object.forbiddenOperationCount != null)\n            if ($util.Long)\n                (message.forbiddenOperationCount = $util.Long.fromValue(object.forbiddenOperationCount)).unsigned = true;\n            else if (typeof object.forbiddenOperationCount === \"string\")\n                message.forbiddenOperationCount = parseInt(object.forbiddenOperationCount, 10);\n            else if (typeof object.forbiddenOperationCount === \"number\")\n                message.forbiddenOperationCount = object.forbiddenOperationCount;\n            else if (typeof object.forbiddenOperationCount === \"object\")\n                message.forbiddenOperationCount = new $util.LongBits(object.forbiddenOperationCount.low >>> 0, object.forbiddenOperationCount.high >>> 0).toNumber(true);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {QueryLatencyStats} message QueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    QueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.latencyCount = [];\n            object.cacheLatencyCount = [];\n            object.publicCacheTtlCount = [];\n            object.privateCacheTtlCount = [];\n        }\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.cacheHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.cacheHits = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.persistedQueryHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.persistedQueryHits = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.persistedQueryMisses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.persistedQueryMisses = options.longs === String ? \"0\" : 0;\n            object.rootErrorStats = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.registeredOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.registeredOperationCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.forbiddenOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.forbiddenOperationCount = options.longs === String ? \"0\" : 0;\n        }\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (typeof message.requestCount === \"number\")\n                object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;\n            else\n                object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (typeof message.cacheHits === \"number\")\n                object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;\n            else\n                object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (typeof message.persistedQueryHits === \"number\")\n                object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;\n            else\n                object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (typeof message.persistedQueryMisses === \"number\")\n                object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;\n            else\n                object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n            object.cacheLatencyCount = [];\n            for (var j = 0; j < message.cacheLatencyCount.length; ++j)\n                if (typeof message.cacheLatencyCount[j] === \"number\")\n                    object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];\n                else\n                    object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\"))\n            object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n            object.publicCacheTtlCount = [];\n            for (var j = 0; j < message.publicCacheTtlCount.length; ++j)\n                if (typeof message.publicCacheTtlCount[j] === \"number\")\n                    object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];\n                else\n                    object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n        }\n        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n            object.privateCacheTtlCount = [];\n            for (var j = 0; j < message.privateCacheTtlCount.length; ++j)\n                if (typeof message.privateCacheTtlCount[j] === \"number\")\n                    object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];\n                else\n                    object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n        }\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (typeof message.registeredOperationCount === \"number\")\n                object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;\n            else\n                object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (typeof message.forbiddenOperationCount === \"number\")\n                object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;\n            else\n                object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n        return object;\n    };\n\n    /**\n     * Converts this QueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof QueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    QueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return QueryLatencyStats;\n})();\n\n$root.StatsContext = (function() {\n\n    /**\n     * Properties of a StatsContext.\n     * @exports IStatsContext\n     * @interface IStatsContext\n     * @property {string|null} [clientReferenceId] StatsContext clientReferenceId\n     * @property {string|null} [clientName] StatsContext clientName\n     * @property {string|null} [clientVersion] StatsContext clientVersion\n     */\n\n    /**\n     * Constructs a new StatsContext.\n     * @exports StatsContext\n     * @classdesc Represents a StatsContext.\n     * @implements IStatsContext\n     * @constructor\n     * @param {IStatsContext=} [properties] Properties to set\n     */\n    function StatsContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StatsContext clientReferenceId.\n     * @member {string} clientReferenceId\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientReferenceId = \"\";\n\n    /**\n     * StatsContext clientName.\n     * @member {string} clientName\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientName = \"\";\n\n    /**\n     * StatsContext clientVersion.\n     * @member {string} clientVersion\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientVersion = \"\";\n\n    /**\n     * Creates a new StatsContext instance using the specified properties.\n     * @function create\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext=} [properties] Properties to set\n     * @returns {StatsContext} StatsContext instance\n     */\n    StatsContext.create = function create(properties) {\n        return new StatsContext(properties);\n    };\n\n    /**\n     * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encode\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.clientReferenceId != null && Object.hasOwnProperty.call(message, \"clientReferenceId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.clientReferenceId);\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.clientVersion);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StatsContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.clientReferenceId = reader.string();\n                break;\n            case 2:\n                message.clientName = reader.string();\n                break;\n            case 3:\n                message.clientVersion = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StatsContext message.\n     * @function verify\n     * @memberof StatsContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StatsContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\"))\n            if (!$util.isString(message.clientReferenceId))\n                return \"clientReferenceId: string expected\";\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a StatsContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof StatsContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {StatsContext} StatsContext\n     */\n    StatsContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.StatsContext)\n            return object;\n        var message = new $root.StatsContext();\n        if (object.clientReferenceId != null)\n            message.clientReferenceId = String(object.clientReferenceId);\n        if (object.clientName != null)\n            message.clientName = String(object.clientName);\n        if (object.clientVersion != null)\n            message.clientVersion = String(object.clientVersion);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StatsContext\n     * @static\n     * @param {StatsContext} message StatsContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StatsContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.clientReferenceId = \"\";\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n        }\n        if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\"))\n            object.clientReferenceId = message.clientReferenceId;\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        return object;\n    };\n\n    /**\n     * Converts this StatsContext to JSON.\n     * @function toJSON\n     * @memberof StatsContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StatsContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return StatsContext;\n})();\n\n$root.ContextualizedQueryLatencyStats = (function() {\n\n    /**\n     * Properties of a ContextualizedQueryLatencyStats.\n     * @exports IContextualizedQueryLatencyStats\n     * @interface IContextualizedQueryLatencyStats\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n     * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n     */\n\n    /**\n     * Constructs a new ContextualizedQueryLatencyStats.\n     * @exports ContextualizedQueryLatencyStats\n     * @classdesc Represents a ContextualizedQueryLatencyStats.\n     * @implements IContextualizedQueryLatencyStats\n     * @constructor\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     */\n    function ContextualizedQueryLatencyStats(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedQueryLatencyStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedQueryLatencyStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.context = null;\n\n    /**\n     * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n     */\n    ContextualizedQueryLatencyStats.create = function create(properties) {\n        return new ContextualizedQueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedQueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedQueryLatencyStats message.\n     * @function verify\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedQueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ContextualizedQueryLatencyStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     */\n    ContextualizedQueryLatencyStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.ContextualizedQueryLatencyStats)\n            return object;\n        var message = new $root.ContextualizedQueryLatencyStats();\n        if (object.queryLatencyStats != null) {\n            if (typeof object.queryLatencyStats !== \"object\")\n                throw TypeError(\".ContextualizedQueryLatencyStats.queryLatencyStats: object expected\");\n            message.queryLatencyStats = $root.QueryLatencyStats.fromObject(object.queryLatencyStats);\n        }\n        if (object.context != null) {\n            if (typeof object.context !== \"object\")\n                throw TypeError(\".ContextualizedQueryLatencyStats.context: object expected\");\n            message.context = $root.StatsContext.fromObject(object.context);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.queryLatencyStats = null;\n            object.context = null;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedQueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedQueryLatencyStats;\n})();\n\n$root.ContextualizedTypeStats = (function() {\n\n    /**\n     * Properties of a ContextualizedTypeStats.\n     * @exports IContextualizedTypeStats\n     * @interface IContextualizedTypeStats\n     * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedTypeStats.\n     * @exports ContextualizedTypeStats\n     * @classdesc Represents a ContextualizedTypeStats.\n     * @implements IContextualizedTypeStats\n     * @constructor\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     */\n    function ContextualizedTypeStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedTypeStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.context = null;\n\n    /**\n     * ContextualizedTypeStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedTypeStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n     */\n    ContextualizedTypeStats.create = function create(properties) {\n        return new ContextualizedTypeStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedTypeStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedTypeStats message.\n     * @function verify\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedTypeStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ContextualizedTypeStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     */\n    ContextualizedTypeStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.ContextualizedTypeStats)\n            return object;\n        var message = new $root.ContextualizedTypeStats();\n        if (object.context != null) {\n            if (typeof object.context !== \"object\")\n                throw TypeError(\".ContextualizedTypeStats.context: object expected\");\n            message.context = $root.StatsContext.fromObject(object.context);\n        }\n        if (object.perTypeStat) {\n            if (typeof object.perTypeStat !== \"object\")\n                throw TypeError(\".ContextualizedTypeStats.perTypeStat: object expected\");\n            message.perTypeStat = {};\n            for (var keys = Object.keys(object.perTypeStat), i = 0; i < keys.length; ++i) {\n                if (typeof object.perTypeStat[keys[i]] !== \"object\")\n                    throw TypeError(\".ContextualizedTypeStats.perTypeStat: object expected\");\n                message.perTypeStat[keys[i]] = $root.TypeStat.fromObject(object.perTypeStat[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedTypeStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults)\n            object.context = null;\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        var keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedTypeStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedTypeStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedTypeStats;\n})();\n\n$root.FieldStat = (function() {\n\n    /**\n     * Properties of a FieldStat.\n     * @exports IFieldStat\n     * @interface IFieldStat\n     * @property {string|null} [name] FieldStat name\n     * @property {string|null} [returnType] FieldStat returnType\n     * @property {number|null} [errorsCount] FieldStat errorsCount\n     * @property {number|null} [count] FieldStat count\n     * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n     * @property {Array.<number>|null} [latencyCount] FieldStat latencyCount\n     */\n\n    /**\n     * Constructs a new FieldStat.\n     * @exports FieldStat\n     * @classdesc Represents a FieldStat.\n     * @implements IFieldStat\n     * @constructor\n     * @param {IFieldStat=} [properties] Properties to set\n     */\n    function FieldStat(properties) {\n        this.latencyCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FieldStat name.\n     * @member {string} name\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.name = \"\";\n\n    /**\n     * FieldStat returnType.\n     * @member {string} returnType\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.returnType = \"\";\n\n    /**\n     * FieldStat errorsCount.\n     * @member {number} errorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat count.\n     * @member {number} count\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * Creates a new FieldStat instance using the specified properties.\n     * @function create\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat=} [properties] Properties to set\n     * @returns {FieldStat} FieldStat instance\n     */\n    FieldStat.create = function create(properties) {\n        return new FieldStat(properties);\n    };\n\n    /**\n     * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encode\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.returnType);\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.count);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.requestsWithErrorsCount);\n        if (message.latencyCount != null && message.latencyCount.length) {\n            writer.uint32(/* id 8, wireType 2 =*/66).fork();\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                writer.int64(message.latencyCount[i]);\n            writer.ldelim();\n        }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FieldStat();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.name = reader.string();\n                break;\n            case 3:\n                message.returnType = reader.string();\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.count = reader.uint64();\n                break;\n            case 6:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 8:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.int64());\n                } else\n                    message.latencyCount.push(reader.int64());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FieldStat message.\n     * @function verify\n     * @memberof FieldStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FieldStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.count != null && message.hasOwnProperty(\"count\"))\n            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                return \"count: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            if (!Array.isArray(message.latencyCount))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a FieldStat message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof FieldStat\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {FieldStat} FieldStat\n     */\n    FieldStat.fromObject = function fromObject(object) {\n        if (object instanceof $root.FieldStat)\n            return object;\n        var message = new $root.FieldStat();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.returnType != null)\n            message.returnType = String(object.returnType);\n        if (object.errorsCount != null)\n            if ($util.Long)\n                (message.errorsCount = $util.Long.fromValue(object.errorsCount)).unsigned = true;\n            else if (typeof object.errorsCount === \"string\")\n                message.errorsCount = parseInt(object.errorsCount, 10);\n            else if (typeof object.errorsCount === \"number\")\n                message.errorsCount = object.errorsCount;\n            else if (typeof object.errorsCount === \"object\")\n                message.errorsCount = new $util.LongBits(object.errorsCount.low >>> 0, object.errorsCount.high >>> 0).toNumber(true);\n        if (object.count != null)\n            if ($util.Long)\n                (message.count = $util.Long.fromValue(object.count)).unsigned = true;\n            else if (typeof object.count === \"string\")\n                message.count = parseInt(object.count, 10);\n            else if (typeof object.count === \"number\")\n                message.count = object.count;\n            else if (typeof object.count === \"object\")\n                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber(true);\n        if (object.requestsWithErrorsCount != null)\n            if ($util.Long)\n                (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;\n            else if (typeof object.requestsWithErrorsCount === \"string\")\n                message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);\n            else if (typeof object.requestsWithErrorsCount === \"number\")\n                message.requestsWithErrorsCount = object.requestsWithErrorsCount;\n            else if (typeof object.requestsWithErrorsCount === \"object\")\n                message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n        if (object.latencyCount) {\n            if (!Array.isArray(object.latencyCount))\n                throw TypeError(\".FieldStat.latencyCount: array expected\");\n            message.latencyCount = [];\n            for (var i = 0; i < object.latencyCount.length; ++i)\n                if ($util.Long)\n                    (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;\n                else if (typeof object.latencyCount[i] === \"string\")\n                    message.latencyCount[i] = parseInt(object.latencyCount[i], 10);\n                else if (typeof object.latencyCount[i] === \"number\")\n                    message.latencyCount[i] = object.latencyCount[i];\n                else if (typeof object.latencyCount[i] === \"object\")\n                    message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FieldStat\n     * @static\n     * @param {FieldStat} message FieldStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FieldStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.latencyCount = [];\n        if (options.defaults) {\n            object.name = \"\";\n            object.returnType = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.errorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.count = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.count != null && message.hasOwnProperty(\"count\"))\n            if (typeof message.count === \"number\")\n                object.count = options.longs === String ? String(message.count) : message.count;\n            else\n                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber(true) : message.count;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this FieldStat to JSON.\n     * @function toJSON\n     * @memberof FieldStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FieldStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FieldStat;\n})();\n\n$root.TypeStat = (function() {\n\n    /**\n     * Properties of a TypeStat.\n     * @exports ITypeStat\n     * @interface ITypeStat\n     * @property {string|null} [name] TypeStat name\n     * @property {Array.<IFieldStat>|null} [field] TypeStat field\n     * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n     */\n\n    /**\n     * Constructs a new TypeStat.\n     * @exports TypeStat\n     * @classdesc Represents a TypeStat.\n     * @implements ITypeStat\n     * @constructor\n     * @param {ITypeStat=} [properties] Properties to set\n     */\n    function TypeStat(properties) {\n        this.field = [];\n        this.perFieldStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TypeStat name.\n     * @member {string} name\n     * @memberof TypeStat\n     * @instance\n     */\n    TypeStat.prototype.name = \"\";\n\n    /**\n     * TypeStat field.\n     * @member {Array.<IFieldStat>} field\n     * @memberof TypeStat\n     * @instance\n     */\n    TypeStat.prototype.field = $util.emptyArray;\n\n    /**\n     * TypeStat perFieldStat.\n     * @member {Object.<string,IFieldStat>} perFieldStat\n     * @memberof TypeStat\n     * @instance\n     */\n    TypeStat.prototype.perFieldStat = $util.emptyObject;\n\n    /**\n     * Creates a new TypeStat instance using the specified properties.\n     * @function create\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat=} [properties] Properties to set\n     * @returns {TypeStat} TypeStat instance\n     */\n    TypeStat.create = function create(properties) {\n        return new TypeStat(properties);\n    };\n\n    /**\n     * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encode\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.field != null && message.field.length)\n            for (var i = 0; i < message.field.length; ++i)\n                $root.FieldStat.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\"))\n            for (var keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TypeStat(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                if (!(message.field && message.field.length))\n                    message.field = [];\n                message.field.push($root.FieldStat.decode(reader, reader.uint32()));\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.perFieldStat === $util.emptyObject)\n                    message.perFieldStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TypeStat message.\n     * @function verify\n     * @memberof TypeStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.field != null && message.hasOwnProperty(\"field\")) {\n            if (!Array.isArray(message.field))\n                return \"field: array expected\";\n            for (var i = 0; i < message.field.length; ++i) {\n                var error = $root.FieldStat.verify(message.field[i]);\n                if (error)\n                    return \"field.\" + error;\n            }\n        }\n        if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n            if (!$util.isObject(message.perFieldStat))\n                return \"perFieldStat: object expected\";\n            var key = Object.keys(message.perFieldStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n                if (error)\n                    return \"perFieldStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a TypeStat message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TypeStat\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TypeStat} TypeStat\n     */\n    TypeStat.fromObject = function fromObject(object) {\n        if (object instanceof $root.TypeStat)\n            return object;\n        var message = new $root.TypeStat();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.field) {\n            if (!Array.isArray(object.field))\n                throw TypeError(\".TypeStat.field: array expected\");\n            message.field = [];\n            for (var i = 0; i < object.field.length; ++i) {\n                if (typeof object.field[i] !== \"object\")\n                    throw TypeError(\".TypeStat.field: object expected\");\n                message.field[i] = $root.FieldStat.fromObject(object.field[i]);\n            }\n        }\n        if (object.perFieldStat) {\n            if (typeof object.perFieldStat !== \"object\")\n                throw TypeError(\".TypeStat.perFieldStat: object expected\");\n            message.perFieldStat = {};\n            for (var keys = Object.keys(object.perFieldStat), i = 0; i < keys.length; ++i) {\n                if (typeof object.perFieldStat[keys[i]] !== \"object\")\n                    throw TypeError(\".TypeStat.perFieldStat: object expected\");\n                message.perFieldStat[keys[i]] = $root.FieldStat.fromObject(object.perFieldStat[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TypeStat\n     * @static\n     * @param {TypeStat} message TypeStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.field = [];\n        if (options.objects || options.defaults)\n            object.perFieldStat = {};\n        if (options.defaults)\n            object.name = \"\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.field && message.field.length) {\n            object.field = [];\n            for (var j = 0; j < message.field.length; ++j)\n                object.field[j] = $root.FieldStat.toObject(message.field[j], options);\n        }\n        var keys2;\n        if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n            object.perFieldStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TypeStat to JSON.\n     * @function toJSON\n     * @memberof TypeStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TypeStat;\n})();\n\n$root.QueryStats = (function() {\n\n    /**\n     * Properties of a QueryStats.\n     * @exports IQueryStats\n     * @interface IQueryStats\n     * @property {Object.<string,IClientNameStats>|null} [perClientName] QueryStats perClientName\n     * @property {Array.<IContextualizedQueryLatencyStats>|null} [queryStatsWithContext] QueryStats queryStatsWithContext\n     * @property {Array.<ITypeStat>|null} [perType] QueryStats perType\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] QueryStats perTypeStat\n     * @property {Array.<IContextualizedTypeStats>|null} [typeStatsWithContext] QueryStats typeStatsWithContext\n     */\n\n    /**\n     * Constructs a new QueryStats.\n     * @exports QueryStats\n     * @classdesc Represents a QueryStats.\n     * @implements IQueryStats\n     * @constructor\n     * @param {IQueryStats=} [properties] Properties to set\n     */\n    function QueryStats(properties) {\n        this.perClientName = {};\n        this.queryStatsWithContext = [];\n        this.perType = [];\n        this.perTypeStat = {};\n        this.typeStatsWithContext = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * QueryStats perClientName.\n     * @member {Object.<string,IClientNameStats>} perClientName\n     * @memberof QueryStats\n     * @instance\n     */\n    QueryStats.prototype.perClientName = $util.emptyObject;\n\n    /**\n     * QueryStats queryStatsWithContext.\n     * @member {Array.<IContextualizedQueryLatencyStats>} queryStatsWithContext\n     * @memberof QueryStats\n     * @instance\n     */\n    QueryStats.prototype.queryStatsWithContext = $util.emptyArray;\n\n    /**\n     * QueryStats perType.\n     * @member {Array.<ITypeStat>} perType\n     * @memberof QueryStats\n     * @instance\n     */\n    QueryStats.prototype.perType = $util.emptyArray;\n\n    /**\n     * QueryStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof QueryStats\n     * @instance\n     */\n    QueryStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * QueryStats typeStatsWithContext.\n     * @member {Array.<IContextualizedTypeStats>} typeStatsWithContext\n     * @memberof QueryStats\n     * @instance\n     */\n    QueryStats.prototype.typeStatsWithContext = $util.emptyArray;\n\n    /**\n     * Creates a new QueryStats instance using the specified properties.\n     * @function create\n     * @memberof QueryStats\n     * @static\n     * @param {IQueryStats=} [properties] Properties to set\n     * @returns {QueryStats} QueryStats instance\n     */\n    QueryStats.create = function create(properties) {\n        return new QueryStats(properties);\n    };\n\n    /**\n     * Encodes the specified QueryStats message. Does not implicitly {@link QueryStats.verify|verify} messages.\n     * @function encode\n     * @memberof QueryStats\n     * @static\n     * @param {IQueryStats} message QueryStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.perClientName != null && Object.hasOwnProperty.call(message, \"perClientName\"))\n            for (var keys = Object.keys(message.perClientName), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.ClientNameStats.encode(message.perClientName[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.perType != null && message.perType.length)\n            for (var i = 0; i < message.perType.length; ++i)\n                $root.TypeStat.encode(message.perType[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.queryStatsWithContext != null && message.queryStatsWithContext.length)\n            for (var i = 0; i < message.queryStatsWithContext.length; ++i)\n                $root.ContextualizedQueryLatencyStats.encode(message.queryStatsWithContext[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.typeStatsWithContext != null && message.typeStatsWithContext.length)\n            for (var i = 0; i < message.typeStatsWithContext.length; ++i)\n                $root.ContextualizedTypeStats.encode(message.typeStatsWithContext[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified QueryStats message, length delimited. Does not implicitly {@link QueryStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof QueryStats\n     * @static\n     * @param {IQueryStats} message QueryStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a QueryStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof QueryStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {QueryStats} QueryStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.QueryStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                reader.skip().pos++;\n                if (message.perClientName === $util.emptyObject)\n                    message.perClientName = {};\n                key = reader.string();\n                reader.pos++;\n                message.perClientName[key] = $root.ClientNameStats.decode(reader, reader.uint32());\n                break;\n            case 4:\n                if (!(message.queryStatsWithContext && message.queryStatsWithContext.length))\n                    message.queryStatsWithContext = [];\n                message.queryStatsWithContext.push($root.ContextualizedQueryLatencyStats.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                if (!(message.perType && message.perType.length))\n                    message.perType = [];\n                message.perType.push($root.TypeStat.decode(reader, reader.uint32()));\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            case 5:\n                if (!(message.typeStatsWithContext && message.typeStatsWithContext.length))\n                    message.typeStatsWithContext = [];\n                message.typeStatsWithContext.push($root.ContextualizedTypeStats.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a QueryStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof QueryStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {QueryStats} QueryStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a QueryStats message.\n     * @function verify\n     * @memberof QueryStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    QueryStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.perClientName != null && message.hasOwnProperty(\"perClientName\")) {\n            if (!$util.isObject(message.perClientName))\n                return \"perClientName: object expected\";\n            var key = Object.keys(message.perClientName);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.ClientNameStats.verify(message.perClientName[key[i]]);\n                if (error)\n                    return \"perClientName.\" + error;\n            }\n        }\n        if (message.queryStatsWithContext != null && message.hasOwnProperty(\"queryStatsWithContext\")) {\n            if (!Array.isArray(message.queryStatsWithContext))\n                return \"queryStatsWithContext: array expected\";\n            for (var i = 0; i < message.queryStatsWithContext.length; ++i) {\n                var error = $root.ContextualizedQueryLatencyStats.verify(message.queryStatsWithContext[i]);\n                if (error)\n                    return \"queryStatsWithContext.\" + error;\n            }\n        }\n        if (message.perType != null && message.hasOwnProperty(\"perType\")) {\n            if (!Array.isArray(message.perType))\n                return \"perType: array expected\";\n            for (var i = 0; i < message.perType.length; ++i) {\n                var error = $root.TypeStat.verify(message.perType[i]);\n                if (error)\n                    return \"perType.\" + error;\n            }\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        if (message.typeStatsWithContext != null && message.hasOwnProperty(\"typeStatsWithContext\")) {\n            if (!Array.isArray(message.typeStatsWithContext))\n                return \"typeStatsWithContext: array expected\";\n            for (var i = 0; i < message.typeStatsWithContext.length; ++i) {\n                var error = $root.ContextualizedTypeStats.verify(message.typeStatsWithContext[i]);\n                if (error)\n                    return \"typeStatsWithContext.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a QueryStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof QueryStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {QueryStats} QueryStats\n     */\n    QueryStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.QueryStats)\n            return object;\n        var message = new $root.QueryStats();\n        if (object.perClientName) {\n            if (typeof object.perClientName !== \"object\")\n                throw TypeError(\".QueryStats.perClientName: object expected\");\n            message.perClientName = {};\n            for (var keys = Object.keys(object.perClientName), i = 0; i < keys.length; ++i) {\n                if (typeof object.perClientName[keys[i]] !== \"object\")\n                    throw TypeError(\".QueryStats.perClientName: object expected\");\n                message.perClientName[keys[i]] = $root.ClientNameStats.fromObject(object.perClientName[keys[i]]);\n            }\n        }\n        if (object.queryStatsWithContext) {\n            if (!Array.isArray(object.queryStatsWithContext))\n                throw TypeError(\".QueryStats.queryStatsWithContext: array expected\");\n            message.queryStatsWithContext = [];\n            for (var i = 0; i < object.queryStatsWithContext.length; ++i) {\n                if (typeof object.queryStatsWithContext[i] !== \"object\")\n                    throw TypeError(\".QueryStats.queryStatsWithContext: object expected\");\n                message.queryStatsWithContext[i] = $root.ContextualizedQueryLatencyStats.fromObject(object.queryStatsWithContext[i]);\n            }\n        }\n        if (object.perType) {\n            if (!Array.isArray(object.perType))\n                throw TypeError(\".QueryStats.perType: array expected\");\n            message.perType = [];\n            for (var i = 0; i < object.perType.length; ++i) {\n                if (typeof object.perType[i] !== \"object\")\n                    throw TypeError(\".QueryStats.perType: object expected\");\n                message.perType[i] = $root.TypeStat.fromObject(object.perType[i]);\n            }\n        }\n        if (object.perTypeStat) {\n            if (typeof object.perTypeStat !== \"object\")\n                throw TypeError(\".QueryStats.perTypeStat: object expected\");\n            message.perTypeStat = {};\n            for (var keys = Object.keys(object.perTypeStat), i = 0; i < keys.length; ++i) {\n                if (typeof object.perTypeStat[keys[i]] !== \"object\")\n                    throw TypeError(\".QueryStats.perTypeStat: object expected\");\n                message.perTypeStat[keys[i]] = $root.TypeStat.fromObject(object.perTypeStat[keys[i]]);\n            }\n        }\n        if (object.typeStatsWithContext) {\n            if (!Array.isArray(object.typeStatsWithContext))\n                throw TypeError(\".QueryStats.typeStatsWithContext: array expected\");\n            message.typeStatsWithContext = [];\n            for (var i = 0; i < object.typeStatsWithContext.length; ++i) {\n                if (typeof object.typeStatsWithContext[i] !== \"object\")\n                    throw TypeError(\".QueryStats.typeStatsWithContext: object expected\");\n                message.typeStatsWithContext[i] = $root.ContextualizedTypeStats.fromObject(object.typeStatsWithContext[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a QueryStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof QueryStats\n     * @static\n     * @param {QueryStats} message QueryStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    QueryStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.perType = [];\n            object.queryStatsWithContext = [];\n            object.typeStatsWithContext = [];\n        }\n        if (options.objects || options.defaults) {\n            object.perClientName = {};\n            object.perTypeStat = {};\n        }\n        var keys2;\n        if (message.perClientName && (keys2 = Object.keys(message.perClientName)).length) {\n            object.perClientName = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perClientName[keys2[j]] = $root.ClientNameStats.toObject(message.perClientName[keys2[j]], options);\n        }\n        if (message.perType && message.perType.length) {\n            object.perType = [];\n            for (var j = 0; j < message.perType.length; ++j)\n                object.perType[j] = $root.TypeStat.toObject(message.perType[j], options);\n        }\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        if (message.queryStatsWithContext && message.queryStatsWithContext.length) {\n            object.queryStatsWithContext = [];\n            for (var j = 0; j < message.queryStatsWithContext.length; ++j)\n                object.queryStatsWithContext[j] = $root.ContextualizedQueryLatencyStats.toObject(message.queryStatsWithContext[j], options);\n        }\n        if (message.typeStatsWithContext && message.typeStatsWithContext.length) {\n            object.typeStatsWithContext = [];\n            for (var j = 0; j < message.typeStatsWithContext.length; ++j)\n                object.typeStatsWithContext[j] = $root.ContextualizedTypeStats.toObject(message.typeStatsWithContext[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this QueryStats to JSON.\n     * @function toJSON\n     * @memberof QueryStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    QueryStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return QueryStats;\n})();\n\n$root.TracesReport = (function() {\n\n    /**\n     * Properties of a TracesReport.\n     * @exports ITracesReport\n     * @interface ITracesReport\n     * @property {IReportHeader|null} [header] TracesReport header\n     * @property {Array.<ITrace>|null} [trace] TracesReport trace\n     */\n\n    /**\n     * Constructs a new TracesReport.\n     * @exports TracesReport\n     * @classdesc Represents a TracesReport.\n     * @implements ITracesReport\n     * @constructor\n     * @param {ITracesReport=} [properties] Properties to set\n     */\n    function TracesReport(properties) {\n        this.trace = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TracesReport header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof TracesReport\n     * @instance\n     */\n    TracesReport.prototype.header = null;\n\n    /**\n     * TracesReport trace.\n     * @member {Array.<ITrace>} trace\n     * @memberof TracesReport\n     * @instance\n     */\n    TracesReport.prototype.trace = $util.emptyArray;\n\n    /**\n     * Creates a new TracesReport instance using the specified properties.\n     * @function create\n     * @memberof TracesReport\n     * @static\n     * @param {ITracesReport=} [properties] Properties to set\n     * @returns {TracesReport} TracesReport instance\n     */\n    TracesReport.create = function create(properties) {\n        return new TracesReport(properties);\n    };\n\n    /**\n     * Encodes the specified TracesReport message. Does not implicitly {@link TracesReport.verify|verify} messages.\n     * @function encode\n     * @memberof TracesReport\n     * @static\n     * @param {ITracesReport} message TracesReport message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesReport.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.trace != null && message.trace.length)\n            for (var i = 0; i < message.trace.length; ++i)\n                $root.Trace.encode(message.trace[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TracesReport message, length delimited. Does not implicitly {@link TracesReport.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TracesReport\n     * @static\n     * @param {ITracesReport} message TracesReport message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesReport.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TracesReport message from the specified reader or buffer.\n     * @function decode\n     * @memberof TracesReport\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TracesReport} TracesReport\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesReport.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TracesReport();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 2:\n                if (!(message.trace && message.trace.length))\n                    message.trace = [];\n                message.trace.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TracesReport message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TracesReport\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TracesReport} TracesReport\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesReport.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TracesReport message.\n     * @function verify\n     * @memberof TracesReport\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TracesReport.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            var error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n            if (!Array.isArray(message.trace))\n                return \"trace: array expected\";\n            for (var i = 0; i < message.trace.length; ++i) {\n                var error = $root.Trace.verify(message.trace[i]);\n                if (error)\n                    return \"trace.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a TracesReport message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TracesReport\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TracesReport} TracesReport\n     */\n    TracesReport.fromObject = function fromObject(object) {\n        if (object instanceof $root.TracesReport)\n            return object;\n        var message = new $root.TracesReport();\n        if (object.header != null) {\n            if (typeof object.header !== \"object\")\n                throw TypeError(\".TracesReport.header: object expected\");\n            message.header = $root.ReportHeader.fromObject(object.header);\n        }\n        if (object.trace) {\n            if (!Array.isArray(object.trace))\n                throw TypeError(\".TracesReport.trace: array expected\");\n            message.trace = [];\n            for (var i = 0; i < object.trace.length; ++i) {\n                if (typeof object.trace[i] !== \"object\")\n                    throw TypeError(\".TracesReport.trace: object expected\");\n                message.trace[i] = $root.Trace.fromObject(object.trace[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TracesReport message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TracesReport\n     * @static\n     * @param {TracesReport} message TracesReport\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TracesReport.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.trace = [];\n        if (options.defaults)\n            object.header = null;\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        if (message.trace && message.trace.length) {\n            object.trace = [];\n            for (var j = 0; j < message.trace.length; ++j)\n                object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TracesReport to JSON.\n     * @function toJSON\n     * @memberof TracesReport\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TracesReport.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TracesReport;\n})();\n\n$root.Field = (function() {\n\n    /**\n     * Properties of a Field.\n     * @exports IField\n     * @interface IField\n     * @property {string|null} [name] Field name\n     * @property {string|null} [returnType] Field returnType\n     */\n\n    /**\n     * Constructs a new Field.\n     * @exports Field\n     * @classdesc Represents a Field.\n     * @implements IField\n     * @constructor\n     * @param {IField=} [properties] Properties to set\n     */\n    function Field(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Field name.\n     * @member {string} name\n     * @memberof Field\n     * @instance\n     */\n    Field.prototype.name = \"\";\n\n    /**\n     * Field returnType.\n     * @member {string} returnType\n     * @memberof Field\n     * @instance\n     */\n    Field.prototype.returnType = \"\";\n\n    /**\n     * Creates a new Field instance using the specified properties.\n     * @function create\n     * @memberof Field\n     * @static\n     * @param {IField=} [properties] Properties to set\n     * @returns {Field} Field instance\n     */\n    Field.create = function create(properties) {\n        return new Field(properties);\n    };\n\n    /**\n     * Encodes the specified Field message. Does not implicitly {@link Field.verify|verify} messages.\n     * @function encode\n     * @memberof Field\n     * @static\n     * @param {IField} message Field message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Field.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.returnType);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Field message, length delimited. Does not implicitly {@link Field.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Field\n     * @static\n     * @param {IField} message Field message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Field.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Field message from the specified reader or buffer.\n     * @function decode\n     * @memberof Field\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Field} Field\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Field.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Field();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.name = reader.string();\n                break;\n            case 3:\n                message.returnType = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Field message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Field\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Field} Field\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Field.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Field message.\n     * @function verify\n     * @memberof Field\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Field.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Field message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Field\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Field} Field\n     */\n    Field.fromObject = function fromObject(object) {\n        if (object instanceof $root.Field)\n            return object;\n        var message = new $root.Field();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.returnType != null)\n            message.returnType = String(object.returnType);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Field message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Field\n     * @static\n     * @param {Field} message Field\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Field.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.returnType = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        return object;\n    };\n\n    /**\n     * Converts this Field to JSON.\n     * @function toJSON\n     * @memberof Field\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Field.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Field;\n})();\n\n$root.Type = (function() {\n\n    /**\n     * Properties of a Type.\n     * @exports IType\n     * @interface IType\n     * @property {string|null} [name] Type name\n     * @property {Array.<IField>|null} [field] Type field\n     */\n\n    /**\n     * Constructs a new Type.\n     * @exports Type\n     * @classdesc Represents a Type.\n     * @implements IType\n     * @constructor\n     * @param {IType=} [properties] Properties to set\n     */\n    function Type(properties) {\n        this.field = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Type name.\n     * @member {string} name\n     * @memberof Type\n     * @instance\n     */\n    Type.prototype.name = \"\";\n\n    /**\n     * Type field.\n     * @member {Array.<IField>} field\n     * @memberof Type\n     * @instance\n     */\n    Type.prototype.field = $util.emptyArray;\n\n    /**\n     * Creates a new Type instance using the specified properties.\n     * @function create\n     * @memberof Type\n     * @static\n     * @param {IType=} [properties] Properties to set\n     * @returns {Type} Type instance\n     */\n    Type.create = function create(properties) {\n        return new Type(properties);\n    };\n\n    /**\n     * Encodes the specified Type message. Does not implicitly {@link Type.verify|verify} messages.\n     * @function encode\n     * @memberof Type\n     * @static\n     * @param {IType} message Type message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Type.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.field != null && message.field.length)\n            for (var i = 0; i < message.field.length; ++i)\n                $root.Field.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Type message, length delimited. Does not implicitly {@link Type.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Type\n     * @static\n     * @param {IType} message Type message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Type.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Type message from the specified reader or buffer.\n     * @function decode\n     * @memberof Type\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Type} Type\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Type.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Type();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                if (!(message.field && message.field.length))\n                    message.field = [];\n                message.field.push($root.Field.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Type message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Type\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Type} Type\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Type.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Type message.\n     * @function verify\n     * @memberof Type\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Type.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.field != null && message.hasOwnProperty(\"field\")) {\n            if (!Array.isArray(message.field))\n                return \"field: array expected\";\n            for (var i = 0; i < message.field.length; ++i) {\n                var error = $root.Field.verify(message.field[i]);\n                if (error)\n                    return \"field.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Type message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Type\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Type} Type\n     */\n    Type.fromObject = function fromObject(object) {\n        if (object instanceof $root.Type)\n            return object;\n        var message = new $root.Type();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.field) {\n            if (!Array.isArray(object.field))\n                throw TypeError(\".Type.field: array expected\");\n            message.field = [];\n            for (var i = 0; i < object.field.length; ++i) {\n                if (typeof object.field[i] !== \"object\")\n                    throw TypeError(\".Type.field: object expected\");\n                message.field[i] = $root.Field.fromObject(object.field[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Type message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Type\n     * @static\n     * @param {Type} message Type\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Type.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.field = [];\n        if (options.defaults)\n            object.name = \"\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.field && message.field.length) {\n            object.field = [];\n            for (var j = 0; j < message.field.length; ++j)\n                object.field[j] = $root.Field.toObject(message.field[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Type to JSON.\n     * @function toJSON\n     * @memberof Type\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Type.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Type;\n})();\n\n$root.MemStats = (function() {\n\n    /**\n     * Properties of a MemStats.\n     * @exports IMemStats\n     * @interface IMemStats\n     * @property {number|null} [totalBytes] MemStats totalBytes\n     * @property {number|null} [stackBytes] MemStats stackBytes\n     * @property {number|null} [heapBytes] MemStats heapBytes\n     * @property {number|null} [heapReleasedBytes] MemStats heapReleasedBytes\n     * @property {number|null} [gcOverheadBytes] MemStats gcOverheadBytes\n     * @property {number|null} [stackUsedBytes] MemStats stackUsedBytes\n     * @property {number|null} [heapAllocatedBytes] MemStats heapAllocatedBytes\n     * @property {number|null} [heapAllocatedObjects] MemStats heapAllocatedObjects\n     * @property {number|null} [heapAllocatedBytesDelta] MemStats heapAllocatedBytesDelta\n     * @property {number|null} [heapAllocatedObjectsDelta] MemStats heapAllocatedObjectsDelta\n     * @property {number|null} [heapFreedObjectsDelta] MemStats heapFreedObjectsDelta\n     * @property {number|null} [gcStwNsDelta] MemStats gcStwNsDelta\n     * @property {number|null} [gcCountDelta] MemStats gcCountDelta\n     */\n\n    /**\n     * Constructs a new MemStats.\n     * @exports MemStats\n     * @classdesc Represents a MemStats.\n     * @implements IMemStats\n     * @constructor\n     * @param {IMemStats=} [properties] Properties to set\n     */\n    function MemStats(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * MemStats totalBytes.\n     * @member {number} totalBytes\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.totalBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats stackBytes.\n     * @member {number} stackBytes\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.stackBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats heapBytes.\n     * @member {number} heapBytes\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.heapBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats heapReleasedBytes.\n     * @member {number} heapReleasedBytes\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.heapReleasedBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats gcOverheadBytes.\n     * @member {number} gcOverheadBytes\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.gcOverheadBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats stackUsedBytes.\n     * @member {number} stackUsedBytes\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.stackUsedBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats heapAllocatedBytes.\n     * @member {number} heapAllocatedBytes\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.heapAllocatedBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats heapAllocatedObjects.\n     * @member {number} heapAllocatedObjects\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.heapAllocatedObjects = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats heapAllocatedBytesDelta.\n     * @member {number} heapAllocatedBytesDelta\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.heapAllocatedBytesDelta = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats heapAllocatedObjectsDelta.\n     * @member {number} heapAllocatedObjectsDelta\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.heapAllocatedObjectsDelta = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats heapFreedObjectsDelta.\n     * @member {number} heapFreedObjectsDelta\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.heapFreedObjectsDelta = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats gcStwNsDelta.\n     * @member {number} gcStwNsDelta\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.gcStwNsDelta = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * MemStats gcCountDelta.\n     * @member {number} gcCountDelta\n     * @memberof MemStats\n     * @instance\n     */\n    MemStats.prototype.gcCountDelta = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new MemStats instance using the specified properties.\n     * @function create\n     * @memberof MemStats\n     * @static\n     * @param {IMemStats=} [properties] Properties to set\n     * @returns {MemStats} MemStats instance\n     */\n    MemStats.create = function create(properties) {\n        return new MemStats(properties);\n    };\n\n    /**\n     * Encodes the specified MemStats message. Does not implicitly {@link MemStats.verify|verify} messages.\n     * @function encode\n     * @memberof MemStats\n     * @static\n     * @param {IMemStats} message MemStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MemStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.totalBytes != null && Object.hasOwnProperty.call(message, \"totalBytes\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.totalBytes);\n        if (message.stackBytes != null && Object.hasOwnProperty.call(message, \"stackBytes\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.stackBytes);\n        if (message.heapBytes != null && Object.hasOwnProperty.call(message, \"heapBytes\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.heapBytes);\n        if (message.gcOverheadBytes != null && Object.hasOwnProperty.call(message, \"gcOverheadBytes\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.gcOverheadBytes);\n        if (message.stackUsedBytes != null && Object.hasOwnProperty.call(message, \"stackUsedBytes\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.stackUsedBytes);\n        if (message.heapAllocatedBytes != null && Object.hasOwnProperty.call(message, \"heapAllocatedBytes\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.heapAllocatedBytes);\n        if (message.heapAllocatedObjects != null && Object.hasOwnProperty.call(message, \"heapAllocatedObjects\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.heapAllocatedObjects);\n        if (message.heapAllocatedBytesDelta != null && Object.hasOwnProperty.call(message, \"heapAllocatedBytesDelta\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.heapAllocatedBytesDelta);\n        if (message.heapAllocatedObjectsDelta != null && Object.hasOwnProperty.call(message, \"heapAllocatedObjectsDelta\"))\n            writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.heapAllocatedObjectsDelta);\n        if (message.heapFreedObjectsDelta != null && Object.hasOwnProperty.call(message, \"heapFreedObjectsDelta\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.heapFreedObjectsDelta);\n        if (message.gcStwNsDelta != null && Object.hasOwnProperty.call(message, \"gcStwNsDelta\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.gcStwNsDelta);\n        if (message.gcCountDelta != null && Object.hasOwnProperty.call(message, \"gcCountDelta\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.gcCountDelta);\n        if (message.heapReleasedBytes != null && Object.hasOwnProperty.call(message, \"heapReleasedBytes\"))\n            writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.heapReleasedBytes);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified MemStats message, length delimited. Does not implicitly {@link MemStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof MemStats\n     * @static\n     * @param {IMemStats} message MemStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MemStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a MemStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof MemStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {MemStats} MemStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MemStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MemStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.totalBytes = reader.uint64();\n                break;\n            case 2:\n                message.stackBytes = reader.uint64();\n                break;\n            case 3:\n                message.heapBytes = reader.uint64();\n                break;\n            case 13:\n                message.heapReleasedBytes = reader.uint64();\n                break;\n            case 4:\n                message.gcOverheadBytes = reader.uint64();\n                break;\n            case 5:\n                message.stackUsedBytes = reader.uint64();\n                break;\n            case 6:\n                message.heapAllocatedBytes = reader.uint64();\n                break;\n            case 7:\n                message.heapAllocatedObjects = reader.uint64();\n                break;\n            case 8:\n                message.heapAllocatedBytesDelta = reader.uint64();\n                break;\n            case 9:\n                message.heapAllocatedObjectsDelta = reader.uint64();\n                break;\n            case 10:\n                message.heapFreedObjectsDelta = reader.uint64();\n                break;\n            case 11:\n                message.gcStwNsDelta = reader.uint64();\n                break;\n            case 12:\n                message.gcCountDelta = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a MemStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof MemStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {MemStats} MemStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MemStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a MemStats message.\n     * @function verify\n     * @memberof MemStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    MemStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.totalBytes != null && message.hasOwnProperty(\"totalBytes\"))\n            if (!$util.isInteger(message.totalBytes) && !(message.totalBytes && $util.isInteger(message.totalBytes.low) && $util.isInteger(message.totalBytes.high)))\n                return \"totalBytes: integer|Long expected\";\n        if (message.stackBytes != null && message.hasOwnProperty(\"stackBytes\"))\n            if (!$util.isInteger(message.stackBytes) && !(message.stackBytes && $util.isInteger(message.stackBytes.low) && $util.isInteger(message.stackBytes.high)))\n                return \"stackBytes: integer|Long expected\";\n        if (message.heapBytes != null && message.hasOwnProperty(\"heapBytes\"))\n            if (!$util.isInteger(message.heapBytes) && !(message.heapBytes && $util.isInteger(message.heapBytes.low) && $util.isInteger(message.heapBytes.high)))\n                return \"heapBytes: integer|Long expected\";\n        if (message.heapReleasedBytes != null && message.hasOwnProperty(\"heapReleasedBytes\"))\n            if (!$util.isInteger(message.heapReleasedBytes) && !(message.heapReleasedBytes && $util.isInteger(message.heapReleasedBytes.low) && $util.isInteger(message.heapReleasedBytes.high)))\n                return \"heapReleasedBytes: integer|Long expected\";\n        if (message.gcOverheadBytes != null && message.hasOwnProperty(\"gcOverheadBytes\"))\n            if (!$util.isInteger(message.gcOverheadBytes) && !(message.gcOverheadBytes && $util.isInteger(message.gcOverheadBytes.low) && $util.isInteger(message.gcOverheadBytes.high)))\n                return \"gcOverheadBytes: integer|Long expected\";\n        if (message.stackUsedBytes != null && message.hasOwnProperty(\"stackUsedBytes\"))\n            if (!$util.isInteger(message.stackUsedBytes) && !(message.stackUsedBytes && $util.isInteger(message.stackUsedBytes.low) && $util.isInteger(message.stackUsedBytes.high)))\n                return \"stackUsedBytes: integer|Long expected\";\n        if (message.heapAllocatedBytes != null && message.hasOwnProperty(\"heapAllocatedBytes\"))\n            if (!$util.isInteger(message.heapAllocatedBytes) && !(message.heapAllocatedBytes && $util.isInteger(message.heapAllocatedBytes.low) && $util.isInteger(message.heapAllocatedBytes.high)))\n                return \"heapAllocatedBytes: integer|Long expected\";\n        if (message.heapAllocatedObjects != null && message.hasOwnProperty(\"heapAllocatedObjects\"))\n            if (!$util.isInteger(message.heapAllocatedObjects) && !(message.heapAllocatedObjects && $util.isInteger(message.heapAllocatedObjects.low) && $util.isInteger(message.heapAllocatedObjects.high)))\n                return \"heapAllocatedObjects: integer|Long expected\";\n        if (message.heapAllocatedBytesDelta != null && message.hasOwnProperty(\"heapAllocatedBytesDelta\"))\n            if (!$util.isInteger(message.heapAllocatedBytesDelta) && !(message.heapAllocatedBytesDelta && $util.isInteger(message.heapAllocatedBytesDelta.low) && $util.isInteger(message.heapAllocatedBytesDelta.high)))\n                return \"heapAllocatedBytesDelta: integer|Long expected\";\n        if (message.heapAllocatedObjectsDelta != null && message.hasOwnProperty(\"heapAllocatedObjectsDelta\"))\n            if (!$util.isInteger(message.heapAllocatedObjectsDelta) && !(message.heapAllocatedObjectsDelta && $util.isInteger(message.heapAllocatedObjectsDelta.low) && $util.isInteger(message.heapAllocatedObjectsDelta.high)))\n                return \"heapAllocatedObjectsDelta: integer|Long expected\";\n        if (message.heapFreedObjectsDelta != null && message.hasOwnProperty(\"heapFreedObjectsDelta\"))\n            if (!$util.isInteger(message.heapFreedObjectsDelta) && !(message.heapFreedObjectsDelta && $util.isInteger(message.heapFreedObjectsDelta.low) && $util.isInteger(message.heapFreedObjectsDelta.high)))\n                return \"heapFreedObjectsDelta: integer|Long expected\";\n        if (message.gcStwNsDelta != null && message.hasOwnProperty(\"gcStwNsDelta\"))\n            if (!$util.isInteger(message.gcStwNsDelta) && !(message.gcStwNsDelta && $util.isInteger(message.gcStwNsDelta.low) && $util.isInteger(message.gcStwNsDelta.high)))\n                return \"gcStwNsDelta: integer|Long expected\";\n        if (message.gcCountDelta != null && message.hasOwnProperty(\"gcCountDelta\"))\n            if (!$util.isInteger(message.gcCountDelta) && !(message.gcCountDelta && $util.isInteger(message.gcCountDelta.low) && $util.isInteger(message.gcCountDelta.high)))\n                return \"gcCountDelta: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a MemStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof MemStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {MemStats} MemStats\n     */\n    MemStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.MemStats)\n            return object;\n        var message = new $root.MemStats();\n        if (object.totalBytes != null)\n            if ($util.Long)\n                (message.totalBytes = $util.Long.fromValue(object.totalBytes)).unsigned = true;\n            else if (typeof object.totalBytes === \"string\")\n                message.totalBytes = parseInt(object.totalBytes, 10);\n            else if (typeof object.totalBytes === \"number\")\n                message.totalBytes = object.totalBytes;\n            else if (typeof object.totalBytes === \"object\")\n                message.totalBytes = new $util.LongBits(object.totalBytes.low >>> 0, object.totalBytes.high >>> 0).toNumber(true);\n        if (object.stackBytes != null)\n            if ($util.Long)\n                (message.stackBytes = $util.Long.fromValue(object.stackBytes)).unsigned = true;\n            else if (typeof object.stackBytes === \"string\")\n                message.stackBytes = parseInt(object.stackBytes, 10);\n            else if (typeof object.stackBytes === \"number\")\n                message.stackBytes = object.stackBytes;\n            else if (typeof object.stackBytes === \"object\")\n                message.stackBytes = new $util.LongBits(object.stackBytes.low >>> 0, object.stackBytes.high >>> 0).toNumber(true);\n        if (object.heapBytes != null)\n            if ($util.Long)\n                (message.heapBytes = $util.Long.fromValue(object.heapBytes)).unsigned = true;\n            else if (typeof object.heapBytes === \"string\")\n                message.heapBytes = parseInt(object.heapBytes, 10);\n            else if (typeof object.heapBytes === \"number\")\n                message.heapBytes = object.heapBytes;\n            else if (typeof object.heapBytes === \"object\")\n                message.heapBytes = new $util.LongBits(object.heapBytes.low >>> 0, object.heapBytes.high >>> 0).toNumber(true);\n        if (object.heapReleasedBytes != null)\n            if ($util.Long)\n                (message.heapReleasedBytes = $util.Long.fromValue(object.heapReleasedBytes)).unsigned = true;\n            else if (typeof object.heapReleasedBytes === \"string\")\n                message.heapReleasedBytes = parseInt(object.heapReleasedBytes, 10);\n            else if (typeof object.heapReleasedBytes === \"number\")\n                message.heapReleasedBytes = object.heapReleasedBytes;\n            else if (typeof object.heapReleasedBytes === \"object\")\n                message.heapReleasedBytes = new $util.LongBits(object.heapReleasedBytes.low >>> 0, object.heapReleasedBytes.high >>> 0).toNumber(true);\n        if (object.gcOverheadBytes != null)\n            if ($util.Long)\n                (message.gcOverheadBytes = $util.Long.fromValue(object.gcOverheadBytes)).unsigned = true;\n            else if (typeof object.gcOverheadBytes === \"string\")\n                message.gcOverheadBytes = parseInt(object.gcOverheadBytes, 10);\n            else if (typeof object.gcOverheadBytes === \"number\")\n                message.gcOverheadBytes = object.gcOverheadBytes;\n            else if (typeof object.gcOverheadBytes === \"object\")\n                message.gcOverheadBytes = new $util.LongBits(object.gcOverheadBytes.low >>> 0, object.gcOverheadBytes.high >>> 0).toNumber(true);\n        if (object.stackUsedBytes != null)\n            if ($util.Long)\n                (message.stackUsedBytes = $util.Long.fromValue(object.stackUsedBytes)).unsigned = true;\n            else if (typeof object.stackUsedBytes === \"string\")\n                message.stackUsedBytes = parseInt(object.stackUsedBytes, 10);\n            else if (typeof object.stackUsedBytes === \"number\")\n                message.stackUsedBytes = object.stackUsedBytes;\n            else if (typeof object.stackUsedBytes === \"object\")\n                message.stackUsedBytes = new $util.LongBits(object.stackUsedBytes.low >>> 0, object.stackUsedBytes.high >>> 0).toNumber(true);\n        if (object.heapAllocatedBytes != null)\n            if ($util.Long)\n                (message.heapAllocatedBytes = $util.Long.fromValue(object.heapAllocatedBytes)).unsigned = true;\n            else if (typeof object.heapAllocatedBytes === \"string\")\n                message.heapAllocatedBytes = parseInt(object.heapAllocatedBytes, 10);\n            else if (typeof object.heapAllocatedBytes === \"number\")\n                message.heapAllocatedBytes = object.heapAllocatedBytes;\n            else if (typeof object.heapAllocatedBytes === \"object\")\n                message.heapAllocatedBytes = new $util.LongBits(object.heapAllocatedBytes.low >>> 0, object.heapAllocatedBytes.high >>> 0).toNumber(true);\n        if (object.heapAllocatedObjects != null)\n            if ($util.Long)\n                (message.heapAllocatedObjects = $util.Long.fromValue(object.heapAllocatedObjects)).unsigned = true;\n            else if (typeof object.heapAllocatedObjects === \"string\")\n                message.heapAllocatedObjects = parseInt(object.heapAllocatedObjects, 10);\n            else if (typeof object.heapAllocatedObjects === \"number\")\n                message.heapAllocatedObjects = object.heapAllocatedObjects;\n            else if (typeof object.heapAllocatedObjects === \"object\")\n                message.heapAllocatedObjects = new $util.LongBits(object.heapAllocatedObjects.low >>> 0, object.heapAllocatedObjects.high >>> 0).toNumber(true);\n        if (object.heapAllocatedBytesDelta != null)\n            if ($util.Long)\n                (message.heapAllocatedBytesDelta = $util.Long.fromValue(object.heapAllocatedBytesDelta)).unsigned = true;\n            else if (typeof object.heapAllocatedBytesDelta === \"string\")\n                message.heapAllocatedBytesDelta = parseInt(object.heapAllocatedBytesDelta, 10);\n            else if (typeof object.heapAllocatedBytesDelta === \"number\")\n                message.heapAllocatedBytesDelta = object.heapAllocatedBytesDelta;\n            else if (typeof object.heapAllocatedBytesDelta === \"object\")\n                message.heapAllocatedBytesDelta = new $util.LongBits(object.heapAllocatedBytesDelta.low >>> 0, object.heapAllocatedBytesDelta.high >>> 0).toNumber(true);\n        if (object.heapAllocatedObjectsDelta != null)\n            if ($util.Long)\n                (message.heapAllocatedObjectsDelta = $util.Long.fromValue(object.heapAllocatedObjectsDelta)).unsigned = true;\n            else if (typeof object.heapAllocatedObjectsDelta === \"string\")\n                message.heapAllocatedObjectsDelta = parseInt(object.heapAllocatedObjectsDelta, 10);\n            else if (typeof object.heapAllocatedObjectsDelta === \"number\")\n                message.heapAllocatedObjectsDelta = object.heapAllocatedObjectsDelta;\n            else if (typeof object.heapAllocatedObjectsDelta === \"object\")\n                message.heapAllocatedObjectsDelta = new $util.LongBits(object.heapAllocatedObjectsDelta.low >>> 0, object.heapAllocatedObjectsDelta.high >>> 0).toNumber(true);\n        if (object.heapFreedObjectsDelta != null)\n            if ($util.Long)\n                (message.heapFreedObjectsDelta = $util.Long.fromValue(object.heapFreedObjectsDelta)).unsigned = true;\n            else if (typeof object.heapFreedObjectsDelta === \"string\")\n                message.heapFreedObjectsDelta = parseInt(object.heapFreedObjectsDelta, 10);\n            else if (typeof object.heapFreedObjectsDelta === \"number\")\n                message.heapFreedObjectsDelta = object.heapFreedObjectsDelta;\n            else if (typeof object.heapFreedObjectsDelta === \"object\")\n                message.heapFreedObjectsDelta = new $util.LongBits(object.heapFreedObjectsDelta.low >>> 0, object.heapFreedObjectsDelta.high >>> 0).toNumber(true);\n        if (object.gcStwNsDelta != null)\n            if ($util.Long)\n                (message.gcStwNsDelta = $util.Long.fromValue(object.gcStwNsDelta)).unsigned = true;\n            else if (typeof object.gcStwNsDelta === \"string\")\n                message.gcStwNsDelta = parseInt(object.gcStwNsDelta, 10);\n            else if (typeof object.gcStwNsDelta === \"number\")\n                message.gcStwNsDelta = object.gcStwNsDelta;\n            else if (typeof object.gcStwNsDelta === \"object\")\n                message.gcStwNsDelta = new $util.LongBits(object.gcStwNsDelta.low >>> 0, object.gcStwNsDelta.high >>> 0).toNumber(true);\n        if (object.gcCountDelta != null)\n            if ($util.Long)\n                (message.gcCountDelta = $util.Long.fromValue(object.gcCountDelta)).unsigned = true;\n            else if (typeof object.gcCountDelta === \"string\")\n                message.gcCountDelta = parseInt(object.gcCountDelta, 10);\n            else if (typeof object.gcCountDelta === \"number\")\n                message.gcCountDelta = object.gcCountDelta;\n            else if (typeof object.gcCountDelta === \"object\")\n                message.gcCountDelta = new $util.LongBits(object.gcCountDelta.low >>> 0, object.gcCountDelta.high >>> 0).toNumber(true);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a MemStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof MemStats\n     * @static\n     * @param {MemStats} message MemStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    MemStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.totalBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.totalBytes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.stackBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.stackBytes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.heapBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.heapBytes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.gcOverheadBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.gcOverheadBytes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.stackUsedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.stackUsedBytes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.heapAllocatedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.heapAllocatedBytes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.heapAllocatedObjects = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.heapAllocatedObjects = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.heapAllocatedBytesDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.heapAllocatedBytesDelta = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.heapAllocatedObjectsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.heapAllocatedObjectsDelta = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.heapFreedObjectsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.heapFreedObjectsDelta = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.gcStwNsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.gcStwNsDelta = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.gcCountDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.gcCountDelta = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.heapReleasedBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.heapReleasedBytes = options.longs === String ? \"0\" : 0;\n        }\n        if (message.totalBytes != null && message.hasOwnProperty(\"totalBytes\"))\n            if (typeof message.totalBytes === \"number\")\n                object.totalBytes = options.longs === String ? String(message.totalBytes) : message.totalBytes;\n            else\n                object.totalBytes = options.longs === String ? $util.Long.prototype.toString.call(message.totalBytes) : options.longs === Number ? new $util.LongBits(message.totalBytes.low >>> 0, message.totalBytes.high >>> 0).toNumber(true) : message.totalBytes;\n        if (message.stackBytes != null && message.hasOwnProperty(\"stackBytes\"))\n            if (typeof message.stackBytes === \"number\")\n                object.stackBytes = options.longs === String ? String(message.stackBytes) : message.stackBytes;\n            else\n                object.stackBytes = options.longs === String ? $util.Long.prototype.toString.call(message.stackBytes) : options.longs === Number ? new $util.LongBits(message.stackBytes.low >>> 0, message.stackBytes.high >>> 0).toNumber(true) : message.stackBytes;\n        if (message.heapBytes != null && message.hasOwnProperty(\"heapBytes\"))\n            if (typeof message.heapBytes === \"number\")\n                object.heapBytes = options.longs === String ? String(message.heapBytes) : message.heapBytes;\n            else\n                object.heapBytes = options.longs === String ? $util.Long.prototype.toString.call(message.heapBytes) : options.longs === Number ? new $util.LongBits(message.heapBytes.low >>> 0, message.heapBytes.high >>> 0).toNumber(true) : message.heapBytes;\n        if (message.gcOverheadBytes != null && message.hasOwnProperty(\"gcOverheadBytes\"))\n            if (typeof message.gcOverheadBytes === \"number\")\n                object.gcOverheadBytes = options.longs === String ? String(message.gcOverheadBytes) : message.gcOverheadBytes;\n            else\n                object.gcOverheadBytes = options.longs === String ? $util.Long.prototype.toString.call(message.gcOverheadBytes) : options.longs === Number ? new $util.LongBits(message.gcOverheadBytes.low >>> 0, message.gcOverheadBytes.high >>> 0).toNumber(true) : message.gcOverheadBytes;\n        if (message.stackUsedBytes != null && message.hasOwnProperty(\"stackUsedBytes\"))\n            if (typeof message.stackUsedBytes === \"number\")\n                object.stackUsedBytes = options.longs === String ? String(message.stackUsedBytes) : message.stackUsedBytes;\n            else\n                object.stackUsedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.stackUsedBytes) : options.longs === Number ? new $util.LongBits(message.stackUsedBytes.low >>> 0, message.stackUsedBytes.high >>> 0).toNumber(true) : message.stackUsedBytes;\n        if (message.heapAllocatedBytes != null && message.hasOwnProperty(\"heapAllocatedBytes\"))\n            if (typeof message.heapAllocatedBytes === \"number\")\n                object.heapAllocatedBytes = options.longs === String ? String(message.heapAllocatedBytes) : message.heapAllocatedBytes;\n            else\n                object.heapAllocatedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.heapAllocatedBytes) : options.longs === Number ? new $util.LongBits(message.heapAllocatedBytes.low >>> 0, message.heapAllocatedBytes.high >>> 0).toNumber(true) : message.heapAllocatedBytes;\n        if (message.heapAllocatedObjects != null && message.hasOwnProperty(\"heapAllocatedObjects\"))\n            if (typeof message.heapAllocatedObjects === \"number\")\n                object.heapAllocatedObjects = options.longs === String ? String(message.heapAllocatedObjects) : message.heapAllocatedObjects;\n            else\n                object.heapAllocatedObjects = options.longs === String ? $util.Long.prototype.toString.call(message.heapAllocatedObjects) : options.longs === Number ? new $util.LongBits(message.heapAllocatedObjects.low >>> 0, message.heapAllocatedObjects.high >>> 0).toNumber(true) : message.heapAllocatedObjects;\n        if (message.heapAllocatedBytesDelta != null && message.hasOwnProperty(\"heapAllocatedBytesDelta\"))\n            if (typeof message.heapAllocatedBytesDelta === \"number\")\n                object.heapAllocatedBytesDelta = options.longs === String ? String(message.heapAllocatedBytesDelta) : message.heapAllocatedBytesDelta;\n            else\n                object.heapAllocatedBytesDelta = options.longs === String ? $util.Long.prototype.toString.call(message.heapAllocatedBytesDelta) : options.longs === Number ? new $util.LongBits(message.heapAllocatedBytesDelta.low >>> 0, message.heapAllocatedBytesDelta.high >>> 0).toNumber(true) : message.heapAllocatedBytesDelta;\n        if (message.heapAllocatedObjectsDelta != null && message.hasOwnProperty(\"heapAllocatedObjectsDelta\"))\n            if (typeof message.heapAllocatedObjectsDelta === \"number\")\n                object.heapAllocatedObjectsDelta = options.longs === String ? String(message.heapAllocatedObjectsDelta) : message.heapAllocatedObjectsDelta;\n            else\n                object.heapAllocatedObjectsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.heapAllocatedObjectsDelta) : options.longs === Number ? new $util.LongBits(message.heapAllocatedObjectsDelta.low >>> 0, message.heapAllocatedObjectsDelta.high >>> 0).toNumber(true) : message.heapAllocatedObjectsDelta;\n        if (message.heapFreedObjectsDelta != null && message.hasOwnProperty(\"heapFreedObjectsDelta\"))\n            if (typeof message.heapFreedObjectsDelta === \"number\")\n                object.heapFreedObjectsDelta = options.longs === String ? String(message.heapFreedObjectsDelta) : message.heapFreedObjectsDelta;\n            else\n                object.heapFreedObjectsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.heapFreedObjectsDelta) : options.longs === Number ? new $util.LongBits(message.heapFreedObjectsDelta.low >>> 0, message.heapFreedObjectsDelta.high >>> 0).toNumber(true) : message.heapFreedObjectsDelta;\n        if (message.gcStwNsDelta != null && message.hasOwnProperty(\"gcStwNsDelta\"))\n            if (typeof message.gcStwNsDelta === \"number\")\n                object.gcStwNsDelta = options.longs === String ? String(message.gcStwNsDelta) : message.gcStwNsDelta;\n            else\n                object.gcStwNsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.gcStwNsDelta) : options.longs === Number ? new $util.LongBits(message.gcStwNsDelta.low >>> 0, message.gcStwNsDelta.high >>> 0).toNumber(true) : message.gcStwNsDelta;\n        if (message.gcCountDelta != null && message.hasOwnProperty(\"gcCountDelta\"))\n            if (typeof message.gcCountDelta === \"number\")\n                object.gcCountDelta = options.longs === String ? String(message.gcCountDelta) : message.gcCountDelta;\n            else\n                object.gcCountDelta = options.longs === String ? $util.Long.prototype.toString.call(message.gcCountDelta) : options.longs === Number ? new $util.LongBits(message.gcCountDelta.low >>> 0, message.gcCountDelta.high >>> 0).toNumber(true) : message.gcCountDelta;\n        if (message.heapReleasedBytes != null && message.hasOwnProperty(\"heapReleasedBytes\"))\n            if (typeof message.heapReleasedBytes === \"number\")\n                object.heapReleasedBytes = options.longs === String ? String(message.heapReleasedBytes) : message.heapReleasedBytes;\n            else\n                object.heapReleasedBytes = options.longs === String ? $util.Long.prototype.toString.call(message.heapReleasedBytes) : options.longs === Number ? new $util.LongBits(message.heapReleasedBytes.low >>> 0, message.heapReleasedBytes.high >>> 0).toNumber(true) : message.heapReleasedBytes;\n        return object;\n    };\n\n    /**\n     * Converts this MemStats to JSON.\n     * @function toJSON\n     * @memberof MemStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    MemStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return MemStats;\n})();\n\n$root.TimeStats = (function() {\n\n    /**\n     * Properties of a TimeStats.\n     * @exports ITimeStats\n     * @interface ITimeStats\n     * @property {number|null} [uptimeNs] TimeStats uptimeNs\n     * @property {number|null} [realNsDelta] TimeStats realNsDelta\n     * @property {number|null} [userNsDelta] TimeStats userNsDelta\n     * @property {number|null} [sysNsDelta] TimeStats sysNsDelta\n     */\n\n    /**\n     * Constructs a new TimeStats.\n     * @exports TimeStats\n     * @classdesc Represents a TimeStats.\n     * @implements ITimeStats\n     * @constructor\n     * @param {ITimeStats=} [properties] Properties to set\n     */\n    function TimeStats(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TimeStats uptimeNs.\n     * @member {number} uptimeNs\n     * @memberof TimeStats\n     * @instance\n     */\n    TimeStats.prototype.uptimeNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * TimeStats realNsDelta.\n     * @member {number} realNsDelta\n     * @memberof TimeStats\n     * @instance\n     */\n    TimeStats.prototype.realNsDelta = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * TimeStats userNsDelta.\n     * @member {number} userNsDelta\n     * @memberof TimeStats\n     * @instance\n     */\n    TimeStats.prototype.userNsDelta = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * TimeStats sysNsDelta.\n     * @member {number} sysNsDelta\n     * @memberof TimeStats\n     * @instance\n     */\n    TimeStats.prototype.sysNsDelta = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new TimeStats instance using the specified properties.\n     * @function create\n     * @memberof TimeStats\n     * @static\n     * @param {ITimeStats=} [properties] Properties to set\n     * @returns {TimeStats} TimeStats instance\n     */\n    TimeStats.create = function create(properties) {\n        return new TimeStats(properties);\n    };\n\n    /**\n     * Encodes the specified TimeStats message. Does not implicitly {@link TimeStats.verify|verify} messages.\n     * @function encode\n     * @memberof TimeStats\n     * @static\n     * @param {ITimeStats} message TimeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TimeStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.uptimeNs != null && Object.hasOwnProperty.call(message, \"uptimeNs\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uptimeNs);\n        if (message.realNsDelta != null && Object.hasOwnProperty.call(message, \"realNsDelta\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.realNsDelta);\n        if (message.userNsDelta != null && Object.hasOwnProperty.call(message, \"userNsDelta\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.userNsDelta);\n        if (message.sysNsDelta != null && Object.hasOwnProperty.call(message, \"sysNsDelta\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sysNsDelta);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TimeStats message, length delimited. Does not implicitly {@link TimeStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TimeStats\n     * @static\n     * @param {ITimeStats} message TimeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TimeStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TimeStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof TimeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TimeStats} TimeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TimeStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TimeStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.uptimeNs = reader.uint64();\n                break;\n            case 2:\n                message.realNsDelta = reader.uint64();\n                break;\n            case 3:\n                message.userNsDelta = reader.uint64();\n                break;\n            case 4:\n                message.sysNsDelta = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TimeStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TimeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TimeStats} TimeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TimeStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TimeStats message.\n     * @function verify\n     * @memberof TimeStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TimeStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.uptimeNs != null && message.hasOwnProperty(\"uptimeNs\"))\n            if (!$util.isInteger(message.uptimeNs) && !(message.uptimeNs && $util.isInteger(message.uptimeNs.low) && $util.isInteger(message.uptimeNs.high)))\n                return \"uptimeNs: integer|Long expected\";\n        if (message.realNsDelta != null && message.hasOwnProperty(\"realNsDelta\"))\n            if (!$util.isInteger(message.realNsDelta) && !(message.realNsDelta && $util.isInteger(message.realNsDelta.low) && $util.isInteger(message.realNsDelta.high)))\n                return \"realNsDelta: integer|Long expected\";\n        if (message.userNsDelta != null && message.hasOwnProperty(\"userNsDelta\"))\n            if (!$util.isInteger(message.userNsDelta) && !(message.userNsDelta && $util.isInteger(message.userNsDelta.low) && $util.isInteger(message.userNsDelta.high)))\n                return \"userNsDelta: integer|Long expected\";\n        if (message.sysNsDelta != null && message.hasOwnProperty(\"sysNsDelta\"))\n            if (!$util.isInteger(message.sysNsDelta) && !(message.sysNsDelta && $util.isInteger(message.sysNsDelta.low) && $util.isInteger(message.sysNsDelta.high)))\n                return \"sysNsDelta: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a TimeStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TimeStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TimeStats} TimeStats\n     */\n    TimeStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.TimeStats)\n            return object;\n        var message = new $root.TimeStats();\n        if (object.uptimeNs != null)\n            if ($util.Long)\n                (message.uptimeNs = $util.Long.fromValue(object.uptimeNs)).unsigned = true;\n            else if (typeof object.uptimeNs === \"string\")\n                message.uptimeNs = parseInt(object.uptimeNs, 10);\n            else if (typeof object.uptimeNs === \"number\")\n                message.uptimeNs = object.uptimeNs;\n            else if (typeof object.uptimeNs === \"object\")\n                message.uptimeNs = new $util.LongBits(object.uptimeNs.low >>> 0, object.uptimeNs.high >>> 0).toNumber(true);\n        if (object.realNsDelta != null)\n            if ($util.Long)\n                (message.realNsDelta = $util.Long.fromValue(object.realNsDelta)).unsigned = true;\n            else if (typeof object.realNsDelta === \"string\")\n                message.realNsDelta = parseInt(object.realNsDelta, 10);\n            else if (typeof object.realNsDelta === \"number\")\n                message.realNsDelta = object.realNsDelta;\n            else if (typeof object.realNsDelta === \"object\")\n                message.realNsDelta = new $util.LongBits(object.realNsDelta.low >>> 0, object.realNsDelta.high >>> 0).toNumber(true);\n        if (object.userNsDelta != null)\n            if ($util.Long)\n                (message.userNsDelta = $util.Long.fromValue(object.userNsDelta)).unsigned = true;\n            else if (typeof object.userNsDelta === \"string\")\n                message.userNsDelta = parseInt(object.userNsDelta, 10);\n            else if (typeof object.userNsDelta === \"number\")\n                message.userNsDelta = object.userNsDelta;\n            else if (typeof object.userNsDelta === \"object\")\n                message.userNsDelta = new $util.LongBits(object.userNsDelta.low >>> 0, object.userNsDelta.high >>> 0).toNumber(true);\n        if (object.sysNsDelta != null)\n            if ($util.Long)\n                (message.sysNsDelta = $util.Long.fromValue(object.sysNsDelta)).unsigned = true;\n            else if (typeof object.sysNsDelta === \"string\")\n                message.sysNsDelta = parseInt(object.sysNsDelta, 10);\n            else if (typeof object.sysNsDelta === \"number\")\n                message.sysNsDelta = object.sysNsDelta;\n            else if (typeof object.sysNsDelta === \"object\")\n                message.sysNsDelta = new $util.LongBits(object.sysNsDelta.low >>> 0, object.sysNsDelta.high >>> 0).toNumber(true);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TimeStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TimeStats\n     * @static\n     * @param {TimeStats} message TimeStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TimeStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.uptimeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.uptimeNs = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.realNsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.realNsDelta = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.userNsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.userNsDelta = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.sysNsDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.sysNsDelta = options.longs === String ? \"0\" : 0;\n        }\n        if (message.uptimeNs != null && message.hasOwnProperty(\"uptimeNs\"))\n            if (typeof message.uptimeNs === \"number\")\n                object.uptimeNs = options.longs === String ? String(message.uptimeNs) : message.uptimeNs;\n            else\n                object.uptimeNs = options.longs === String ? $util.Long.prototype.toString.call(message.uptimeNs) : options.longs === Number ? new $util.LongBits(message.uptimeNs.low >>> 0, message.uptimeNs.high >>> 0).toNumber(true) : message.uptimeNs;\n        if (message.realNsDelta != null && message.hasOwnProperty(\"realNsDelta\"))\n            if (typeof message.realNsDelta === \"number\")\n                object.realNsDelta = options.longs === String ? String(message.realNsDelta) : message.realNsDelta;\n            else\n                object.realNsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.realNsDelta) : options.longs === Number ? new $util.LongBits(message.realNsDelta.low >>> 0, message.realNsDelta.high >>> 0).toNumber(true) : message.realNsDelta;\n        if (message.userNsDelta != null && message.hasOwnProperty(\"userNsDelta\"))\n            if (typeof message.userNsDelta === \"number\")\n                object.userNsDelta = options.longs === String ? String(message.userNsDelta) : message.userNsDelta;\n            else\n                object.userNsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.userNsDelta) : options.longs === Number ? new $util.LongBits(message.userNsDelta.low >>> 0, message.userNsDelta.high >>> 0).toNumber(true) : message.userNsDelta;\n        if (message.sysNsDelta != null && message.hasOwnProperty(\"sysNsDelta\"))\n            if (typeof message.sysNsDelta === \"number\")\n                object.sysNsDelta = options.longs === String ? String(message.sysNsDelta) : message.sysNsDelta;\n            else\n                object.sysNsDelta = options.longs === String ? $util.Long.prototype.toString.call(message.sysNsDelta) : options.longs === Number ? new $util.LongBits(message.sysNsDelta.low >>> 0, message.sysNsDelta.high >>> 0).toNumber(true) : message.sysNsDelta;\n        return object;\n    };\n\n    /**\n     * Converts this TimeStats to JSON.\n     * @function toJSON\n     * @memberof TimeStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TimeStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TimeStats;\n})();\n\n$root.StatsReport = (function() {\n\n    /**\n     * Properties of a StatsReport.\n     * @exports IStatsReport\n     * @interface IStatsReport\n     * @property {IReportHeader|null} [header] StatsReport header\n     * @property {IMemStats|null} [memStats] StatsReport memStats\n     * @property {ITimeStats|null} [timeStats] StatsReport timeStats\n     * @property {google.protobuf.ITimestamp|null} [startTime] StatsReport startTime\n     * @property {google.protobuf.ITimestamp|null} [endTime] StatsReport endTime\n     * @property {number|null} [realtimeDuration] StatsReport realtimeDuration\n     * @property {Object.<string,IQueryStats>|null} [perQuery] StatsReport perQuery\n     * @property {Object.<string,IQueryStats>|null} [legacyPerQueryImplicitOperationName] StatsReport legacyPerQueryImplicitOperationName\n     * @property {Array.<IType>|null} [type] StatsReport type\n     */\n\n    /**\n     * Constructs a new StatsReport.\n     * @exports StatsReport\n     * @classdesc Represents a StatsReport.\n     * @implements IStatsReport\n     * @constructor\n     * @param {IStatsReport=} [properties] Properties to set\n     */\n    function StatsReport(properties) {\n        this.perQuery = {};\n        this.legacyPerQueryImplicitOperationName = {};\n        this.type = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StatsReport header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof StatsReport\n     * @instance\n     */\n    StatsReport.prototype.header = null;\n\n    /**\n     * StatsReport memStats.\n     * @member {IMemStats|null|undefined} memStats\n     * @memberof StatsReport\n     * @instance\n     */\n    StatsReport.prototype.memStats = null;\n\n    /**\n     * StatsReport timeStats.\n     * @member {ITimeStats|null|undefined} timeStats\n     * @memberof StatsReport\n     * @instance\n     */\n    StatsReport.prototype.timeStats = null;\n\n    /**\n     * StatsReport startTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} startTime\n     * @memberof StatsReport\n     * @instance\n     */\n    StatsReport.prototype.startTime = null;\n\n    /**\n     * StatsReport endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof StatsReport\n     * @instance\n     */\n    StatsReport.prototype.endTime = null;\n\n    /**\n     * StatsReport realtimeDuration.\n     * @member {number} realtimeDuration\n     * @memberof StatsReport\n     * @instance\n     */\n    StatsReport.prototype.realtimeDuration = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * StatsReport perQuery.\n     * @member {Object.<string,IQueryStats>} perQuery\n     * @memberof StatsReport\n     * @instance\n     */\n    StatsReport.prototype.perQuery = $util.emptyObject;\n\n    /**\n     * StatsReport legacyPerQueryImplicitOperationName.\n     * @member {Object.<string,IQueryStats>} legacyPerQueryImplicitOperationName\n     * @memberof StatsReport\n     * @instance\n     */\n    StatsReport.prototype.legacyPerQueryImplicitOperationName = $util.emptyObject;\n\n    /**\n     * StatsReport type.\n     * @member {Array.<IType>} type\n     * @memberof StatsReport\n     * @instance\n     */\n    StatsReport.prototype.type = $util.emptyArray;\n\n    /**\n     * Creates a new StatsReport instance using the specified properties.\n     * @function create\n     * @memberof StatsReport\n     * @static\n     * @param {IStatsReport=} [properties] Properties to set\n     * @returns {StatsReport} StatsReport instance\n     */\n    StatsReport.create = function create(properties) {\n        return new StatsReport(properties);\n    };\n\n    /**\n     * Encodes the specified StatsReport message. Does not implicitly {@link StatsReport.verify|verify} messages.\n     * @function encode\n     * @memberof StatsReport\n     * @static\n     * @param {IStatsReport} message StatsReport message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsReport.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.memStats != null && Object.hasOwnProperty.call(message, \"memStats\"))\n            $root.MemStats.encode(message.memStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.timeStats != null && Object.hasOwnProperty.call(message, \"timeStats\"))\n            $root.TimeStats.encode(message.timeStats, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n        if (message.realtimeDuration != null && Object.hasOwnProperty.call(message, \"realtimeDuration\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.realtimeDuration);\n        if (message.legacyPerQueryImplicitOperationName != null && Object.hasOwnProperty.call(message, \"legacyPerQueryImplicitOperationName\"))\n            for (var keys = Object.keys(message.legacyPerQueryImplicitOperationName), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 12, wireType 2 =*/98).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.QueryStats.encode(message.legacyPerQueryImplicitOperationName[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.type != null && message.type.length)\n            for (var i = 0; i < message.type.length; ++i)\n                $root.Type.encode(message.type[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n        if (message.perQuery != null && Object.hasOwnProperty.call(message, \"perQuery\"))\n            for (var keys = Object.keys(message.perQuery), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 14, wireType 2 =*/114).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.QueryStats.encode(message.perQuery[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StatsReport message, length delimited. Does not implicitly {@link StatsReport.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StatsReport\n     * @static\n     * @param {IStatsReport} message StatsReport message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsReport.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StatsReport message from the specified reader or buffer.\n     * @function decode\n     * @memberof StatsReport\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StatsReport} StatsReport\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsReport.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StatsReport(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.memStats = $root.MemStats.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.timeStats = $root.TimeStats.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 9:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 10:\n                message.realtimeDuration = reader.uint64();\n                break;\n            case 14:\n                reader.skip().pos++;\n                if (message.perQuery === $util.emptyObject)\n                    message.perQuery = {};\n                key = reader.string();\n                reader.pos++;\n                message.perQuery[key] = $root.QueryStats.decode(reader, reader.uint32());\n                break;\n            case 12:\n                reader.skip().pos++;\n                if (message.legacyPerQueryImplicitOperationName === $util.emptyObject)\n                    message.legacyPerQueryImplicitOperationName = {};\n                key = reader.string();\n                reader.pos++;\n                message.legacyPerQueryImplicitOperationName[key] = $root.QueryStats.decode(reader, reader.uint32());\n                break;\n            case 13:\n                if (!(message.type && message.type.length))\n                    message.type = [];\n                message.type.push($root.Type.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StatsReport message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StatsReport\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StatsReport} StatsReport\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsReport.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StatsReport message.\n     * @function verify\n     * @memberof StatsReport\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StatsReport.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            var error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.memStats != null && message.hasOwnProperty(\"memStats\")) {\n            var error = $root.MemStats.verify(message.memStats);\n            if (error)\n                return \"memStats.\" + error;\n        }\n        if (message.timeStats != null && message.hasOwnProperty(\"timeStats\")) {\n            var error = $root.TimeStats.verify(message.timeStats);\n            if (error)\n                return \"timeStats.\" + error;\n        }\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n            if (error)\n                return \"startTime.\" + error;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.realtimeDuration != null && message.hasOwnProperty(\"realtimeDuration\"))\n            if (!$util.isInteger(message.realtimeDuration) && !(message.realtimeDuration && $util.isInteger(message.realtimeDuration.low) && $util.isInteger(message.realtimeDuration.high)))\n                return \"realtimeDuration: integer|Long expected\";\n        if (message.perQuery != null && message.hasOwnProperty(\"perQuery\")) {\n            if (!$util.isObject(message.perQuery))\n                return \"perQuery: object expected\";\n            var key = Object.keys(message.perQuery);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.QueryStats.verify(message.perQuery[key[i]]);\n                if (error)\n                    return \"perQuery.\" + error;\n            }\n        }\n        if (message.legacyPerQueryImplicitOperationName != null && message.hasOwnProperty(\"legacyPerQueryImplicitOperationName\")) {\n            if (!$util.isObject(message.legacyPerQueryImplicitOperationName))\n                return \"legacyPerQueryImplicitOperationName: object expected\";\n            var key = Object.keys(message.legacyPerQueryImplicitOperationName);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.QueryStats.verify(message.legacyPerQueryImplicitOperationName[key[i]]);\n                if (error)\n                    return \"legacyPerQueryImplicitOperationName.\" + error;\n            }\n        }\n        if (message.type != null && message.hasOwnProperty(\"type\")) {\n            if (!Array.isArray(message.type))\n                return \"type: array expected\";\n            for (var i = 0; i < message.type.length; ++i) {\n                var error = $root.Type.verify(message.type[i]);\n                if (error)\n                    return \"type.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a StatsReport message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof StatsReport\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {StatsReport} StatsReport\n     */\n    StatsReport.fromObject = function fromObject(object) {\n        if (object instanceof $root.StatsReport)\n            return object;\n        var message = new $root.StatsReport();\n        if (object.header != null) {\n            if (typeof object.header !== \"object\")\n                throw TypeError(\".StatsReport.header: object expected\");\n            message.header = $root.ReportHeader.fromObject(object.header);\n        }\n        if (object.memStats != null) {\n            if (typeof object.memStats !== \"object\")\n                throw TypeError(\".StatsReport.memStats: object expected\");\n            message.memStats = $root.MemStats.fromObject(object.memStats);\n        }\n        if (object.timeStats != null) {\n            if (typeof object.timeStats !== \"object\")\n                throw TypeError(\".StatsReport.timeStats: object expected\");\n            message.timeStats = $root.TimeStats.fromObject(object.timeStats);\n        }\n        if (object.startTime != null) {\n            if (typeof object.startTime !== \"object\")\n                throw TypeError(\".StatsReport.startTime: object expected\");\n            message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);\n        }\n        if (object.endTime != null) {\n            if (typeof object.endTime !== \"object\")\n                throw TypeError(\".StatsReport.endTime: object expected\");\n            message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);\n        }\n        if (object.realtimeDuration != null)\n            if ($util.Long)\n                (message.realtimeDuration = $util.Long.fromValue(object.realtimeDuration)).unsigned = true;\n            else if (typeof object.realtimeDuration === \"string\")\n                message.realtimeDuration = parseInt(object.realtimeDuration, 10);\n            else if (typeof object.realtimeDuration === \"number\")\n                message.realtimeDuration = object.realtimeDuration;\n            else if (typeof object.realtimeDuration === \"object\")\n                message.realtimeDuration = new $util.LongBits(object.realtimeDuration.low >>> 0, object.realtimeDuration.high >>> 0).toNumber(true);\n        if (object.perQuery) {\n            if (typeof object.perQuery !== \"object\")\n                throw TypeError(\".StatsReport.perQuery: object expected\");\n            message.perQuery = {};\n            for (var keys = Object.keys(object.perQuery), i = 0; i < keys.length; ++i) {\n                if (typeof object.perQuery[keys[i]] !== \"object\")\n                    throw TypeError(\".StatsReport.perQuery: object expected\");\n                message.perQuery[keys[i]] = $root.QueryStats.fromObject(object.perQuery[keys[i]]);\n            }\n        }\n        if (object.legacyPerQueryImplicitOperationName) {\n            if (typeof object.legacyPerQueryImplicitOperationName !== \"object\")\n                throw TypeError(\".StatsReport.legacyPerQueryImplicitOperationName: object expected\");\n            message.legacyPerQueryImplicitOperationName = {};\n            for (var keys = Object.keys(object.legacyPerQueryImplicitOperationName), i = 0; i < keys.length; ++i) {\n                if (typeof object.legacyPerQueryImplicitOperationName[keys[i]] !== \"object\")\n                    throw TypeError(\".StatsReport.legacyPerQueryImplicitOperationName: object expected\");\n                message.legacyPerQueryImplicitOperationName[keys[i]] = $root.QueryStats.fromObject(object.legacyPerQueryImplicitOperationName[keys[i]]);\n            }\n        }\n        if (object.type) {\n            if (!Array.isArray(object.type))\n                throw TypeError(\".StatsReport.type: array expected\");\n            message.type = [];\n            for (var i = 0; i < object.type.length; ++i) {\n                if (typeof object.type[i] !== \"object\")\n                    throw TypeError(\".StatsReport.type: object expected\");\n                message.type[i] = $root.Type.fromObject(object.type[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a StatsReport message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StatsReport\n     * @static\n     * @param {StatsReport} message StatsReport\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StatsReport.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.type = [];\n        if (options.objects || options.defaults) {\n            object.legacyPerQueryImplicitOperationName = {};\n            object.perQuery = {};\n        }\n        if (options.defaults) {\n            object.header = null;\n            object.memStats = null;\n            object.timeStats = null;\n            object.startTime = null;\n            object.endTime = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.realtimeDuration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.realtimeDuration = options.longs === String ? \"0\" : 0;\n        }\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        if (message.memStats != null && message.hasOwnProperty(\"memStats\"))\n            object.memStats = $root.MemStats.toObject(message.memStats, options);\n        if (message.timeStats != null && message.hasOwnProperty(\"timeStats\"))\n            object.timeStats = $root.TimeStats.toObject(message.timeStats, options);\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        if (message.realtimeDuration != null && message.hasOwnProperty(\"realtimeDuration\"))\n            if (typeof message.realtimeDuration === \"number\")\n                object.realtimeDuration = options.longs === String ? String(message.realtimeDuration) : message.realtimeDuration;\n            else\n                object.realtimeDuration = options.longs === String ? $util.Long.prototype.toString.call(message.realtimeDuration) : options.longs === Number ? new $util.LongBits(message.realtimeDuration.low >>> 0, message.realtimeDuration.high >>> 0).toNumber(true) : message.realtimeDuration;\n        var keys2;\n        if (message.legacyPerQueryImplicitOperationName && (keys2 = Object.keys(message.legacyPerQueryImplicitOperationName)).length) {\n            object.legacyPerQueryImplicitOperationName = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.legacyPerQueryImplicitOperationName[keys2[j]] = $root.QueryStats.toObject(message.legacyPerQueryImplicitOperationName[keys2[j]], options);\n        }\n        if (message.type && message.type.length) {\n            object.type = [];\n            for (var j = 0; j < message.type.length; ++j)\n                object.type[j] = $root.Type.toObject(message.type[j], options);\n        }\n        if (message.perQuery && (keys2 = Object.keys(message.perQuery)).length) {\n            object.perQuery = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perQuery[keys2[j]] = $root.QueryStats.toObject(message.perQuery[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this StatsReport to JSON.\n     * @function toJSON\n     * @memberof StatsReport\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StatsReport.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return StatsReport;\n})();\n\n$root.FullTracesReport = (function() {\n\n    /**\n     * Properties of a FullTracesReport.\n     * @exports IFullTracesReport\n     * @interface IFullTracesReport\n     * @property {IReportHeader|null} [header] FullTracesReport header\n     * @property {Object.<string,ITraces>|null} [tracesPerQuery] FullTracesReport tracesPerQuery\n     */\n\n    /**\n     * Constructs a new FullTracesReport.\n     * @exports FullTracesReport\n     * @classdesc Represents a FullTracesReport.\n     * @implements IFullTracesReport\n     * @constructor\n     * @param {IFullTracesReport=} [properties] Properties to set\n     */\n    function FullTracesReport(properties) {\n        this.tracesPerQuery = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FullTracesReport header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof FullTracesReport\n     * @instance\n     */\n    FullTracesReport.prototype.header = null;\n\n    /**\n     * FullTracesReport tracesPerQuery.\n     * @member {Object.<string,ITraces>} tracesPerQuery\n     * @memberof FullTracesReport\n     * @instance\n     */\n    FullTracesReport.prototype.tracesPerQuery = $util.emptyObject;\n\n    /**\n     * Creates a new FullTracesReport instance using the specified properties.\n     * @function create\n     * @memberof FullTracesReport\n     * @static\n     * @param {IFullTracesReport=} [properties] Properties to set\n     * @returns {FullTracesReport} FullTracesReport instance\n     */\n    FullTracesReport.create = function create(properties) {\n        return new FullTracesReport(properties);\n    };\n\n    /**\n     * Encodes the specified FullTracesReport message. Does not implicitly {@link FullTracesReport.verify|verify} messages.\n     * @function encode\n     * @memberof FullTracesReport\n     * @static\n     * @param {IFullTracesReport} message FullTracesReport message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FullTracesReport.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\"))\n            for (var keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.Traces.encode(message.tracesPerQuery[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FullTracesReport message, length delimited. Does not implicitly {@link FullTracesReport.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FullTracesReport\n     * @static\n     * @param {IFullTracesReport} message FullTracesReport message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FullTracesReport.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FullTracesReport message from the specified reader or buffer.\n     * @function decode\n     * @memberof FullTracesReport\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FullTracesReport} FullTracesReport\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FullTracesReport.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FullTracesReport(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 5:\n                reader.skip().pos++;\n                if (message.tracesPerQuery === $util.emptyObject)\n                    message.tracesPerQuery = {};\n                key = reader.string();\n                reader.pos++;\n                message.tracesPerQuery[key] = $root.Traces.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FullTracesReport message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FullTracesReport\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FullTracesReport} FullTracesReport\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FullTracesReport.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FullTracesReport message.\n     * @function verify\n     * @memberof FullTracesReport\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FullTracesReport.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            var error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n            if (!$util.isObject(message.tracesPerQuery))\n                return \"tracesPerQuery: object expected\";\n            var key = Object.keys(message.tracesPerQuery);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.Traces.verify(message.tracesPerQuery[key[i]]);\n                if (error)\n                    return \"tracesPerQuery.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a FullTracesReport message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof FullTracesReport\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {FullTracesReport} FullTracesReport\n     */\n    FullTracesReport.fromObject = function fromObject(object) {\n        if (object instanceof $root.FullTracesReport)\n            return object;\n        var message = new $root.FullTracesReport();\n        if (object.header != null) {\n            if (typeof object.header !== \"object\")\n                throw TypeError(\".FullTracesReport.header: object expected\");\n            message.header = $root.ReportHeader.fromObject(object.header);\n        }\n        if (object.tracesPerQuery) {\n            if (typeof object.tracesPerQuery !== \"object\")\n                throw TypeError(\".FullTracesReport.tracesPerQuery: object expected\");\n            message.tracesPerQuery = {};\n            for (var keys = Object.keys(object.tracesPerQuery), i = 0; i < keys.length; ++i) {\n                if (typeof object.tracesPerQuery[keys[i]] !== \"object\")\n                    throw TypeError(\".FullTracesReport.tracesPerQuery: object expected\");\n                message.tracesPerQuery[keys[i]] = $root.Traces.fromObject(object.tracesPerQuery[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a FullTracesReport message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FullTracesReport\n     * @static\n     * @param {FullTracesReport} message FullTracesReport\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FullTracesReport.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.tracesPerQuery = {};\n        if (options.defaults)\n            object.header = null;\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        var keys2;\n        if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n            object.tracesPerQuery = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.tracesPerQuery[keys2[j]] = $root.Traces.toObject(message.tracesPerQuery[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this FullTracesReport to JSON.\n     * @function toJSON\n     * @memberof FullTracesReport\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FullTracesReport.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FullTracesReport;\n})();\n\n$root.Traces = (function() {\n\n    /**\n     * Properties of a Traces.\n     * @exports ITraces\n     * @interface ITraces\n     * @property {Array.<ITrace>|null} [trace] Traces trace\n     */\n\n    /**\n     * Constructs a new Traces.\n     * @exports Traces\n     * @classdesc Represents a Traces.\n     * @implements ITraces\n     * @constructor\n     * @param {ITraces=} [properties] Properties to set\n     */\n    function Traces(properties) {\n        this.trace = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Traces trace.\n     * @member {Array.<ITrace>} trace\n     * @memberof Traces\n     * @instance\n     */\n    Traces.prototype.trace = $util.emptyArray;\n\n    /**\n     * Creates a new Traces instance using the specified properties.\n     * @function create\n     * @memberof Traces\n     * @static\n     * @param {ITraces=} [properties] Properties to set\n     * @returns {Traces} Traces instance\n     */\n    Traces.create = function create(properties) {\n        return new Traces(properties);\n    };\n\n    /**\n     * Encodes the specified Traces message. Does not implicitly {@link Traces.verify|verify} messages.\n     * @function encode\n     * @memberof Traces\n     * @static\n     * @param {ITraces} message Traces message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Traces.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trace != null && message.trace.length)\n            for (var i = 0; i < message.trace.length; ++i)\n                $root.Trace.encode(message.trace[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Traces message, length delimited. Does not implicitly {@link Traces.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Traces\n     * @static\n     * @param {ITraces} message Traces message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Traces.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Traces message from the specified reader or buffer.\n     * @function decode\n     * @memberof Traces\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Traces} Traces\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Traces.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Traces();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.trace && message.trace.length))\n                    message.trace = [];\n                message.trace.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Traces message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Traces\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Traces} Traces\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Traces.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Traces message.\n     * @function verify\n     * @memberof Traces\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Traces.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n            if (!Array.isArray(message.trace))\n                return \"trace: array expected\";\n            for (var i = 0; i < message.trace.length; ++i) {\n                var error = $root.Trace.verify(message.trace[i]);\n                if (error)\n                    return \"trace.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Traces message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Traces\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Traces} Traces\n     */\n    Traces.fromObject = function fromObject(object) {\n        if (object instanceof $root.Traces)\n            return object;\n        var message = new $root.Traces();\n        if (object.trace) {\n            if (!Array.isArray(object.trace))\n                throw TypeError(\".Traces.trace: array expected\");\n            message.trace = [];\n            for (var i = 0; i < object.trace.length; ++i) {\n                if (typeof object.trace[i] !== \"object\")\n                    throw TypeError(\".Traces.trace: object expected\");\n                message.trace[i] = $root.Trace.fromObject(object.trace[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Traces message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Traces\n     * @static\n     * @param {Traces} message Traces\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Traces.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.trace = [];\n        if (message.trace && message.trace.length) {\n            object.trace = [];\n            for (var j = 0; j < message.trace.length; ++j)\n                object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Traces to JSON.\n     * @function toJSON\n     * @memberof Traces\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Traces.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Traces;\n})();\n\n$root.TraceV1 = (function() {\n\n    /**\n     * Properties of a TraceV1.\n     * @exports ITraceV1\n     * @interface ITraceV1\n     * @property {IReportHeader|null} [header] TraceV1 header\n     * @property {ITrace|null} [trace] TraceV1 trace\n     */\n\n    /**\n     * Constructs a new TraceV1.\n     * @exports TraceV1\n     * @classdesc Represents a TraceV1.\n     * @implements ITraceV1\n     * @constructor\n     * @param {ITraceV1=} [properties] Properties to set\n     */\n    function TraceV1(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TraceV1 header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof TraceV1\n     * @instance\n     */\n    TraceV1.prototype.header = null;\n\n    /**\n     * TraceV1 trace.\n     * @member {ITrace|null|undefined} trace\n     * @memberof TraceV1\n     * @instance\n     */\n    TraceV1.prototype.trace = null;\n\n    /**\n     * Creates a new TraceV1 instance using the specified properties.\n     * @function create\n     * @memberof TraceV1\n     * @static\n     * @param {ITraceV1=} [properties] Properties to set\n     * @returns {TraceV1} TraceV1 instance\n     */\n    TraceV1.create = function create(properties) {\n        return new TraceV1(properties);\n    };\n\n    /**\n     * Encodes the specified TraceV1 message. Does not implicitly {@link TraceV1.verify|verify} messages.\n     * @function encode\n     * @memberof TraceV1\n     * @static\n     * @param {ITraceV1} message TraceV1 message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TraceV1.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\"))\n            $root.Trace.encode(message.trace, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TraceV1 message, length delimited. Does not implicitly {@link TraceV1.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TraceV1\n     * @static\n     * @param {ITraceV1} message TraceV1 message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TraceV1.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TraceV1 message from the specified reader or buffer.\n     * @function decode\n     * @memberof TraceV1\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TraceV1} TraceV1\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TraceV1.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TraceV1();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.trace = $root.Trace.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TraceV1 message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TraceV1\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TraceV1} TraceV1\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TraceV1.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TraceV1 message.\n     * @function verify\n     * @memberof TraceV1\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TraceV1.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            var error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n            var error = $root.Trace.verify(message.trace);\n            if (error)\n                return \"trace.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a TraceV1 message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TraceV1\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TraceV1} TraceV1\n     */\n    TraceV1.fromObject = function fromObject(object) {\n        if (object instanceof $root.TraceV1)\n            return object;\n        var message = new $root.TraceV1();\n        if (object.header != null) {\n            if (typeof object.header !== \"object\")\n                throw TypeError(\".TraceV1.header: object expected\");\n            message.header = $root.ReportHeader.fromObject(object.header);\n        }\n        if (object.trace != null) {\n            if (typeof object.trace !== \"object\")\n                throw TypeError(\".TraceV1.trace: object expected\");\n            message.trace = $root.Trace.fromObject(object.trace);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TraceV1 message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TraceV1\n     * @static\n     * @param {TraceV1} message TraceV1\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TraceV1.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.header = null;\n            object.trace = null;\n        }\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        if (message.trace != null && message.hasOwnProperty(\"trace\"))\n            object.trace = $root.Trace.toObject(message.trace, options);\n        return object;\n    };\n\n    /**\n     * Converts this TraceV1 to JSON.\n     * @function toJSON\n     * @memberof TraceV1\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TraceV1.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TraceV1;\n})();\n\n$root.google = (function() {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    var google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        var protobuf = {};\n\n        protobuf.Timestamp = (function() {\n\n            /**\n             * Properties of a Timestamp.\n             * @memberof google.protobuf\n             * @interface ITimestamp\n             * @property {number|null} [seconds] Timestamp seconds\n             * @property {number|null} [nanos] Timestamp nanos\n             */\n\n            /**\n             * Constructs a new Timestamp.\n             * @memberof google.protobuf\n             * @classdesc Represents a Timestamp.\n             * @implements ITimestamp\n             * @constructor\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             */\n            function Timestamp(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Timestamp seconds.\n             * @member {number} seconds\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Timestamp nanos.\n             * @member {number} nanos\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.nanos = 0;\n\n            /**\n             * Creates a new Timestamp instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             * @returns {google.protobuf.Timestamp} Timestamp instance\n             */\n            Timestamp.create = function create(properties) {\n                return new Timestamp(properties);\n            };\n\n            /**\n             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.seconds = reader.int64();\n                        break;\n                    case 2:\n                        message.nanos = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Timestamp message.\n             * @function verify\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Timestamp.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                        return \"seconds: integer|Long expected\";\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    if (!$util.isInteger(message.nanos))\n                        return \"nanos: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.Timestamp} Timestamp\n             */\n            Timestamp.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.Timestamp)\n                    return object;\n                var message = new $root.google.protobuf.Timestamp();\n                if (object.seconds != null)\n                    if ($util.Long)\n                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;\n                    else if (typeof object.seconds === \"string\")\n                        message.seconds = parseInt(object.seconds, 10);\n                    else if (typeof object.seconds === \"number\")\n                        message.seconds = object.seconds;\n                    else if (typeof object.seconds === \"object\")\n                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n                if (object.nanos != null)\n                    message.nanos = object.nanos | 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.Timestamp} message Timestamp\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Timestamp.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.seconds = options.longs === String ? \"0\" : 0;\n                    object.nanos = 0;\n                }\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (typeof message.seconds === \"number\")\n                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                    else\n                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    object.nanos = message.nanos;\n                return object;\n            };\n\n            /**\n             * Converts this Timestamp to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Timestamp.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Timestamp;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\nmodule.exports = $root;\n"]},"metadata":{},"sourceType":"script"}