{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst zlib_1 = require(\"zlib\");\n\nconst apollo_engine_reporting_protobuf_1 = require(\"apollo-engine-reporting-protobuf\");\n\nconst apollo_server_env_1 = require(\"apollo-server-env\");\n\nconst async_retry_1 = __importDefault(require(\"async-retry\"));\n\nconst extension_1 = require(\"./extension\");\n\nconst apollo_server_caching_1 = require(\"apollo-server-caching\");\n\nconst apollo_graphql_1 = require(\"apollo-graphql\");\n\nconst serviceHeaderDefaults = {\n  hostname: os_1.default.hostname(),\n  agentVersion: `apollo-engine-reporting@${require('../package.json').version}`,\n  runtimeVersion: `node ${process.version}`,\n  uname: `${os_1.default.platform()}, ${os_1.default.type()}, ${os_1.default.release()}, ${os_1.default.arch()})`\n};\n\nclass EngineReportingAgent {\n  constructor(options = {}) {\n    this.reports = Object.create(null);\n    this.reportSizes = Object.create(null);\n    this.stopped = false;\n    this.reportHeaders = Object.create(null);\n    this.signalHandlers = new Map();\n    this.options = options;\n    this.apiKey = options.apiKey || process.env.ENGINE_API_KEY || '';\n\n    if (!this.apiKey) {\n      throw new Error('To use EngineReportingAgent, you must specify an API key via the apiKey option or the ENGINE_API_KEY environment variable.');\n    }\n\n    this.signatureCache = createSignatureCache();\n    this.sendReportsImmediately = options.sendReportsImmediately;\n\n    if (!this.sendReportsImmediately) {\n      this.reportTimer = setInterval(() => this.sendAllReportsAndReportErrors(), this.options.reportIntervalMs || 10 * 1000);\n    }\n\n    if (this.options.handleSignals !== false) {\n      const signals = ['SIGINT', 'SIGTERM'];\n      signals.forEach(signal => {\n        const handler = () => __awaiter(this, void 0, void 0, function* () {\n          this.stop();\n          yield this.sendAllReportsAndReportErrors();\n          process.kill(process.pid, signal);\n        });\n\n        process.once(signal, handler);\n        this.signalHandlers.set(signal, handler);\n      });\n    }\n\n    handleLegacyOptions(this.options);\n  }\n\n  newExtension(schemaHash) {\n    return new extension_1.EngineReportingExtension(this.options, this.addTrace.bind(this), schemaHash);\n  }\n\n  addTrace({\n    trace,\n    queryHash,\n    documentAST,\n    operationName,\n    queryString,\n    schemaHash\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.stopped) {\n        return;\n      }\n\n      if (!(schemaHash in this.reports)) {\n        this.reportHeaders[schemaHash] = new apollo_engine_reporting_protobuf_1.ReportHeader(Object.assign(Object.assign({}, serviceHeaderDefaults), {\n          schemaHash,\n          schemaTag: this.options.schemaTag || process.env.ENGINE_SCHEMA_TAG || ''\n        }));\n        this.resetReport(schemaHash);\n      }\n\n      const report = this.reports[schemaHash];\n      const protobufError = apollo_engine_reporting_protobuf_1.Trace.verify(trace);\n\n      if (protobufError) {\n        throw new Error(`Error encoding trace: ${protobufError}`);\n      }\n\n      const encodedTrace = apollo_engine_reporting_protobuf_1.Trace.encode(trace).finish();\n      const signature = yield this.getTraceSignature({\n        queryHash,\n        documentAST,\n        queryString,\n        operationName\n      });\n      const statsReportKey = `# ${operationName || '-'}\\n${signature}`;\n\n      if (!report.tracesPerQuery.hasOwnProperty(statsReportKey)) {\n        report.tracesPerQuery[statsReportKey] = new apollo_engine_reporting_protobuf_1.Traces();\n        report.tracesPerQuery[statsReportKey].encodedTraces = [];\n      }\n\n      report.tracesPerQuery[statsReportKey].encodedTraces.push(encodedTrace);\n      this.reportSizes[schemaHash] += encodedTrace.length + Buffer.byteLength(statsReportKey);\n\n      if (this.sendReportsImmediately || this.reportSizes[schemaHash] >= (this.options.maxUncompressedReportSize || 4 * 1024 * 1024)) {\n        yield this.sendReportAndReportErrors(schemaHash);\n      }\n    });\n  }\n\n  sendAllReports() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield Promise.all(Object.keys(this.reports).map(hash => this.sendReport(hash)));\n    });\n  }\n\n  sendReport(schemaHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const report = this.reports[schemaHash];\n      this.resetReport(schemaHash);\n\n      if (Object.keys(report.tracesPerQuery).length === 0) {\n        return;\n      }\n\n      yield Promise.resolve();\n\n      if (this.options.debugPrintReports) {\n        console.log(`Engine sending report: ${JSON.stringify(report.toJSON())}`);\n      }\n\n      const protobufError = apollo_engine_reporting_protobuf_1.FullTracesReport.verify(report);\n\n      if (protobufError) {\n        throw new Error(`Error encoding report: ${protobufError}`);\n      }\n\n      const message = apollo_engine_reporting_protobuf_1.FullTracesReport.encode(report).finish();\n      const compressed = yield new Promise((resolve, reject) => {\n        const messageBuffer = Buffer.from(message.buffer, message.byteOffset, message.byteLength);\n        zlib_1.gzip(messageBuffer, (err, gzipResult) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(gzipResult);\n          }\n        });\n      });\n      const endpointUrl = (this.options.endpointUrl || 'https://engine-report.apollodata.com') + '/api/ingress/traces';\n      const response = yield async_retry_1.default(() => __awaiter(this, void 0, void 0, function* () {\n        const curResponse = yield apollo_server_env_1.fetch(endpointUrl, {\n          method: 'POST',\n          headers: {\n            'user-agent': 'apollo-engine-reporting',\n            'x-api-key': this.apiKey,\n            'content-encoding': 'gzip'\n          },\n          body: compressed,\n          agent: this.options.requestAgent\n        });\n\n        if (curResponse.status >= 500 && curResponse.status < 600) {\n          throw new Error(`HTTP status ${curResponse.status}, ${(yield curResponse.text()) || '(no body)'}`);\n        } else {\n          return curResponse;\n        }\n      }), {\n        retries: (this.options.maxAttempts || 5) - 1,\n        minTimeout: this.options.minimumRetryDelayMs || 100,\n        factor: 2\n      }).catch(err => {\n        throw new Error(`Error sending report to Apollo Engine servers: ${err.message}`);\n      });\n\n      if (response.status < 200 || response.status >= 300) {\n        throw new Error(`Error sending report to Apollo Engine servers: HTTP status ${response.status}, ${(yield response.text()) || '(no body)'}`);\n      }\n\n      if (this.options.debugPrintReports) {\n        console.log(`Engine report: status ${response.status}`);\n      }\n    });\n  }\n\n  stop() {\n    this.signalHandlers.forEach((handler, signal) => {\n      process.removeListener(signal, handler);\n    });\n\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n      this.reportTimer = undefined;\n    }\n\n    this.stopped = true;\n  }\n\n  getTraceSignature({\n    queryHash,\n    operationName,\n    documentAST,\n    queryString\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!documentAST && !queryString) {\n        throw new Error('No queryString or parsedQuery?');\n      }\n\n      const cacheKey = signatureCacheKey(queryHash, operationName);\n      const cachedSignature = yield this.signatureCache.get(cacheKey);\n\n      if (cachedSignature) {\n        return cachedSignature;\n      }\n\n      if (!documentAST) {\n        return queryString;\n      }\n\n      const generatedSignature = (this.options.calculateSignature || apollo_graphql_1.defaultEngineReportingSignature)(documentAST, operationName);\n      this.signatureCache.set(cacheKey, generatedSignature);\n      return generatedSignature;\n    });\n  }\n\n  sendAllReportsAndReportErrors() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield Promise.all(Object.keys(this.reports).map(schemaHash => this.sendReportAndReportErrors(schemaHash)));\n    });\n  }\n\n  sendReportAndReportErrors(schemaHash) {\n    return this.sendReport(schemaHash).catch(err => {\n      if (this.options.reportErrorFunction) {\n        this.options.reportErrorFunction(err);\n      } else {\n        console.error(err.message);\n      }\n    });\n  }\n\n  resetReport(schemaHash) {\n    this.reports[schemaHash] = new apollo_engine_reporting_protobuf_1.FullTracesReport({\n      header: this.reportHeaders[schemaHash]\n    });\n    this.reportSizes[schemaHash] = 0;\n  }\n\n}\n\nexports.EngineReportingAgent = EngineReportingAgent;\n\nfunction createSignatureCache() {\n  let lastSignatureCacheWarn;\n  let lastSignatureCacheDisposals = 0;\n  return new apollo_server_caching_1.InMemoryLRUCache({\n    sizeCalculator(obj) {\n      return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n    },\n\n    maxSize: Math.pow(2, 20) * 3,\n\n    onDispose() {\n      lastSignatureCacheDisposals++;\n\n      if (!lastSignatureCacheWarn || new Date().getTime() - lastSignatureCacheWarn.getTime() > 60000) {\n        lastSignatureCacheWarn = new Date();\n        console.warn(['This server is processing a high number of unique operations.  ', `A total of ${lastSignatureCacheDisposals} records have been `, 'ejected from the Engine Reporting signature cache in the past ', 'interval.  If you see this warning frequently, please open an ', 'issue on the Apollo Server repository.'].join(''));\n        lastSignatureCacheDisposals = 0;\n      }\n    }\n\n  });\n}\n\nfunction signatureCacheKey(queryHash, operationName) {\n  return `${queryHash}${operationName && ':' + operationName}`;\n}\n\nexports.signatureCacheKey = signatureCacheKey;\n\nfunction handleLegacyOptions(options) {\n  if (typeof options.privateVariables !== 'undefined' && options.sendVariableValues) {\n    throw new Error(\"You have set both the 'sendVariableValues' and the deprecated 'privateVariables' options. Please only set 'sendVariableValues'.\");\n  } else if (typeof options.privateVariables !== 'undefined') {\n    if (options.privateVariables !== null) {\n      options.sendVariableValues = makeSendValuesBaseOptionsFromLegacy(options.privateVariables);\n    }\n\n    delete options.privateVariables;\n  }\n\n  if (typeof options.privateHeaders !== 'undefined' && options.sendHeaders) {\n    throw new Error(\"You have set both the 'sendHeaders' and the deprecated 'privateHeaders' options. Please only set 'sendHeaders'.\");\n  } else if (typeof options.privateHeaders !== 'undefined') {\n    if (options.privateHeaders !== null) {\n      options.sendHeaders = makeSendValuesBaseOptionsFromLegacy(options.privateHeaders);\n    }\n\n    delete options.privateHeaders;\n  }\n}\n\nexports.handleLegacyOptions = handleLegacyOptions;\n\nfunction makeSendValuesBaseOptionsFromLegacy(legacyPrivateOption) {\n  return Array.isArray(legacyPrivateOption) ? {\n    exceptNames: legacyPrivateOption\n  } : legacyPrivateOption ? {\n    none: true\n  } : {\n    all: true\n  };\n}","map":{"version":3,"sources":["../src/agent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os_1 = __importDefault(require(\"os\"));\nconst zlib_1 = require(\"zlib\");\nconst apollo_engine_reporting_protobuf_1 = require(\"apollo-engine-reporting-protobuf\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst async_retry_1 = __importDefault(require(\"async-retry\"));\nconst extension_1 = require(\"./extension\");\nconst apollo_server_caching_1 = require(\"apollo-server-caching\");\nconst apollo_graphql_1 = require(\"apollo-graphql\");\nconst serviceHeaderDefaults = {\n    hostname: os_1.default.hostname(),\n    agentVersion: `apollo-engine-reporting@${require('../package.json').version}`,\n    runtimeVersion: `node ${process.version}`,\n    uname: `${os_1.default.platform()}, ${os_1.default.type()}, ${os_1.default.release()}, ${os_1.default.arch()})`,\n};\nclass EngineReportingAgent {\n    constructor(options = {}) {\n        this.reports = Object.create(null);\n        this.reportSizes = Object.create(null);\n        this.stopped = false;\n        this.reportHeaders = Object.create(null);\n        this.signalHandlers = new Map();\n        this.options = options;\n        this.apiKey = options.apiKey || process.env.ENGINE_API_KEY || '';\n        if (!this.apiKey) {\n            throw new Error('To use EngineReportingAgent, you must specify an API key via the apiKey option or the ENGINE_API_KEY environment variable.');\n        }\n        this.signatureCache = createSignatureCache();\n        this.sendReportsImmediately = options.sendReportsImmediately;\n        if (!this.sendReportsImmediately) {\n            this.reportTimer = setInterval(() => this.sendAllReportsAndReportErrors(), this.options.reportIntervalMs || 10 * 1000);\n        }\n        if (this.options.handleSignals !== false) {\n            const signals = ['SIGINT', 'SIGTERM'];\n            signals.forEach(signal => {\n                const handler = () => __awaiter(this, void 0, void 0, function* () {\n                    this.stop();\n                    yield this.sendAllReportsAndReportErrors();\n                    process.kill(process.pid, signal);\n                });\n                process.once(signal, handler);\n                this.signalHandlers.set(signal, handler);\n            });\n        }\n        handleLegacyOptions(this.options);\n    }\n    newExtension(schemaHash) {\n        return new extension_1.EngineReportingExtension(this.options, this.addTrace.bind(this), schemaHash);\n    }\n    addTrace({ trace, queryHash, documentAST, operationName, queryString, schemaHash, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.stopped) {\n                return;\n            }\n            if (!(schemaHash in this.reports)) {\n                this.reportHeaders[schemaHash] = new apollo_engine_reporting_protobuf_1.ReportHeader(Object.assign(Object.assign({}, serviceHeaderDefaults), { schemaHash, schemaTag: this.options.schemaTag || process.env.ENGINE_SCHEMA_TAG || '' }));\n                this.resetReport(schemaHash);\n            }\n            const report = this.reports[schemaHash];\n            const protobufError = apollo_engine_reporting_protobuf_1.Trace.verify(trace);\n            if (protobufError) {\n                throw new Error(`Error encoding trace: ${protobufError}`);\n            }\n            const encodedTrace = apollo_engine_reporting_protobuf_1.Trace.encode(trace).finish();\n            const signature = yield this.getTraceSignature({\n                queryHash,\n                documentAST,\n                queryString,\n                operationName,\n            });\n            const statsReportKey = `# ${operationName || '-'}\\n${signature}`;\n            if (!report.tracesPerQuery.hasOwnProperty(statsReportKey)) {\n                report.tracesPerQuery[statsReportKey] = new apollo_engine_reporting_protobuf_1.Traces();\n                report.tracesPerQuery[statsReportKey].encodedTraces = [];\n            }\n            report.tracesPerQuery[statsReportKey].encodedTraces.push(encodedTrace);\n            this.reportSizes[schemaHash] +=\n                encodedTrace.length + Buffer.byteLength(statsReportKey);\n            if (this.sendReportsImmediately ||\n                this.reportSizes[schemaHash] >=\n                    (this.options.maxUncompressedReportSize || 4 * 1024 * 1024)) {\n                yield this.sendReportAndReportErrors(schemaHash);\n            }\n        });\n    }\n    sendAllReports() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all(Object.keys(this.reports).map(hash => this.sendReport(hash)));\n        });\n    }\n    sendReport(schemaHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const report = this.reports[schemaHash];\n            this.resetReport(schemaHash);\n            if (Object.keys(report.tracesPerQuery).length === 0) {\n                return;\n            }\n            yield Promise.resolve();\n            if (this.options.debugPrintReports) {\n                console.log(`Engine sending report: ${JSON.stringify(report.toJSON())}`);\n            }\n            const protobufError = apollo_engine_reporting_protobuf_1.FullTracesReport.verify(report);\n            if (protobufError) {\n                throw new Error(`Error encoding report: ${protobufError}`);\n            }\n            const message = apollo_engine_reporting_protobuf_1.FullTracesReport.encode(report).finish();\n            const compressed = yield new Promise((resolve, reject) => {\n                const messageBuffer = Buffer.from(message.buffer, message.byteOffset, message.byteLength);\n                zlib_1.gzip(messageBuffer, (err, gzipResult) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(gzipResult);\n                    }\n                });\n            });\n            const endpointUrl = (this.options.endpointUrl || 'https://engine-report.apollodata.com') +\n                '/api/ingress/traces';\n            const response = yield async_retry_1.default(() => __awaiter(this, void 0, void 0, function* () {\n                const curResponse = yield apollo_server_env_1.fetch(endpointUrl, {\n                    method: 'POST',\n                    headers: {\n                        'user-agent': 'apollo-engine-reporting',\n                        'x-api-key': this.apiKey,\n                        'content-encoding': 'gzip',\n                    },\n                    body: compressed,\n                    agent: this.options.requestAgent,\n                });\n                if (curResponse.status >= 500 && curResponse.status < 600) {\n                    throw new Error(`HTTP status ${curResponse.status}, ${(yield curResponse.text()) ||\n                        '(no body)'}`);\n                }\n                else {\n                    return curResponse;\n                }\n            }), {\n                retries: (this.options.maxAttempts || 5) - 1,\n                minTimeout: this.options.minimumRetryDelayMs || 100,\n                factor: 2,\n            }).catch((err) => {\n                throw new Error(`Error sending report to Apollo Engine servers: ${err.message}`);\n            });\n            if (response.status < 200 || response.status >= 300) {\n                throw new Error(`Error sending report to Apollo Engine servers: HTTP status ${response.status}, ${(yield response.text()) || '(no body)'}`);\n            }\n            if (this.options.debugPrintReports) {\n                console.log(`Engine report: status ${response.status}`);\n            }\n        });\n    }\n    stop() {\n        this.signalHandlers.forEach((handler, signal) => {\n            process.removeListener(signal, handler);\n        });\n        if (this.reportTimer) {\n            clearInterval(this.reportTimer);\n            this.reportTimer = undefined;\n        }\n        this.stopped = true;\n    }\n    getTraceSignature({ queryHash, operationName, documentAST, queryString, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!documentAST && !queryString) {\n                throw new Error('No queryString or parsedQuery?');\n            }\n            const cacheKey = signatureCacheKey(queryHash, operationName);\n            const cachedSignature = yield this.signatureCache.get(cacheKey);\n            if (cachedSignature) {\n                return cachedSignature;\n            }\n            if (!documentAST) {\n                return queryString;\n            }\n            const generatedSignature = (this.options.calculateSignature || apollo_graphql_1.defaultEngineReportingSignature)(documentAST, operationName);\n            this.signatureCache.set(cacheKey, generatedSignature);\n            return generatedSignature;\n        });\n    }\n    sendAllReportsAndReportErrors() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all(Object.keys(this.reports).map(schemaHash => this.sendReportAndReportErrors(schemaHash)));\n        });\n    }\n    sendReportAndReportErrors(schemaHash) {\n        return this.sendReport(schemaHash).catch(err => {\n            if (this.options.reportErrorFunction) {\n                this.options.reportErrorFunction(err);\n            }\n            else {\n                console.error(err.message);\n            }\n        });\n    }\n    resetReport(schemaHash) {\n        this.reports[schemaHash] = new apollo_engine_reporting_protobuf_1.FullTracesReport({\n            header: this.reportHeaders[schemaHash],\n        });\n        this.reportSizes[schemaHash] = 0;\n    }\n}\nexports.EngineReportingAgent = EngineReportingAgent;\nfunction createSignatureCache() {\n    let lastSignatureCacheWarn;\n    let lastSignatureCacheDisposals = 0;\n    return new apollo_server_caching_1.InMemoryLRUCache({\n        sizeCalculator(obj) {\n            return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n        },\n        maxSize: Math.pow(2, 20) * 3,\n        onDispose() {\n            lastSignatureCacheDisposals++;\n            if (!lastSignatureCacheWarn ||\n                new Date().getTime() - lastSignatureCacheWarn.getTime() > 60000) {\n                lastSignatureCacheWarn = new Date();\n                console.warn([\n                    'This server is processing a high number of unique operations.  ',\n                    `A total of ${lastSignatureCacheDisposals} records have been `,\n                    'ejected from the Engine Reporting signature cache in the past ',\n                    'interval.  If you see this warning frequently, please open an ',\n                    'issue on the Apollo Server repository.',\n                ].join(''));\n                lastSignatureCacheDisposals = 0;\n            }\n        },\n    });\n}\nfunction signatureCacheKey(queryHash, operationName) {\n    return `${queryHash}${operationName && ':' + operationName}`;\n}\nexports.signatureCacheKey = signatureCacheKey;\nfunction handleLegacyOptions(options) {\n    if (typeof options.privateVariables !== 'undefined' &&\n        options.sendVariableValues) {\n        throw new Error(\"You have set both the 'sendVariableValues' and the deprecated 'privateVariables' options. Please only set 'sendVariableValues'.\");\n    }\n    else if (typeof options.privateVariables !== 'undefined') {\n        if (options.privateVariables !== null) {\n            options.sendVariableValues = makeSendValuesBaseOptionsFromLegacy(options.privateVariables);\n        }\n        delete options.privateVariables;\n    }\n    if (typeof options.privateHeaders !== 'undefined' && options.sendHeaders) {\n        throw new Error(\"You have set both the 'sendHeaders' and the deprecated 'privateHeaders' options. Please only set 'sendHeaders'.\");\n    }\n    else if (typeof options.privateHeaders !== 'undefined') {\n        if (options.privateHeaders !== null) {\n            options.sendHeaders = makeSendValuesBaseOptionsFromLegacy(options.privateHeaders);\n        }\n        delete options.privateHeaders;\n    }\n}\nexports.handleLegacyOptions = handleLegacyOptions;\nfunction makeSendValuesBaseOptionsFromLegacy(legacyPrivateOption) {\n    return Array.isArray(legacyPrivateOption)\n        ? {\n            exceptNames: legacyPrivateOption,\n        }\n        : legacyPrivateOption\n            ? { none: true }\n            : { all: true };\n}\n//# sourceMappingURL=agent.js.map"]},"metadata":{},"sourceType":"script"}