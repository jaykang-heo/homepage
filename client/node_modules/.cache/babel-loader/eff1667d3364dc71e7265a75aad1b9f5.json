{"ast":null,"code":"var _jsxFileName = \"/home/jay/Desktop/homepage/src/practiceCode/code.js\";\nimport React, { Component } from 'react';\nimport './code.css';\nimport path from './question.js';\nimport path1 from './template.js';\nimport path2 from './total.js';\nimport { LiveProvider, LiveEditor, LivePreview, LiveError } from 'react-live';\n\nvar chai = require('chai');\n\nvar assert = require(\"assert\");\n\nvar start = '';\nvar end = '';\nvar code = false;\n\nfunction startCoding() {\n  if (!code) {\n    start = Date.now();\n    document.getElementById('wholeContent').style.visibility = 'visible';\n    document.getElementById('startButton').style.visibility = 'hidden';\n    document.getElementById('startButton').style.display = 'none';\n    code = true;\n  } else if (code) {\n    end = Date.now();\n    document.getElementById('wholeContent').style.visibility = 'hidden';\n    document.getElementById('startButton').style.visibility = 'visible';\n    document.getElementById('startButton').style.display = 'flex';\n    var time = end - start;\n    var result = 'You took ' + parseInt(time / 60) + ' seconds!';\n    document.getElementById('result').textContent = result;\n    code = false;\n  }\n}\n\nfunction parseFunction(str) {\n  var fn_body_idx = str.indexOf('{'),\n      fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),\n      fn_declare = str.substring(0, fn_body_idx),\n      fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),\n      args = fn_params.split(',');\n  args.push(fn_body);\n\n  function Fn() {\n    return Function.apply(this, args);\n  }\n\n  Fn.prototype = Function.prototype;\n  return new Fn();\n}\n\nfunction convertTemplate() {\n  var func = parseFunction(document.getElementById('template').value);\n  getAnswer(func([3, 5, -4, 8, 11, 1, -1, 6], 10));\n}\n\nfunction getAnswer() {\n  console.log(document.getElementById('codeText').element);\n}\n\nclass practiceCode extends Component {\n  render() {\n    const question = path;\n    const template = path1;\n    const total = path2;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"startButton\",\n      className: \"startButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => startCoding(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Start Coding\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      id: \"result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"wholeContent\",\n      className: \"wholeContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"code\",\n      id: \"code\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"questionText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, question, React.createElement(\"label\", {\n      id: \"testCase\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(LiveProvider, {\n      code: template,\n      noInline: true,\n      id: \"codeText\",\n      onChange: getAnswer(),\n      className: \"codeText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(LiveEditor, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(LivePreview, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"submit\",\n      id: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => startCoding(),\n      className: \"submit\",\n      id: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Finish\"), React.createElement(\"button\", {\n      onClick: () => convertTemplate(),\n      className: \"submit\",\n      id: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Run\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, total))));\n  }\n\n}\n\nexport default practiceCode;","map":{"version":3,"sources":["/home/jay/Desktop/homepage/src/practiceCode/code.js"],"names":["React","Component","path","path1","path2","LiveProvider","LiveEditor","LivePreview","LiveError","chai","require","assert","start","end","code","startCoding","Date","now","document","getElementById","style","visibility","display","time","result","parseInt","textContent","parseFunction","str","fn_body_idx","indexOf","fn_body","substring","lastIndexOf","fn_declare","fn_params","args","split","push","Fn","Function","apply","prototype","convertTemplate","func","value","getAnswer","console","log","element","practiceCode","render","question","template","total"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAAQC,YAAR,EAAsBC,UAAtB,EAAkCC,WAAlC,EAA+CC,SAA/C,QAA+D,YAA/D;;AACA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIE,KAAK,GAAG,EAAZ;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,IAAI,GAAG,KAAX;;AACA,SAASC,WAAT,GAAsB;AAClB,MAAI,CAACD,IAAL,EAAU;AACNF,IAAAA,KAAK,GAAGI,IAAI,CAACC,GAAL,EAAR;AACAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAAxC,CAA8CC,UAA9C,GAA2D,SAA3D;AACAH,IAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,KAAvC,CAA6CC,UAA7C,GAA0D,QAA1D;AACAH,IAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,KAAvC,CAA6CE,OAA7C,GAAuD,MAAvD;AACAR,IAAAA,IAAI,GAAG,IAAP;AACH,GAND,MAOK,IAAIA,IAAJ,EAAS;AACVD,IAAAA,GAAG,GAAGG,IAAI,CAACC,GAAL,EAAN;AACAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAAxC,CAA8CC,UAA9C,GAA2D,QAA3D;AACAH,IAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,KAAvC,CAA6CC,UAA7C,GAA0D,SAA1D;AACAH,IAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,KAAvC,CAA6CE,OAA7C,GAAuD,MAAvD;AACA,QAAIC,IAAI,GAAGV,GAAG,GAAGD,KAAjB;AACA,QAAIY,MAAM,GAAG,cAAcC,QAAQ,CAACF,IAAI,GAAC,EAAN,CAAtB,GAAiC,WAA9C;AACAL,IAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCO,WAAlC,GAAgDF,MAAhD;AACAV,IAAAA,IAAI,GAAG,KAAP;AACH;AACJ;;AAED,SAASa,aAAT,CAAwBC,GAAxB,EAA6B;AACzB,MAAIC,WAAW,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAlB;AAAA,MACIC,OAAO,GAAGH,GAAG,CAACI,SAAJ,CAAcH,WAAW,GAAC,CAA1B,EAA6BD,GAAG,CAACK,WAAJ,CAAgB,GAAhB,CAA7B,CADd;AAAA,MAEIC,UAAU,GAAGN,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiBH,WAAjB,CAFjB;AAAA,MAGIM,SAAS,GAAGD,UAAU,CAACF,SAAX,CAAqBE,UAAU,CAACJ,OAAX,CAAmB,GAAnB,IAAwB,CAA7C,EAAgDI,UAAU,CAACD,WAAX,CAAuB,GAAvB,CAAhD,CAHhB;AAAA,MAIIG,IAAI,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAJX;AAMAD,EAAAA,IAAI,CAACE,IAAL,CAAUP,OAAV;;AAEA,WAASQ,EAAT,GAAe;AACb,WAAOC,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqBL,IAArB,CAAP;AACD;;AACDG,EAAAA,EAAE,CAACG,SAAH,GAAeF,QAAQ,CAACE,SAAxB;AAEA,SAAO,IAAIH,EAAJ,EAAP;AACD;;AAEH,SAASI,eAAT,GAA0B;AACtB,MAAIC,IAAI,GAAGjB,aAAa,CAACT,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoC0B,KAArC,CAAxB;AACAC,EAAAA,SAAS,CAACF,IAAI,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAC,CAAN,EAAQ,CAAR,EAAU,EAAV,EAAa,CAAb,EAAe,CAAC,CAAhB,EAAkB,CAAlB,CAAD,EAAsB,EAAtB,CAAL,CAAT;AACH;;AAED,SAASE,SAAT,GAAoB;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAY9B,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoC8B,OAAhD;AACH;;AAED,MAAMC,YAAN,SAA2BjD,SAA3B,CAAqC;AACjCkD,EAAAA,MAAM,GAAE;AACJ,UAAMC,QAAQ,GAAGlD,IAAjB;AACA,UAAMmD,QAAQ,GAAGlD,KAAjB;AACA,UAAMmD,KAAK,GAAGlD,KAAd;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,EAAE,EAAC,aAAR;AAAsB,MAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,MAAIW,WAAW,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAC8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD9D,EACmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADnE,EAEI;AAAO,MAAA,EAAE,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAOI;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,SAAS,EAAC,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,EAAE,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKqC,QADL,EAEI;AAAO,MAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAOI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAEC,QAApB;AAA8B,MAAA,QAAQ,EAAE,IAAxC;AAA8C,MAAA,EAAE,EAAC,UAAjD;AAA4D,MAAA,QAAQ,EAAEP,SAAS,EAA/E;AAAmF,MAAA,SAAS,EAAC,UAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAPJ,CADJ,EAaI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,EAAE,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,MAAI/B,WAAW,EAAhC;AAAoC,MAAA,SAAS,EAAC,QAA9C;AAAuD,MAAA,EAAE,EAAC,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAQ,MAAA,OAAO,EAAE,MAAI4B,eAAe,EAApC;AAAwC,MAAA,SAAS,EAAC,QAAlD;AAA2D,MAAA,EAAE,EAAC,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQW,KAAR,CAHJ,CAbJ,CAPJ,CADJ;AA6BC;;AAlC4B;;AAqCrC,eAAeJ,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport './code.css';\nimport path from './question.js'\nimport path1 from './template.js'\nimport path2 from './total.js'\nimport {LiveProvider, LiveEditor, LivePreview, LiveError} from 'react-live'\nvar chai = require('chai');\nvar assert = require(\"assert\");\n\nvar start = ''\nvar end = ''\nvar code = false\nfunction startCoding(){\n    if (!code){\n        start = Date.now()\n        document.getElementById('wholeContent').style.visibility = 'visible'\n        document.getElementById('startButton').style.visibility = 'hidden'\n        document.getElementById('startButton').style.display = 'none'\n        code = true\n    }\n    else if (code){\n        end = Date.now()\n        document.getElementById('wholeContent').style.visibility = 'hidden'\n        document.getElementById('startButton').style.visibility = 'visible'\n        document.getElementById('startButton').style.display = 'flex'\n        var time = end - start\n        var result = 'You took ' + parseInt(time/60) +' seconds!'\n        document.getElementById('result').textContent = result\n        code = false\n    }\n}\n\nfunction parseFunction (str) {\n    var fn_body_idx = str.indexOf('{'),\n        fn_body = str.substring(fn_body_idx+1, str.lastIndexOf('}')),\n        fn_declare = str.substring(0, fn_body_idx),\n        fn_params = fn_declare.substring(fn_declare.indexOf('(')+1, fn_declare.lastIndexOf(')')),\n        args = fn_params.split(',');\n  \n    args.push(fn_body);\n  \n    function Fn () {\n      return Function.apply(this, args);\n    }\n    Fn.prototype = Function.prototype;\n      \n    return new Fn();\n  }\n\nfunction convertTemplate(){\n    var func = parseFunction(document.getElementById('template').value)\n    getAnswer(func([3,5,-4,8,11,1,-1,6],10))\n}\n\nfunction getAnswer(){\n    console.log(document.getElementById('codeText').element)\n}\n\nclass practiceCode extends Component {\n    render(){\n        const question = path\n        const template = path1\n        const total = path2\n        return (\n            <div>\n                <div id='startButton' className='startButton'>\n                    <button onClick={()=>startCoding()} >Start Coding</button><br/><br/>\n                    <label id='result'>\n\n                    </label>\n                </div>\n                <div id='wholeContent' className='wholeContent'>\n                    <div className='code' id='code'>\n                        <label className='questionText'>\n                            {question}\n                            <label id='testCase'>\n\n                            </label>\n                        </label>\n                        <LiveProvider code={template} noInline={true} id='codeText' onChange={getAnswer()} className='codeText'>\n                            <LiveEditor/>\n                            <LivePreview />\n                        </LiveProvider>\n                    </div>\n                    <div className='submit' id='submit'>\n                        <button onClick={()=>startCoding()} className='submit' id='submit'>Finish</button>\n                        <button onClick={()=>convertTemplate()} className='submit' id='submit'>Run</button>\n                        <label>{total}</label>\n                    </div>\n                </div>\n            </div>\n          );\n        }\n    }\n  \nexport default practiceCode;"]},"metadata":{},"sourceType":"module"}