{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst apollo_engine_reporting_protobuf_1 = require(\"apollo-engine-reporting-protobuf\");\n\nconst treeBuilder_1 = require(\"./treeBuilder\");\n\nconst clientNameHeaderKey = 'apollographql-client-name';\nconst clientReferenceIdHeaderKey = 'apollographql-client-reference-id';\nconst clientVersionHeaderKey = 'apollographql-client-version';\n\nclass EngineReportingExtension {\n  constructor(options, addTrace, schemaHash) {\n    this.schemaHash = schemaHash;\n    this.options = Object.assign({}, options);\n    this.addTrace = addTrace;\n    this.generateClientInfo = options.generateClientInfo || defaultGenerateClientInfo;\n    this.treeBuilder = new treeBuilder_1.EngineReportingTreeBuilder({\n      rewriteError: options.rewriteError\n    });\n  }\n\n  requestDidStart(o) {\n    this.treeBuilder.startTiming();\n    o.requestContext.metrics.startHrTime = this.treeBuilder.startHrTime;\n    const queryHash = o.requestContext.queryHash;\n    this.queryString = o.queryString;\n    this.documentAST = o.parsedQuery;\n    this.treeBuilder.trace.http = new apollo_engine_reporting_protobuf_1.Trace.HTTP({\n      method: apollo_engine_reporting_protobuf_1.Trace.HTTP.Method[o.request.method] || apollo_engine_reporting_protobuf_1.Trace.HTTP.Method.UNKNOWN,\n      host: null,\n      path: null\n    });\n\n    if (this.options.sendHeaders) {\n      makeHTTPRequestHeaders(this.treeBuilder.trace.http, o.request.headers, this.options.sendHeaders);\n\n      if (o.requestContext.metrics.persistedQueryHit) {\n        this.treeBuilder.trace.persistedQueryHit = true;\n      }\n\n      if (o.requestContext.metrics.persistedQueryRegister) {\n        this.treeBuilder.trace.persistedQueryRegister = true;\n      }\n    }\n\n    if (o.variables) {\n      this.treeBuilder.trace.details = makeTraceDetails(o.variables, this.options.sendVariableValues, o.queryString);\n    }\n\n    const clientInfo = this.generateClientInfo(o.requestContext);\n\n    if (clientInfo) {\n      const {\n        clientName,\n        clientVersion,\n        clientReferenceId\n      } = clientInfo;\n      this.treeBuilder.trace.clientVersion = clientVersion || '';\n      this.treeBuilder.trace.clientReferenceId = clientReferenceId || '';\n      this.treeBuilder.trace.clientName = clientName || '';\n    }\n\n    return () => {\n      this.treeBuilder.stopTiming();\n      this.treeBuilder.trace.fullQueryCacheHit = !!o.requestContext.metrics.responseCacheHit;\n      this.treeBuilder.trace.forbiddenOperation = !!o.requestContext.metrics.forbiddenOperation;\n      this.treeBuilder.trace.registeredOperation = !!o.requestContext.metrics.registeredOperation;\n      const operationName = this.explicitOperationName || o.requestContext.operationName || '';\n      const documentAST = this.documentAST || o.requestContext.document;\n\n      if (o.requestContext.metrics.queryPlanTrace) {\n        this.treeBuilder.trace.queryPlan = o.requestContext.metrics.queryPlanTrace;\n      }\n\n      this.addTrace({\n        operationName,\n        queryHash,\n        documentAST,\n        queryString: this.queryString || '',\n        trace: this.treeBuilder.trace,\n        schemaHash: this.schemaHash\n      });\n    };\n  }\n\n  executionDidStart(o) {\n    if (o.executionArgs.operationName) {\n      this.explicitOperationName = o.executionArgs.operationName;\n    }\n\n    this.documentAST = o.executionArgs.document;\n  }\n\n  willResolveField(_source, _args, _context, info) {\n    return this.treeBuilder.willResolveField(info);\n  }\n\n  didEncounterErrors(errors) {\n    this.treeBuilder.didEncounterErrors(errors);\n  }\n\n}\n\nexports.EngineReportingExtension = EngineReportingExtension;\n\nfunction defaultGenerateClientInfo({\n  request\n}) {\n  if (request.http && request.http.headers && (request.http.headers.get(clientNameHeaderKey) || request.http.headers.get(clientVersionHeaderKey) || request.http.headers.get(clientReferenceIdHeaderKey))) {\n    return {\n      clientName: request.http.headers.get(clientNameHeaderKey),\n      clientVersion: request.http.headers.get(clientVersionHeaderKey),\n      clientReferenceId: request.http.headers.get(clientReferenceIdHeaderKey)\n    };\n  } else if (request.extensions && request.extensions.clientInfo) {\n    return request.extensions.clientInfo;\n  } else {\n    return {};\n  }\n}\n\nfunction makeTraceDetails(variables, sendVariableValues, operationString) {\n  const details = new apollo_engine_reporting_protobuf_1.Trace.Details();\n\n  const variablesToRecord = (() => {\n    if (sendVariableValues && 'transform' in sendVariableValues) {\n      const originalKeys = Object.keys(variables);\n\n      try {\n        const modifiedVariables = sendVariableValues.transform({\n          variables: variables,\n          operationString: operationString\n        });\n        return cleanModifiedVariables(originalKeys, modifiedVariables);\n      } catch (e) {\n        return handleVariableValueTransformError(originalKeys);\n      }\n    } else {\n      return variables;\n    }\n  })();\n\n  Object.keys(variablesToRecord).forEach(name => {\n    if (!sendVariableValues || 'none' in sendVariableValues && sendVariableValues.none || 'all' in sendVariableValues && !sendVariableValues.all || 'exceptNames' in sendVariableValues && sendVariableValues.exceptNames.includes(name) || 'onlyNames' in sendVariableValues && !sendVariableValues.onlyNames.includes(name)) {\n      details.variablesJson[name] = '';\n    } else {\n      try {\n        details.variablesJson[name] = typeof variablesToRecord[name] === 'undefined' ? '' : JSON.stringify(variablesToRecord[name]);\n      } catch (e) {\n        details.variablesJson[name] = JSON.stringify('[Unable to convert value to JSON]');\n      }\n    }\n  });\n  return details;\n}\n\nexports.makeTraceDetails = makeTraceDetails;\n\nfunction handleVariableValueTransformError(variableNames) {\n  const modifiedVariables = Object.create(null);\n  variableNames.forEach(name => {\n    modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n  });\n  return modifiedVariables;\n}\n\nfunction cleanModifiedVariables(originalKeys, modifiedVariables) {\n  const cleanedVariables = Object.create(null);\n  originalKeys.forEach(name => {\n    cleanedVariables[name] = modifiedVariables[name];\n  });\n  return cleanedVariables;\n}\n\nfunction makeHTTPRequestHeaders(http, headers, sendHeaders) {\n  if (!sendHeaders || 'none' in sendHeaders && sendHeaders.none || 'all' in sendHeaders && !sendHeaders.all) {\n    return;\n  }\n\n  for (const [key, value] of headers) {\n    const lowerCaseKey = key.toLowerCase();\n\n    if ('exceptNames' in sendHeaders && sendHeaders.exceptNames.some(exceptHeader => {\n      return exceptHeader.toLowerCase() === lowerCaseKey;\n    }) || 'onlyNames' in sendHeaders && !sendHeaders.onlyNames.some(header => {\n      return header.toLowerCase() === lowerCaseKey;\n    })) {\n      continue;\n    }\n\n    switch (key) {\n      case 'authorization':\n      case 'cookie':\n      case 'set-cookie':\n        break;\n\n      default:\n        http.requestHeaders[key] = new apollo_engine_reporting_protobuf_1.Trace.HTTP.Values({\n          value: [value]\n        });\n    }\n  }\n}\n\nexports.makeHTTPRequestHeaders = makeHTTPRequestHeaders;","map":{"version":3,"sources":["../src/extension.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst apollo_engine_reporting_protobuf_1 = require(\"apollo-engine-reporting-protobuf\");\nconst treeBuilder_1 = require(\"./treeBuilder\");\nconst clientNameHeaderKey = 'apollographql-client-name';\nconst clientReferenceIdHeaderKey = 'apollographql-client-reference-id';\nconst clientVersionHeaderKey = 'apollographql-client-version';\nclass EngineReportingExtension {\n    constructor(options, addTrace, schemaHash) {\n        this.schemaHash = schemaHash;\n        this.options = Object.assign({}, options);\n        this.addTrace = addTrace;\n        this.generateClientInfo =\n            options.generateClientInfo || defaultGenerateClientInfo;\n        this.treeBuilder = new treeBuilder_1.EngineReportingTreeBuilder({\n            rewriteError: options.rewriteError,\n        });\n    }\n    requestDidStart(o) {\n        this.treeBuilder.startTiming();\n        o.requestContext.metrics.startHrTime = this.treeBuilder.startHrTime;\n        const queryHash = o.requestContext.queryHash;\n        this.queryString = o.queryString;\n        this.documentAST = o.parsedQuery;\n        this.treeBuilder.trace.http = new apollo_engine_reporting_protobuf_1.Trace.HTTP({\n            method: apollo_engine_reporting_protobuf_1.Trace.HTTP.Method[o.request.method] ||\n                apollo_engine_reporting_protobuf_1.Trace.HTTP.Method.UNKNOWN,\n            host: null,\n            path: null,\n        });\n        if (this.options.sendHeaders) {\n            makeHTTPRequestHeaders(this.treeBuilder.trace.http, o.request.headers, this.options.sendHeaders);\n            if (o.requestContext.metrics.persistedQueryHit) {\n                this.treeBuilder.trace.persistedQueryHit = true;\n            }\n            if (o.requestContext.metrics.persistedQueryRegister) {\n                this.treeBuilder.trace.persistedQueryRegister = true;\n            }\n        }\n        if (o.variables) {\n            this.treeBuilder.trace.details = makeTraceDetails(o.variables, this.options.sendVariableValues, o.queryString);\n        }\n        const clientInfo = this.generateClientInfo(o.requestContext);\n        if (clientInfo) {\n            const { clientName, clientVersion, clientReferenceId } = clientInfo;\n            this.treeBuilder.trace.clientVersion = clientVersion || '';\n            this.treeBuilder.trace.clientReferenceId = clientReferenceId || '';\n            this.treeBuilder.trace.clientName = clientName || '';\n        }\n        return () => {\n            this.treeBuilder.stopTiming();\n            this.treeBuilder.trace.fullQueryCacheHit = !!o.requestContext.metrics\n                .responseCacheHit;\n            this.treeBuilder.trace.forbiddenOperation = !!o.requestContext.metrics\n                .forbiddenOperation;\n            this.treeBuilder.trace.registeredOperation = !!o.requestContext.metrics\n                .registeredOperation;\n            const operationName = this.explicitOperationName || o.requestContext.operationName || '';\n            const documentAST = this.documentAST || o.requestContext.document;\n            if (o.requestContext.metrics.queryPlanTrace) {\n                this.treeBuilder.trace.queryPlan =\n                    o.requestContext.metrics.queryPlanTrace;\n            }\n            this.addTrace({\n                operationName,\n                queryHash,\n                documentAST,\n                queryString: this.queryString || '',\n                trace: this.treeBuilder.trace,\n                schemaHash: this.schemaHash,\n            });\n        };\n    }\n    executionDidStart(o) {\n        if (o.executionArgs.operationName) {\n            this.explicitOperationName = o.executionArgs.operationName;\n        }\n        this.documentAST = o.executionArgs.document;\n    }\n    willResolveField(_source, _args, _context, info) {\n        return this.treeBuilder.willResolveField(info);\n    }\n    didEncounterErrors(errors) {\n        this.treeBuilder.didEncounterErrors(errors);\n    }\n}\nexports.EngineReportingExtension = EngineReportingExtension;\nfunction defaultGenerateClientInfo({ request }) {\n    if (request.http &&\n        request.http.headers &&\n        (request.http.headers.get(clientNameHeaderKey) ||\n            request.http.headers.get(clientVersionHeaderKey) ||\n            request.http.headers.get(clientReferenceIdHeaderKey))) {\n        return {\n            clientName: request.http.headers.get(clientNameHeaderKey),\n            clientVersion: request.http.headers.get(clientVersionHeaderKey),\n            clientReferenceId: request.http.headers.get(clientReferenceIdHeaderKey),\n        };\n    }\n    else if (request.extensions && request.extensions.clientInfo) {\n        return request.extensions.clientInfo;\n    }\n    else {\n        return {};\n    }\n}\nfunction makeTraceDetails(variables, sendVariableValues, operationString) {\n    const details = new apollo_engine_reporting_protobuf_1.Trace.Details();\n    const variablesToRecord = (() => {\n        if (sendVariableValues && 'transform' in sendVariableValues) {\n            const originalKeys = Object.keys(variables);\n            try {\n                const modifiedVariables = sendVariableValues.transform({\n                    variables: variables,\n                    operationString: operationString,\n                });\n                return cleanModifiedVariables(originalKeys, modifiedVariables);\n            }\n            catch (e) {\n                return handleVariableValueTransformError(originalKeys);\n            }\n        }\n        else {\n            return variables;\n        }\n    })();\n    Object.keys(variablesToRecord).forEach(name => {\n        if (!sendVariableValues ||\n            ('none' in sendVariableValues && sendVariableValues.none) ||\n            ('all' in sendVariableValues && !sendVariableValues.all) ||\n            ('exceptNames' in sendVariableValues &&\n                sendVariableValues.exceptNames.includes(name)) ||\n            ('onlyNames' in sendVariableValues &&\n                !sendVariableValues.onlyNames.includes(name))) {\n            details.variablesJson[name] = '';\n        }\n        else {\n            try {\n                details.variablesJson[name] =\n                    typeof variablesToRecord[name] === 'undefined'\n                        ? ''\n                        : JSON.stringify(variablesToRecord[name]);\n            }\n            catch (e) {\n                details.variablesJson[name] = JSON.stringify('[Unable to convert value to JSON]');\n            }\n        }\n    });\n    return details;\n}\nexports.makeTraceDetails = makeTraceDetails;\nfunction handleVariableValueTransformError(variableNames) {\n    const modifiedVariables = Object.create(null);\n    variableNames.forEach(name => {\n        modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n    });\n    return modifiedVariables;\n}\nfunction cleanModifiedVariables(originalKeys, modifiedVariables) {\n    const cleanedVariables = Object.create(null);\n    originalKeys.forEach(name => {\n        cleanedVariables[name] = modifiedVariables[name];\n    });\n    return cleanedVariables;\n}\nfunction makeHTTPRequestHeaders(http, headers, sendHeaders) {\n    if (!sendHeaders ||\n        ('none' in sendHeaders && sendHeaders.none) ||\n        ('all' in sendHeaders && !sendHeaders.all)) {\n        return;\n    }\n    for (const [key, value] of headers) {\n        const lowerCaseKey = key.toLowerCase();\n        if (('exceptNames' in sendHeaders &&\n            sendHeaders.exceptNames.some(exceptHeader => {\n                return exceptHeader.toLowerCase() === lowerCaseKey;\n            })) ||\n            ('onlyNames' in sendHeaders &&\n                !sendHeaders.onlyNames.some(header => {\n                    return header.toLowerCase() === lowerCaseKey;\n                }))) {\n            continue;\n        }\n        switch (key) {\n            case 'authorization':\n            case 'cookie':\n            case 'set-cookie':\n                break;\n            default:\n                http.requestHeaders[key] = new apollo_engine_reporting_protobuf_1.Trace.HTTP.Values({\n                    value: [value],\n                });\n        }\n    }\n}\nexports.makeHTTPRequestHeaders = makeHTTPRequestHeaders;\n//# sourceMappingURL=extension.js.map"]},"metadata":{},"sourceType":"script"}